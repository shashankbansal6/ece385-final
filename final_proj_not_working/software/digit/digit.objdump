
digit.elf:     file format elf32-littlenios2
digit.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001c0

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00005fc8 memsz 0x00005fc8 flags r-x
    LOAD off    0x00006fe8 vaddr 0x00005fe8 paddr 0x00007a54 align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x000094c0 vaddr 0x000094c0 paddr 0x000094c0 align 2**12
         filesz 0x00000000 memsz 0x00000150 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005d3c  000001c0  000001c0  000011c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000ec  00005efc  00005efc  00006efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  00005fe8  00007a54  00006fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000150  000094c0  000094c0  000094c0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00009610  00009610  00008a54  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00008a54  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a38  00000000  00000000  00008a78  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00017d1c  00000000  00000000  000094b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000063d3  00000000  00000000  000211cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006c4c  00000000  00000000  0002759f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001628  00000000  00000000  0002e1ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002389  00000000  00000000  0002f814  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004c85  00000000  00000000  00031b9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00036824  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000006c0  00000000  00000000  00036868  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00039422  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00039425  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00039431  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00039432  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00039433  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00039437  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0003943b  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000a  00000000  00000000  0003943f  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000a  00000000  00000000  00039449  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000a  00000000  00000000  00039453  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000004  00000000  00000000  0003945d  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000004d  00000000  00000000  00039461  2**0
                  CONTENTS, READONLY
 29 .jdi          00003dad  00000000  00000000  000394ae  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00038a5d  00000000  00000000  0003d25b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001c0 l    d  .text	00000000 .text
00005efc l    d  .rodata	00000000 .rodata
00005fe8 l    d  .rwdata	00000000 .rwdata
000094c0 l    d  .bss	00000000 .bss
00009610 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../digit_bsp//obj/HAL/src/crt0.o
000001f8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_load.c
0000067c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000a88 l     F .text	00000038 alt_dev_reg
00005fe8 l     O .rwdata	00001060 jtaguart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00000d70 l     F .text	0000020c altera_avalon_jtag_uart_irq
00000f7c l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
000016fc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00001844 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00001870 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00001c54 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00001db4 l     F .text	00000050 alt_get_errno
00001e04 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
000071f0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000456c l     F .text	00000008 __fp_unlock
00004580 l     F .text	0000019c __sinit.part.1
0000471c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00005830 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00005938 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
00005a34 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00005ba8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
00007a50 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00005dac l     F .text	00000050 alt_get_errno
0000550c g     F .text	00000054 _isatty_r
00000768 g     F .text	0000006c alt_main
00009510 g     O .bss	00000100 alt_irq
00005560 g     F .text	00000060 _lseek_r
00007a54 g       *ABS*	00000000 __flash_rwdata_start
00009610 g       *ABS*	00000000 __alt_heap_start
00005294 g     F .text	0000005c __sseek
000048cc g     F .text	00000010 __sinit
00003e98 g     F .text	00000140 __swbuf_r
00004724 g     F .text	00000078 __sfmoreglue
00005b84 g     F .text	00000024 __malloc_unlock
00003584 g     F .text	0000015c memmove
000048b4 g     F .text	00000018 _cleanup
00000a44 g     F .text	00000044 alt_putstr
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000054b0 g     F .text	0000005c _fstat_r
000094d8 g     O .bss	00000004 errno
00005210 g     F .text	00000008 __seofread
000094c4 g     O .bss	00000004 alt_argv
0000fa1c g       *ABS*	00000000 _gp
00007070 g     O .rwdata	00000180 alt_fd_list
000022a4 g     F .text	00000090 alt_find_dev
0000343c g     F .text	00000148 memcpy
00004574 g     F .text	0000000c _cleanup_r
000004bc g     F .text	00000068 SendMessage
00001d38 g     F .text	0000007c alt_io_redirect
0000117c g     F .text	0000021c altera_avalon_jtag_uart_read
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00005718 g     F .text	00000064 .hidden __udivsi3
00005988 g     F .text	000000ac isatty
000094e4 g     O .bss	00000004 __malloc_top_pad
00002608 g     F .text	000004c8 __sfvwrite_r
00003dac g     F .text	00000054 _sbrk_r
000055c0 g     F .text	00000060 _read_r
00007a2c g     O .rwdata	00000004 alt_max_fd
000053ac g     F .text	000000f0 _fclose_r
0000453c g     F .text	00000030 fflush
000094e0 g     O .bss	00000004 __malloc_max_sbrked_mem
00005a84 g     F .text	000000dc lseek
00007a40 g     O .rwdata	00000004 _global_impure_ptr
00003848 g     F .text	00000564 _realloc_r
00009610 g       *ABS*	00000000 __bss_end
00001b64 g     F .text	000000f0 alt_iic_isr_register
00002178 g     F .text	00000108 alt_tick
000048ec g     F .text	00000018 __fp_lock_all
00001b18 g     F .text	0000004c alt_ic_irq_enabled
000020dc g     F .text	0000009c alt_alarm_stop
000094cc g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000d4 alt_irq_handler
00007048 g     O .rwdata	00000028 alt_dev_null
00001824 g     F .text	00000020 alt_dcache_flush_all
00007a54 g       *ABS*	00000000 __ram_rwdata_end
00007a24 g     O .rwdata	00000008 alt_dev_list
00005dfc g     F .text	00000100 write
000036e0 g     F .text	000000a0 _putc_r
00005fe8 g       *ABS*	00000000 __ram_rodata_end
00005880 g     F .text	000000b8 fstat
0000577c g     F .text	00000058 .hidden __umodsi3
00009610 g       *ABS*	00000000 end
00000ca8 g     F .text	000000c8 altera_avalon_jtag_uart_init
0000a000 g       *ABS*	00000000 __alt_stack_pointer
00001398 g     F .text	00000224 altera_avalon_jtag_uart_write
000048dc g     F .text	00000004 __sfp_lock_acquire
000032dc g     F .text	000000e4 memchr
00004a40 g     F .text	00000310 _free_r
000007d4 g     F .text	0000022c alt_printf
00004144 g     F .text	00000180 __call_exitprocs
00007a48 g     O .rwdata	00000004 __malloc_sbrk_base
000001c0 g     F .text	0000003c _start
000094d0 g     O .bss	00000004 _alt_tick_rate
000094d4 g     O .bss	00000004 _alt_nticks
00005bf8 g     F .text	00000104 read
00000af8 g     F .text	0000004c alt_sys_init
00001024 g     F .text	00000068 altera_avalon_jtag_uart_close
000057d4 g     F .text	00000028 .hidden __mulsi3
00005fe8 g       *ABS*	00000000 __ram_rwdata_start
00005efc g       *ABS*	00000000 __ram_rodata_start
000094e8 g     O .bss	00000028 __malloc_current_mallinfo
00000b44 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00002448 g     F .text	000000d4 alt_get_fd
00000524 g     F .text	00000158 alt_busy_sleep
00005358 g     F .text	00000054 _close_r
000033c0 g     F .text	0000007c memcmp
00000c04 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00009610 g       *ABS*	00000000 __alt_stack_base
00000c54 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00003ff0 g     F .text	00000154 __swsetup_r
0000479c g     F .text	00000118 __sfp
00007614 g     O .rwdata	00000408 __malloc_av_
000048e8 g     F .text	00000004 __sinit_lock_release
000051bc g     F .text	00000054 __sread
00002334 g     F .text	00000114 alt_find_file
000018c0 g     F .text	000000a4 alt_dev_llist_insert
00005b60 g     F .text	00000024 __malloc_lock
00005cfc g     F .text	000000b0 sbrk
000044e0 g     F .text	0000005c _fflush_r
000094c0 g       *ABS*	00000000 __bss_start
00005094 g     F .text	00000128 memset
000001fc g     F .text	000001bc main
000094c8 g     O .bss	00000004 alt_envp
000094dc g     O .bss	00000004 __malloc_max_total_mem
00000ba4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00003fd8 g     F .text	00000018 __swbuf
000052f0 g     F .text	00000008 __sclose
0000a000 g       *ABS*	00000000 __alt_heap_limit
0000549c g     F .text	00000014 fclose
00002ad0 g     F .text	0000080c _malloc_r
00007a30 g     O .rwdata	00000004 alt_errno
00004d50 g     F .text	000000c4 _fwalk
00003780 g     F .text	000000c8 putc
00005620 g     F .text	00000084 .hidden __divsi3
0000491c g     F .text	00000124 _malloc_trim_r
00005efc g       *ABS*	00000000 __flash_rodata_start
00000ac0 g     F .text	00000038 alt_irq_init
00002058 g     F .text	00000084 alt_release_fd
000052f8 g     F .text	00000060 _write_r
00007a44 g     O .rwdata	00000004 _impure_ptr
000094c0 g     O .bss	00000004 alt_argc
000003b8 g     F .text	00000080 SendCommand
000042c4 g     F .text	0000021c __sflush_r
00000020 g       .exceptions	00000000 alt_irq_entry
00004904 g     F .text	00000018 __fp_unlock_all
00007a1c g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00001984 g     F .text	00000050 alt_ic_isr_register
00007a54 g       *ABS*	00000000 _edata
00009610 g       *ABS*	00000000 _end
000001c0 g       *ABS*	00000000 __ram_exceptions_end
0000108c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00002554 g     F .text	0000009c _fputs_r
00001a74 g     F .text	000000a4 alt_ic_irq_disable
00005218 g     F .text	0000007c __swrite
00007a4c g     O .rwdata	00000004 __malloc_trim_threshold
00002280 g     F .text	00000024 altera_nios2_qsys_irq_init
0000251c g     F .text	00000038 exit
00004e14 g     F .text	000000c4 _fwalk_reent
000056a4 g     F .text	00000074 .hidden __modsi3
0000a000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000048e0 g     F .text	00000004 __sfp_lock_release
000057fc g     F .text	00000034 _exit
000015bc g     F .text	00000140 alt_alarm_start
00004ed8 g     F .text	000001bc __smakebuf_r
00003e00 g     F .text	00000098 strlen
00001ef8 g     F .text	00000160 open
00000a00 g     F .text	00000044 alt_putchar
00001964 g     F .text	00000020 alt_icache_flush_all
000025f0 g     F .text	00000018 fputs
00007a34 g     O .rwdata	00000004 alt_priority_mask
000019d4 g     F .text	000000a0 alt_ic_irq_enable
00000438 g     F .text	00000084 SendData
00007a38 g     O .rwdata	00000008 alt_alarm_list
0000174c g     F .text	000000d8 close
000006e4 g     F .text	00000084 alt_load
000048e4 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08407014 	ori	at,at,448
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)

00000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100:	0005313a 	rdctl	r2,ipending
 104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 10c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 114:	00800044 	movi	r2,1
 118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	e0fffb17 	ldw	r3,-20(fp)
 120:	e0bffc17 	ldw	r2,-16(fp)
 124:	1884703a 	and	r2,r3,r2
 128:	10001426 	beq	r2,zero,17c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	00800074 	movhi	r2,1
 130:	10a54404 	addi	r2,r2,-27376
 134:	e0fffd17 	ldw	r3,-12(fp)
 138:	180690fa 	slli	r3,r3,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	10c00017 	ldw	r3,0(r2)
 144:	00800074 	movhi	r2,1
 148:	10a54404 	addi	r2,r2,-27376
 14c:	e13ffd17 	ldw	r4,-12(fp)
 150:	200890fa 	slli	r4,r4,3
 154:	1105883a 	add	r2,r2,r4
 158:	10800104 	addi	r2,r2,4
 15c:	10800017 	ldw	r2,0(r2)
 160:	1009883a 	mov	r4,r2
 164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 16c:	0005313a 	rdctl	r2,ipending
 170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	00000706 	br	198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 17c:	e0bffc17 	ldw	r2,-16(fp)
 180:	1085883a 	add	r2,r2,r2
 184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 188:	e0bffd17 	ldw	r2,-12(fp)
 18c:	10800044 	addi	r2,r2,1
 190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 194:	003fe106 	br	11c <_gp+0xffff0700>

    active = alt_irq_pending ();
 198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 19c:	e0bffb17 	ldw	r2,-20(fp)
 1a0:	103fdb1e 	bne	r2,zero,110 <_gp+0xffff06f4>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1a4:	0001883a 	nop
}
 1a8:	0001883a 	nop
 1ac:	e037883a 	mov	sp,fp
 1b0:	dfc00117 	ldw	ra,4(sp)
 1b4:	df000017 	ldw	fp,0(sp)
 1b8:	dec00204 	addi	sp,sp,8
 1bc:	f800283a 	ret

Disassembly of section .text:

000001c0 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1c0:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
     1c4:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
     1c8:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     1cc:	d6be8714 	ori	gp,gp,64028
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1d0:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     1d4:	10a53014 	ori	r2,r2,38080

    movhi r3, %hi(__bss_end)
     1d8:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     1dc:	18e58414 	ori	r3,r3,38416

    beq r2, r3, 1f
     1e0:	10c00326 	beq	r2,r3,1f0 <_start+0x30>

0:
    stw zero, (r2)
     1e4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1e8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1ec:	10fffd36 	bltu	r2,r3,1e4 <_gp+0xffff07c8>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1f0:	00006e40 	call	6e4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1f4:	00007680 	call	768 <alt_main>

000001f8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1f8:	003fff06 	br	1f8 <_gp+0xffff07dc>

000001fc <main>:
void SendCommand(alt_u8 cmd);  //Send command to LCD
void SendData(alt_u8 data);    //Send one character to LCD
void SendMessage(char *msg);   //Send a string to LCD

int main()
{
     1fc:	defffb04 	addi	sp,sp,-20
     200:	dfc00415 	stw	ra,16(sp)
     204:	df000315 	stw	fp,12(sp)
     208:	df000304 	addi	fp,sp,12
	while(1) {
		//Print "Hello World" in the console
		alt_putstr("Hello World from NiosII!\n");
     20c:	01000034 	movhi	r4,0
     210:	2117bf04 	addi	r4,r4,24316
     214:	0000a440 	call	a44 <alt_putstr>
		alt_u16 in = IORD_ALTERA_AVALON_PIO_DATA(NUMBERS);
     218:	008000b4 	movhi	r2,2
     21c:	10840404 	addi	r2,r2,4112
     220:	10800037 	ldwio	r2,0(r2)
     224:	e0bffd0d 	sth	r2,-12(fp)

		// From .sv code:
		// assign numbers	=  {complete, load, 10'h0, digit[3:0]};

		alt_u16 digit_mask = 0xf; // Get the digits from our computed output
     228:	008003c4 	movi	r2,15
     22c:	e0bffe0d 	sth	r2,-8(fp)
		alt_u16 complete_mask = 0x8000; // Check if our calculation is complete
     230:	00a00004 	movi	r2,-32768
     234:	e0bffe8d 	sth	r2,-6(fp)
		alt_u16 load_mask = 0x4000; // Check if the load signal has been raised by the camera system
     238:	00900004 	movi	r2,16384
     23c:	e0bfff0d 	sth	r2,-4(fp)

		alt_u16 result;

		while ((in & load_mask) == 0x4000) {
     240:	00000b06 	br	270 <main+0x74>
			result = 50; // ASCII for '0' is 48
     244:	00800c84 	movi	r2,50
     248:	e0bffd8d 	sth	r2,-10(fp)
			alt_printf ("it is true! %c\n", result);
     24c:	e0bffd8b 	ldhu	r2,-10(fp)
     250:	100b883a 	mov	r5,r2
     254:	01000034 	movhi	r4,0
     258:	2117c604 	addi	r4,r4,24344
     25c:	00007d40 	call	7d4 <alt_printf>
			in = IORD_ALTERA_AVALON_PIO_DATA(NUMBERS);
     260:	008000b4 	movhi	r2,2
     264:	10840404 	addi	r2,r2,4112
     268:	10800037 	ldwio	r2,0(r2)
     26c:	e0bffd0d 	sth	r2,-12(fp)
		alt_u16 complete_mask = 0x8000; // Check if our calculation is complete
		alt_u16 load_mask = 0x4000; // Check if the load signal has been raised by the camera system

		alt_u16 result;

		while ((in & load_mask) == 0x4000) {
     270:	e0fffd0b 	ldhu	r3,-12(fp)
     274:	e0bfff0b 	ldhu	r2,-4(fp)
     278:	1884703a 	and	r2,r3,r2
     27c:	10bfffcc 	andi	r2,r2,65535
     280:	10900020 	cmpeqi	r2,r2,16384
     284:	103fef1e 	bne	r2,zero,244 <_gp+0xffff0828>
			alt_printf ("it is true! %c\n", result);
			in = IORD_ALTERA_AVALON_PIO_DATA(NUMBERS);
		}

		//Initialize LCD
		SendCommand(0x0038);  //Function Set: 8 bit, 2 lines, 5*8 dots
     288:	01000e04 	movi	r4,56
     28c:	00003b80 	call	3b8 <SendCommand>
		SendCommand(0x000C);  //Display on, cursor off
     290:	01000304 	movi	r4,12
     294:	00003b80 	call	3b8 <SendCommand>
		//SendCommand(0x000F);  //Display on, cursor on, cursor blinking
		SendCommand(0x0001);  //Display Clear
     298:	01000044 	movi	r4,1
     29c:	00003b80 	call	3b8 <SendCommand>
		SendCommand(0x0006);  //Entry Mode: right-moving cursor (address increment), no display shift
     2a0:	01000184 	movi	r4,6
     2a4:	00003b80 	call	3b8 <SendCommand>

		//Write first line message to LCD
		SendMessage("You wrote");
     2a8:	01000034 	movhi	r4,0
     2ac:	2117ca04 	addi	r4,r4,24360
     2b0:	00004bc0 	call	4bc <SendMessage>

		//Change DDRAM locations to 40H to map to the second line
		SendCommand(0x00C0);  //Set DDRAM address to 40H
     2b4:	01003004 	movi	r4,192
     2b8:	00003b80 	call	3b8 <SendCommand>

		//Write second line message to LCD
		switch (result) {
     2bc:	e0bffd8b 	ldhu	r2,-10(fp)
     2c0:	10c002a8 	cmpgeui	r3,r2,10
     2c4:	1800381e 	bne	r3,zero,3a8 <main+0x1ac>
     2c8:	100690ba 	slli	r3,r2,2
     2cc:	00800034 	movhi	r2,0
     2d0:	1080b804 	addi	r2,r2,736
     2d4:	1885883a 	add	r2,r3,r2
     2d8:	10800017 	ldw	r2,0(r2)
     2dc:	1000683a 	jmp	r2
     2e0:	00000308 	cmpgei	zero,zero,12
     2e4:	00000318 	cmpnei	zero,zero,12
     2e8:	00000328 	cmpgeui	zero,zero,12
     2ec:	00000338 	rdprs	zero,zero,12
     2f0:	00000348 	cmpgei	zero,zero,13
     2f4:	00000358 	cmpnei	zero,zero,13
     2f8:	00000368 	cmpgeui	zero,zero,13
     2fc:	00000378 	rdprs	zero,zero,13
     300:	00000388 	cmpgei	zero,zero,14
     304:	00000398 	cmpnei	zero,zero,14
			case 0: SendMessage("number 0"); break;
     308:	01000034 	movhi	r4,0
     30c:	2117cd04 	addi	r4,r4,24372
     310:	00004bc0 	call	4bc <SendMessage>
     314:	00002706 	br	3b4 <main+0x1b8>
			case 1: SendMessage("number 1"); break;
     318:	01000034 	movhi	r4,0
     31c:	2117d004 	addi	r4,r4,24384
     320:	00004bc0 	call	4bc <SendMessage>
     324:	00002306 	br	3b4 <main+0x1b8>
			case 2: SendMessage("number 2"); break;
     328:	01000034 	movhi	r4,0
     32c:	2117d304 	addi	r4,r4,24396
     330:	00004bc0 	call	4bc <SendMessage>
     334:	00001f06 	br	3b4 <main+0x1b8>
			case 3: SendMessage("number 3"); break;
     338:	01000034 	movhi	r4,0
     33c:	2117d604 	addi	r4,r4,24408
     340:	00004bc0 	call	4bc <SendMessage>
     344:	00001b06 	br	3b4 <main+0x1b8>
			case 4: SendMessage("number 4"); break;
     348:	01000034 	movhi	r4,0
     34c:	2117d904 	addi	r4,r4,24420
     350:	00004bc0 	call	4bc <SendMessage>
     354:	00001706 	br	3b4 <main+0x1b8>
			case 5: SendMessage("number 5"); break;
     358:	01000034 	movhi	r4,0
     35c:	2117dc04 	addi	r4,r4,24432
     360:	00004bc0 	call	4bc <SendMessage>
     364:	00001306 	br	3b4 <main+0x1b8>
			case 6: SendMessage("number 6"); break;
     368:	01000034 	movhi	r4,0
     36c:	2117df04 	addi	r4,r4,24444
     370:	00004bc0 	call	4bc <SendMessage>
     374:	00000f06 	br	3b4 <main+0x1b8>
			case 7: SendMessage("number 7"); break;
     378:	01000034 	movhi	r4,0
     37c:	2117e204 	addi	r4,r4,24456
     380:	00004bc0 	call	4bc <SendMessage>
     384:	00000b06 	br	3b4 <main+0x1b8>
			case 8: SendMessage("number 8"); break;
     388:	01000034 	movhi	r4,0
     38c:	2117e504 	addi	r4,r4,24468
     390:	00004bc0 	call	4bc <SendMessage>
     394:	00000706 	br	3b4 <main+0x1b8>
			case 9: SendMessage("number 9"); break;
     398:	01000034 	movhi	r4,0
     39c:	2117e804 	addi	r4,r4,24480
     3a0:	00004bc0 	call	4bc <SendMessage>
     3a4:	00000306 	br	3b4 <main+0x1b8>
			default: SendMessage("nothing!");
     3a8:	01000034 	movhi	r4,0
     3ac:	2117eb04 	addi	r4,r4,24492
     3b0:	00004bc0 	call	4bc <SendMessage>
		}
	}
     3b4:	003f9506 	br	20c <_gp+0xffff07f0>

000003b8 <SendCommand>:
    return 0;
}

void SendCommand(alt_u8 cmd)  //bitbang
{
     3b8:	defffd04 	addi	sp,sp,-12
     3bc:	dfc00215 	stw	ra,8(sp)
     3c0:	df000115 	stw	fp,4(sp)
     3c4:	df000104 	addi	fp,sp,4
     3c8:	2005883a 	mov	r2,r4
     3cc:	e0bfff05 	stb	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BITBANG_BASE, 0x0400 | cmd);
     3d0:	e0bfff03 	ldbu	r2,-4(fp)
     3d4:	10c10014 	ori	r3,r2,1024
     3d8:	008000b4 	movhi	r2,2
     3dc:	10840004 	addi	r2,r2,4096
     3e0:	10c00035 	stwio	r3,0(r2)
	alt_busy_sleep(1000);
     3e4:	0100fa04 	movi	r4,1000
     3e8:	00005240 	call	524 <alt_busy_sleep>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BITBANG_BASE, 0x0000 | cmd);  //Enable
     3ec:	e0ffff03 	ldbu	r3,-4(fp)
     3f0:	008000b4 	movhi	r2,2
     3f4:	10840004 	addi	r2,r2,4096
     3f8:	10c00035 	stwio	r3,0(r2)
	alt_busy_sleep(1000);
     3fc:	0100fa04 	movi	r4,1000
     400:	00005240 	call	524 <alt_busy_sleep>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BITBANG_BASE, 0x0400 | cmd);
     404:	e0bfff03 	ldbu	r2,-4(fp)
     408:	10c10014 	ori	r3,r2,1024
     40c:	008000b4 	movhi	r2,2
     410:	10840004 	addi	r2,r2,4096
     414:	10c00035 	stwio	r3,0(r2)
	alt_busy_sleep(1000);
     418:	0100fa04 	movi	r4,1000
     41c:	00005240 	call	524 <alt_busy_sleep>
}
     420:	0001883a 	nop
     424:	e037883a 	mov	sp,fp
     428:	dfc00117 	ldw	ra,4(sp)
     42c:	df000017 	ldw	fp,0(sp)
     430:	dec00204 	addi	sp,sp,8
     434:	f800283a 	ret

00000438 <SendData>:

void SendData(alt_u8 data)  //bitbang
{
     438:	defffd04 	addi	sp,sp,-12
     43c:	dfc00215 	stw	ra,8(sp)
     440:	df000115 	stw	fp,4(sp)
     444:	df000104 	addi	fp,sp,4
     448:	2005883a 	mov	r2,r4
     44c:	e0bfff05 	stb	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BITBANG_BASE, 0x0600 | data);
     450:	e0bfff03 	ldbu	r2,-4(fp)
     454:	10c18014 	ori	r3,r2,1536
     458:	008000b4 	movhi	r2,2
     45c:	10840004 	addi	r2,r2,4096
     460:	10c00035 	stwio	r3,0(r2)
	alt_busy_sleep(1000);
     464:	0100fa04 	movi	r4,1000
     468:	00005240 	call	524 <alt_busy_sleep>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BITBANG_BASE, 0x0200 | data);  //Enable
     46c:	e0bfff03 	ldbu	r2,-4(fp)
     470:	10c08014 	ori	r3,r2,512
     474:	008000b4 	movhi	r2,2
     478:	10840004 	addi	r2,r2,4096
     47c:	10c00035 	stwio	r3,0(r2)
	alt_busy_sleep(1000);
     480:	0100fa04 	movi	r4,1000
     484:	00005240 	call	524 <alt_busy_sleep>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BITBANG_BASE, 0x0600 | data);
     488:	e0bfff03 	ldbu	r2,-4(fp)
     48c:	10c18014 	ori	r3,r2,1536
     490:	008000b4 	movhi	r2,2
     494:	10840004 	addi	r2,r2,4096
     498:	10c00035 	stwio	r3,0(r2)
	alt_busy_sleep(1000);
     49c:	0100fa04 	movi	r4,1000
     4a0:	00005240 	call	524 <alt_busy_sleep>
}
     4a4:	0001883a 	nop
     4a8:	e037883a 	mov	sp,fp
     4ac:	dfc00117 	ldw	ra,4(sp)
     4b0:	df000017 	ldw	fp,0(sp)
     4b4:	dec00204 	addi	sp,sp,8
     4b8:	f800283a 	ret

000004bc <SendMessage>:

void SendMessage(char *msg)
{
     4bc:	defffd04 	addi	sp,sp,-12
     4c0:	dfc00215 	stw	ra,8(sp)
     4c4:	df000115 	stw	fp,4(sp)
     4c8:	df000104 	addi	fp,sp,4
     4cc:	e13fff15 	stw	r4,-4(fp)
	for(;*msg!= 0;msg++)
     4d0:	00000806 	br	4f4 <SendMessage+0x38>
	{
		SendData(*msg);
     4d4:	e0bfff17 	ldw	r2,-4(fp)
     4d8:	10800003 	ldbu	r2,0(r2)
     4dc:	10803fcc 	andi	r2,r2,255
     4e0:	1009883a 	mov	r4,r2
     4e4:	00004380 	call	438 <SendData>
	alt_busy_sleep(1000);
}

void SendMessage(char *msg)
{
	for(;*msg!= 0;msg++)
     4e8:	e0bfff17 	ldw	r2,-4(fp)
     4ec:	10800044 	addi	r2,r2,1
     4f0:	e0bfff15 	stw	r2,-4(fp)
     4f4:	e0bfff17 	ldw	r2,-4(fp)
     4f8:	10800003 	ldbu	r2,0(r2)
     4fc:	10803fcc 	andi	r2,r2,255
     500:	1080201c 	xori	r2,r2,128
     504:	10bfe004 	addi	r2,r2,-128
     508:	103ff21e 	bne	r2,zero,4d4 <_gp+0xffff0ab8>
	{
		SendData(*msg);
	}
}
     50c:	0001883a 	nop
     510:	e037883a 	mov	sp,fp
     514:	dfc00117 	ldw	ra,4(sp)
     518:	df000017 	ldw	fp,0(sp)
     51c:	dec00204 	addi	sp,sp,8
     520:	f800283a 	ret

00000524 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
     524:	defffa04 	addi	sp,sp,-24
     528:	dfc00515 	stw	ra,20(sp)
     52c:	df000415 	stw	fp,16(sp)
     530:	df000404 	addi	fp,sp,16
     534:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
     538:	00800244 	movi	r2,9
     53c:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
     540:	014003f4 	movhi	r5,15
     544:	29509004 	addi	r5,r5,16960
     548:	e13ffd17 	ldw	r4,-12(fp)
     54c:	00057d40 	call	57d4 <__mulsi3>
     550:	100b883a 	mov	r5,r2
     554:	0100bef4 	movhi	r4,763
     558:	213c2004 	addi	r4,r4,-3968
     55c:	00057180 	call	5718 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
     560:	100b883a 	mov	r5,r2
     564:	01200034 	movhi	r4,32768
     568:	213fffc4 	addi	r4,r4,-1
     56c:	00057180 	call	5718 <__udivsi3>
     570:	100b883a 	mov	r5,r2
     574:	e13fff17 	ldw	r4,-4(fp)
     578:	00057180 	call	5718 <__udivsi3>
     57c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
     580:	e0bffe17 	ldw	r2,-8(fp)
     584:	10002a26 	beq	r2,zero,630 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
     588:	e03ffc15 	stw	zero,-16(fp)
     58c:	00001706 	br	5ec <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
     590:	00a00034 	movhi	r2,32768
     594:	10bfffc4 	addi	r2,r2,-1
     598:	10bfffc4 	addi	r2,r2,-1
     59c:	103ffe1e 	bne	r2,zero,598 <_gp+0xffff0b7c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
     5a0:	014003f4 	movhi	r5,15
     5a4:	29509004 	addi	r5,r5,16960
     5a8:	e13ffd17 	ldw	r4,-12(fp)
     5ac:	00057d40 	call	57d4 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
     5b0:	100b883a 	mov	r5,r2
     5b4:	0100bef4 	movhi	r4,763
     5b8:	213c2004 	addi	r4,r4,-3968
     5bc:	00057180 	call	5718 <__udivsi3>
     5c0:	100b883a 	mov	r5,r2
     5c4:	01200034 	movhi	r4,32768
     5c8:	213fffc4 	addi	r4,r4,-1
     5cc:	00057180 	call	5718 <__udivsi3>
     5d0:	1007883a 	mov	r3,r2
     5d4:	e0bfff17 	ldw	r2,-4(fp)
     5d8:	10c5c83a 	sub	r2,r2,r3
     5dc:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
     5e0:	e0bffc17 	ldw	r2,-16(fp)
     5e4:	10800044 	addi	r2,r2,1
     5e8:	e0bffc15 	stw	r2,-16(fp)
     5ec:	e0fffc17 	ldw	r3,-16(fp)
     5f0:	e0bffe17 	ldw	r2,-8(fp)
     5f4:	18bfe616 	blt	r3,r2,590 <_gp+0xffff0b74>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
     5f8:	014003f4 	movhi	r5,15
     5fc:	29509004 	addi	r5,r5,16960
     600:	e13ffd17 	ldw	r4,-12(fp)
     604:	00057d40 	call	57d4 <__mulsi3>
     608:	100b883a 	mov	r5,r2
     60c:	0100bef4 	movhi	r4,763
     610:	213c2004 	addi	r4,r4,-3968
     614:	00057180 	call	5718 <__udivsi3>
     618:	e17fff17 	ldw	r5,-4(fp)
     61c:	1009883a 	mov	r4,r2
     620:	00057d40 	call	57d4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
     624:	10bfffc4 	addi	r2,r2,-1
     628:	103ffe1e 	bne	r2,zero,624 <_gp+0xffff0c08>
     62c:	00000d06 	br	664 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
     630:	014003f4 	movhi	r5,15
     634:	29509004 	addi	r5,r5,16960
     638:	e13ffd17 	ldw	r4,-12(fp)
     63c:	00057d40 	call	57d4 <__mulsi3>
     640:	100b883a 	mov	r5,r2
     644:	0100bef4 	movhi	r4,763
     648:	213c2004 	addi	r4,r4,-3968
     64c:	00057180 	call	5718 <__udivsi3>
     650:	e17fff17 	ldw	r5,-4(fp)
     654:	1009883a 	mov	r4,r2
     658:	00057d40 	call	57d4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
     65c:	10bfffc4 	addi	r2,r2,-1
     660:	00bffe16 	blt	zero,r2,65c <_gp+0xffff0c40>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
     664:	0005883a 	mov	r2,zero
}
     668:	e037883a 	mov	sp,fp
     66c:	dfc00117 	ldw	ra,4(sp)
     670:	df000017 	ldw	fp,0(sp)
     674:	dec00204 	addi	sp,sp,8
     678:	f800283a 	ret

0000067c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
     67c:	defffc04 	addi	sp,sp,-16
     680:	df000315 	stw	fp,12(sp)
     684:	df000304 	addi	fp,sp,12
     688:	e13ffd15 	stw	r4,-12(fp)
     68c:	e17ffe15 	stw	r5,-8(fp)
     690:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
     694:	e0fffe17 	ldw	r3,-8(fp)
     698:	e0bffd17 	ldw	r2,-12(fp)
     69c:	18800c26 	beq	r3,r2,6d0 <alt_load_section+0x54>
  {
    while( to != end )
     6a0:	00000806 	br	6c4 <alt_load_section+0x48>
    {
      *to++ = *from++;
     6a4:	e0bffe17 	ldw	r2,-8(fp)
     6a8:	10c00104 	addi	r3,r2,4
     6ac:	e0fffe15 	stw	r3,-8(fp)
     6b0:	e0fffd17 	ldw	r3,-12(fp)
     6b4:	19000104 	addi	r4,r3,4
     6b8:	e13ffd15 	stw	r4,-12(fp)
     6bc:	18c00017 	ldw	r3,0(r3)
     6c0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     6c4:	e0fffe17 	ldw	r3,-8(fp)
     6c8:	e0bfff17 	ldw	r2,-4(fp)
     6cc:	18bff51e 	bne	r3,r2,6a4 <_gp+0xffff0c88>
    {
      *to++ = *from++;
    }
  }
}
     6d0:	0001883a 	nop
     6d4:	e037883a 	mov	sp,fp
     6d8:	df000017 	ldw	fp,0(sp)
     6dc:	dec00104 	addi	sp,sp,4
     6e0:	f800283a 	ret

000006e4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     6e4:	defffe04 	addi	sp,sp,-8
     6e8:	dfc00115 	stw	ra,4(sp)
     6ec:	df000015 	stw	fp,0(sp)
     6f0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     6f4:	01800034 	movhi	r6,0
     6f8:	319e9504 	addi	r6,r6,31316
     6fc:	01400034 	movhi	r5,0
     700:	2957fa04 	addi	r5,r5,24552
     704:	01000034 	movhi	r4,0
     708:	211e9504 	addi	r4,r4,31316
     70c:	000067c0 	call	67c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     710:	01800034 	movhi	r6,0
     714:	31807004 	addi	r6,r6,448
     718:	01400034 	movhi	r5,0
     71c:	29400804 	addi	r5,r5,32
     720:	01000034 	movhi	r4,0
     724:	21000804 	addi	r4,r4,32
     728:	000067c0 	call	67c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     72c:	01800034 	movhi	r6,0
     730:	3197fa04 	addi	r6,r6,24552
     734:	01400034 	movhi	r5,0
     738:	2957bf04 	addi	r5,r5,24316
     73c:	01000034 	movhi	r4,0
     740:	2117bf04 	addi	r4,r4,24316
     744:	000067c0 	call	67c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     748:	00018240 	call	1824 <alt_dcache_flush_all>
  alt_icache_flush_all();
     74c:	00019640 	call	1964 <alt_icache_flush_all>
}
     750:	0001883a 	nop
     754:	e037883a 	mov	sp,fp
     758:	dfc00117 	ldw	ra,4(sp)
     75c:	df000017 	ldw	fp,0(sp)
     760:	dec00204 	addi	sp,sp,8
     764:	f800283a 	ret

00000768 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     768:	defffd04 	addi	sp,sp,-12
     76c:	dfc00215 	stw	ra,8(sp)
     770:	df000115 	stw	fp,4(sp)
     774:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     778:	0009883a 	mov	r4,zero
     77c:	0000ac00 	call	ac0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
     780:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     784:	0000af80 	call	af8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     788:	01800034 	movhi	r6,0
     78c:	3197ee04 	addi	r6,r6,24504
     790:	01400034 	movhi	r5,0
     794:	2957ee04 	addi	r5,r5,24504
     798:	01000034 	movhi	r4,0
     79c:	2117ee04 	addi	r4,r4,24504
     7a0:	0001d380 	call	1d38 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     7a4:	d0a6a917 	ldw	r2,-25948(gp)
     7a8:	d0e6aa17 	ldw	r3,-25944(gp)
     7ac:	d126ab17 	ldw	r4,-25940(gp)
     7b0:	200d883a 	mov	r6,r4
     7b4:	180b883a 	mov	r5,r3
     7b8:	1009883a 	mov	r4,r2
     7bc:	00001fc0 	call	1fc <main>
     7c0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
     7c4:	01000044 	movi	r4,1
     7c8:	000174c0 	call	174c <close>
  exit (result);
     7cc:	e13fff17 	ldw	r4,-4(fp)
     7d0:	000251c0 	call	251c <exit>

000007d4 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
     7d4:	defff204 	addi	sp,sp,-56
     7d8:	dfc00a15 	stw	ra,40(sp)
     7dc:	df000915 	stw	fp,36(sp)
     7e0:	df000904 	addi	fp,sp,36
     7e4:	e13fff15 	stw	r4,-4(fp)
     7e8:	e1400215 	stw	r5,8(fp)
     7ec:	e1800315 	stw	r6,12(fp)
     7f0:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
     7f4:	e0800204 	addi	r2,fp,8
     7f8:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
     7fc:	e0bfff17 	ldw	r2,-4(fp)
     800:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
     804:	00006f06 	br	9c4 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
     808:	e0bff807 	ldb	r2,-32(fp)
     80c:	10800960 	cmpeqi	r2,r2,37
     810:	1000041e 	bne	r2,zero,824 <alt_printf+0x50>
        {
            alt_putchar(c);
     814:	e0bff807 	ldb	r2,-32(fp)
     818:	1009883a 	mov	r4,r2
     81c:	0000a000 	call	a00 <alt_putchar>
     820:	00006806 	br	9c4 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
     824:	e0bff717 	ldw	r2,-36(fp)
     828:	10c00044 	addi	r3,r2,1
     82c:	e0fff715 	stw	r3,-36(fp)
     830:	10800003 	ldbu	r2,0(r2)
     834:	e0bff805 	stb	r2,-32(fp)
     838:	e0bff807 	ldb	r2,-32(fp)
     83c:	10006926 	beq	r2,zero,9e4 <alt_printf+0x210>
            {
                if (c == '%')
     840:	e0bff807 	ldb	r2,-32(fp)
     844:	10800958 	cmpnei	r2,r2,37
     848:	1000041e 	bne	r2,zero,85c <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
     84c:	e0bff807 	ldb	r2,-32(fp)
     850:	1009883a 	mov	r4,r2
     854:	0000a000 	call	a00 <alt_putchar>
     858:	00005a06 	br	9c4 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
     85c:	e0bff807 	ldb	r2,-32(fp)
     860:	108018d8 	cmpnei	r2,r2,99
     864:	1000081e 	bne	r2,zero,888 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
     868:	e0bffe17 	ldw	r2,-8(fp)
     86c:	10c00104 	addi	r3,r2,4
     870:	e0fffe15 	stw	r3,-8(fp)
     874:	10800017 	ldw	r2,0(r2)
     878:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
     87c:	e13ffd17 	ldw	r4,-12(fp)
     880:	0000a000 	call	a00 <alt_putchar>
     884:	00004f06 	br	9c4 <alt_printf+0x1f0>
                }
                else if (c == 'x')
     888:	e0bff807 	ldb	r2,-32(fp)
     88c:	10801e18 	cmpnei	r2,r2,120
     890:	1000341e 	bne	r2,zero,964 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
     894:	e0bffe17 	ldw	r2,-8(fp)
     898:	10c00104 	addi	r3,r2,4
     89c:	e0fffe15 	stw	r3,-8(fp)
     8a0:	10800017 	ldw	r2,0(r2)
     8a4:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
     8a8:	e0bffb17 	ldw	r2,-20(fp)
     8ac:	1000031e 	bne	r2,zero,8bc <alt_printf+0xe8>
                    {
                        alt_putchar('0');
     8b0:	01000c04 	movi	r4,48
     8b4:	0000a000 	call	a00 <alt_putchar>
                        continue;
     8b8:	00004206 	br	9c4 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
     8bc:	00800704 	movi	r2,28
     8c0:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
     8c4:	00000306 	br	8d4 <alt_printf+0x100>
                        digit_shift -= 4;
     8c8:	e0bff917 	ldw	r2,-28(fp)
     8cc:	10bfff04 	addi	r2,r2,-4
     8d0:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
     8d4:	00c003c4 	movi	r3,15
     8d8:	e0bff917 	ldw	r2,-28(fp)
     8dc:	1884983a 	sll	r2,r3,r2
     8e0:	1007883a 	mov	r3,r2
     8e4:	e0bffb17 	ldw	r2,-20(fp)
     8e8:	1884703a 	and	r2,r3,r2
     8ec:	103ff626 	beq	r2,zero,8c8 <_gp+0xffff0eac>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
     8f0:	00001906 	br	958 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
     8f4:	00c003c4 	movi	r3,15
     8f8:	e0bff917 	ldw	r2,-28(fp)
     8fc:	1884983a 	sll	r2,r3,r2
     900:	1007883a 	mov	r3,r2
     904:	e0bffb17 	ldw	r2,-20(fp)
     908:	1886703a 	and	r3,r3,r2
     90c:	e0bff917 	ldw	r2,-28(fp)
     910:	1884d83a 	srl	r2,r3,r2
     914:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
     918:	e0bffc17 	ldw	r2,-16(fp)
     91c:	108002a8 	cmpgeui	r2,r2,10
     920:	1000041e 	bne	r2,zero,934 <alt_printf+0x160>
                            c = '0' + digit;
     924:	e0bffc17 	ldw	r2,-16(fp)
     928:	10800c04 	addi	r2,r2,48
     92c:	e0bff805 	stb	r2,-32(fp)
     930:	00000306 	br	940 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
     934:	e0bffc17 	ldw	r2,-16(fp)
     938:	108015c4 	addi	r2,r2,87
     93c:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
     940:	e0bff807 	ldb	r2,-32(fp)
     944:	1009883a 	mov	r4,r2
     948:	0000a000 	call	a00 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
     94c:	e0bff917 	ldw	r2,-28(fp)
     950:	10bfff04 	addi	r2,r2,-4
     954:	e0bff915 	stw	r2,-28(fp)
     958:	e0bff917 	ldw	r2,-28(fp)
     95c:	103fe50e 	bge	r2,zero,8f4 <_gp+0xffff0ed8>
     960:	00001806 	br	9c4 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
     964:	e0bff807 	ldb	r2,-32(fp)
     968:	10801cd8 	cmpnei	r2,r2,115
     96c:	1000151e 	bne	r2,zero,9c4 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
     970:	e0bffe17 	ldw	r2,-8(fp)
     974:	10c00104 	addi	r3,r2,4
     978:	e0fffe15 	stw	r3,-8(fp)
     97c:	10800017 	ldw	r2,0(r2)
     980:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
     984:	00000906 	br	9ac <alt_printf+0x1d8>
                      alt_putchar(*s++);
     988:	e0bffa17 	ldw	r2,-24(fp)
     98c:	10c00044 	addi	r3,r2,1
     990:	e0fffa15 	stw	r3,-24(fp)
     994:	10800003 	ldbu	r2,0(r2)
     998:	10803fcc 	andi	r2,r2,255
     99c:	1080201c 	xori	r2,r2,128
     9a0:	10bfe004 	addi	r2,r2,-128
     9a4:	1009883a 	mov	r4,r2
     9a8:	0000a000 	call	a00 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
     9ac:	e0bffa17 	ldw	r2,-24(fp)
     9b0:	10800003 	ldbu	r2,0(r2)
     9b4:	10803fcc 	andi	r2,r2,255
     9b8:	1080201c 	xori	r2,r2,128
     9bc:	10bfe004 	addi	r2,r2,-128
     9c0:	103ff11e 	bne	r2,zero,988 <_gp+0xffff0f6c>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
     9c4:	e0bff717 	ldw	r2,-36(fp)
     9c8:	10c00044 	addi	r3,r2,1
     9cc:	e0fff715 	stw	r3,-36(fp)
     9d0:	10800003 	ldbu	r2,0(r2)
     9d4:	e0bff805 	stb	r2,-32(fp)
     9d8:	e0bff807 	ldb	r2,-32(fp)
     9dc:	103f8a1e 	bne	r2,zero,808 <_gp+0xffff0dec>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
     9e0:	00000106 	br	9e8 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
     9e4:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
     9e8:	0001883a 	nop
     9ec:	e037883a 	mov	sp,fp
     9f0:	dfc00117 	ldw	ra,4(sp)
     9f4:	df000017 	ldw	fp,0(sp)
     9f8:	dec00504 	addi	sp,sp,20
     9fc:	f800283a 	ret

00000a00 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
     a00:	defffd04 	addi	sp,sp,-12
     a04:	dfc00215 	stw	ra,8(sp)
     a08:	df000115 	stw	fp,4(sp)
     a0c:	df000104 	addi	fp,sp,4
     a10:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
     a14:	00800034 	movhi	r2,0
     a18:	109e9104 	addi	r2,r2,31300
     a1c:	10800017 	ldw	r2,0(r2)
     a20:	10800217 	ldw	r2,8(r2)
     a24:	100b883a 	mov	r5,r2
     a28:	e13fff17 	ldw	r4,-4(fp)
     a2c:	00037800 	call	3780 <putc>
#endif
#endif
}
     a30:	e037883a 	mov	sp,fp
     a34:	dfc00117 	ldw	ra,4(sp)
     a38:	df000017 	ldw	fp,0(sp)
     a3c:	dec00204 	addi	sp,sp,8
     a40:	f800283a 	ret

00000a44 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
     a44:	defffd04 	addi	sp,sp,-12
     a48:	dfc00215 	stw	ra,8(sp)
     a4c:	df000115 	stw	fp,4(sp)
     a50:	df000104 	addi	fp,sp,4
     a54:	e13fff15 	stw	r4,-4(fp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
     a58:	00800034 	movhi	r2,0
     a5c:	109e9104 	addi	r2,r2,31300
     a60:	10800017 	ldw	r2,0(r2)
     a64:	10800217 	ldw	r2,8(r2)
     a68:	100b883a 	mov	r5,r2
     a6c:	e13fff17 	ldw	r4,-4(fp)
     a70:	00025f00 	call	25f0 <fputs>
#endif
#endif
}
     a74:	e037883a 	mov	sp,fp
     a78:	dfc00117 	ldw	ra,4(sp)
     a7c:	df000017 	ldw	fp,0(sp)
     a80:	dec00204 	addi	sp,sp,8
     a84:	f800283a 	ret

00000a88 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
     a88:	defffd04 	addi	sp,sp,-12
     a8c:	dfc00215 	stw	ra,8(sp)
     a90:	df000115 	stw	fp,4(sp)
     a94:	df000104 	addi	fp,sp,4
     a98:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
     a9c:	01400034 	movhi	r5,0
     aa0:	295e8904 	addi	r5,r5,31268
     aa4:	e13fff17 	ldw	r4,-4(fp)
     aa8:	00018c00 	call	18c0 <alt_dev_llist_insert>
}
     aac:	e037883a 	mov	sp,fp
     ab0:	dfc00117 	ldw	ra,4(sp)
     ab4:	df000017 	ldw	fp,0(sp)
     ab8:	dec00204 	addi	sp,sp,8
     abc:	f800283a 	ret

00000ac0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     ac0:	defffd04 	addi	sp,sp,-12
     ac4:	dfc00215 	stw	ra,8(sp)
     ac8:	df000115 	stw	fp,4(sp)
     acc:	df000104 	addi	fp,sp,4
     ad0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
     ad4:	00022800 	call	2280 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     ad8:	00800044 	movi	r2,1
     adc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
     ae0:	0001883a 	nop
     ae4:	e037883a 	mov	sp,fp
     ae8:	dfc00117 	ldw	ra,4(sp)
     aec:	df000017 	ldw	fp,0(sp)
     af0:	dec00204 	addi	sp,sp,8
     af4:	f800283a 	ret

00000af8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
     af8:	defffe04 	addi	sp,sp,-8
     afc:	dfc00115 	stw	ra,4(sp)
     b00:	df000015 	stw	fp,0(sp)
     b04:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAGUART_0, jtaguart_0);
     b08:	01800404 	movi	r6,16
     b0c:	000b883a 	mov	r5,zero
     b10:	01000034 	movhi	r4,0
     b14:	21180404 	addi	r4,r4,24592
     b18:	0000ca80 	call	ca8 <altera_avalon_jtag_uart_init>
     b1c:	01000034 	movhi	r4,0
     b20:	2117fa04 	addi	r4,r4,24552
     b24:	0000a880 	call	a88 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
     b28:	0001883a 	nop
}
     b2c:	0001883a 	nop
     b30:	e037883a 	mov	sp,fp
     b34:	dfc00117 	ldw	ra,4(sp)
     b38:	df000017 	ldw	fp,0(sp)
     b3c:	dec00204 	addi	sp,sp,8
     b40:	f800283a 	ret

00000b44 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
     b44:	defffa04 	addi	sp,sp,-24
     b48:	dfc00515 	stw	ra,20(sp)
     b4c:	df000415 	stw	fp,16(sp)
     b50:	df000404 	addi	fp,sp,16
     b54:	e13ffd15 	stw	r4,-12(fp)
     b58:	e17ffe15 	stw	r5,-8(fp)
     b5c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     b60:	e0bffd17 	ldw	r2,-12(fp)
     b64:	10800017 	ldw	r2,0(r2)
     b68:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
     b6c:	e0bffc17 	ldw	r2,-16(fp)
     b70:	10c00a04 	addi	r3,r2,40
     b74:	e0bffd17 	ldw	r2,-12(fp)
     b78:	10800217 	ldw	r2,8(r2)
     b7c:	100f883a 	mov	r7,r2
     b80:	e1bfff17 	ldw	r6,-4(fp)
     b84:	e17ffe17 	ldw	r5,-8(fp)
     b88:	1809883a 	mov	r4,r3
     b8c:	000117c0 	call	117c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
     b90:	e037883a 	mov	sp,fp
     b94:	dfc00117 	ldw	ra,4(sp)
     b98:	df000017 	ldw	fp,0(sp)
     b9c:	dec00204 	addi	sp,sp,8
     ba0:	f800283a 	ret

00000ba4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
     ba4:	defffa04 	addi	sp,sp,-24
     ba8:	dfc00515 	stw	ra,20(sp)
     bac:	df000415 	stw	fp,16(sp)
     bb0:	df000404 	addi	fp,sp,16
     bb4:	e13ffd15 	stw	r4,-12(fp)
     bb8:	e17ffe15 	stw	r5,-8(fp)
     bbc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     bc0:	e0bffd17 	ldw	r2,-12(fp)
     bc4:	10800017 	ldw	r2,0(r2)
     bc8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
     bcc:	e0bffc17 	ldw	r2,-16(fp)
     bd0:	10c00a04 	addi	r3,r2,40
     bd4:	e0bffd17 	ldw	r2,-12(fp)
     bd8:	10800217 	ldw	r2,8(r2)
     bdc:	100f883a 	mov	r7,r2
     be0:	e1bfff17 	ldw	r6,-4(fp)
     be4:	e17ffe17 	ldw	r5,-8(fp)
     be8:	1809883a 	mov	r4,r3
     bec:	00013980 	call	1398 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
     bf0:	e037883a 	mov	sp,fp
     bf4:	dfc00117 	ldw	ra,4(sp)
     bf8:	df000017 	ldw	fp,0(sp)
     bfc:	dec00204 	addi	sp,sp,8
     c00:	f800283a 	ret

00000c04 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
     c04:	defffc04 	addi	sp,sp,-16
     c08:	dfc00315 	stw	ra,12(sp)
     c0c:	df000215 	stw	fp,8(sp)
     c10:	df000204 	addi	fp,sp,8
     c14:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     c18:	e0bfff17 	ldw	r2,-4(fp)
     c1c:	10800017 	ldw	r2,0(r2)
     c20:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
     c24:	e0bffe17 	ldw	r2,-8(fp)
     c28:	10c00a04 	addi	r3,r2,40
     c2c:	e0bfff17 	ldw	r2,-4(fp)
     c30:	10800217 	ldw	r2,8(r2)
     c34:	100b883a 	mov	r5,r2
     c38:	1809883a 	mov	r4,r3
     c3c:	00010240 	call	1024 <altera_avalon_jtag_uart_close>
}
     c40:	e037883a 	mov	sp,fp
     c44:	dfc00117 	ldw	ra,4(sp)
     c48:	df000017 	ldw	fp,0(sp)
     c4c:	dec00204 	addi	sp,sp,8
     c50:	f800283a 	ret

00000c54 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
     c54:	defffa04 	addi	sp,sp,-24
     c58:	dfc00515 	stw	ra,20(sp)
     c5c:	df000415 	stw	fp,16(sp)
     c60:	df000404 	addi	fp,sp,16
     c64:	e13ffd15 	stw	r4,-12(fp)
     c68:	e17ffe15 	stw	r5,-8(fp)
     c6c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
     c70:	e0bffd17 	ldw	r2,-12(fp)
     c74:	10800017 	ldw	r2,0(r2)
     c78:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
     c7c:	e0bffc17 	ldw	r2,-16(fp)
     c80:	10800a04 	addi	r2,r2,40
     c84:	e1bfff17 	ldw	r6,-4(fp)
     c88:	e17ffe17 	ldw	r5,-8(fp)
     c8c:	1009883a 	mov	r4,r2
     c90:	000108c0 	call	108c <altera_avalon_jtag_uart_ioctl>
}
     c94:	e037883a 	mov	sp,fp
     c98:	dfc00117 	ldw	ra,4(sp)
     c9c:	df000017 	ldw	fp,0(sp)
     ca0:	dec00204 	addi	sp,sp,8
     ca4:	f800283a 	ret

00000ca8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
     ca8:	defffa04 	addi	sp,sp,-24
     cac:	dfc00515 	stw	ra,20(sp)
     cb0:	df000415 	stw	fp,16(sp)
     cb4:	df000404 	addi	fp,sp,16
     cb8:	e13ffd15 	stw	r4,-12(fp)
     cbc:	e17ffe15 	stw	r5,-8(fp)
     cc0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     cc4:	e0bffd17 	ldw	r2,-12(fp)
     cc8:	00c00044 	movi	r3,1
     ccc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
     cd0:	e0bffd17 	ldw	r2,-12(fp)
     cd4:	10800017 	ldw	r2,0(r2)
     cd8:	10800104 	addi	r2,r2,4
     cdc:	1007883a 	mov	r3,r2
     ce0:	e0bffd17 	ldw	r2,-12(fp)
     ce4:	10800817 	ldw	r2,32(r2)
     ce8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
     cec:	e0bffe17 	ldw	r2,-8(fp)
     cf0:	e0ffff17 	ldw	r3,-4(fp)
     cf4:	d8000015 	stw	zero,0(sp)
     cf8:	e1fffd17 	ldw	r7,-12(fp)
     cfc:	01800034 	movhi	r6,0
     d00:	31835c04 	addi	r6,r6,3440
     d04:	180b883a 	mov	r5,r3
     d08:	1009883a 	mov	r4,r2
     d0c:	00019840 	call	1984 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
     d10:	e0bffd17 	ldw	r2,-12(fp)
     d14:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
     d18:	e0bffd17 	ldw	r2,-12(fp)
     d1c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
     d20:	00800074 	movhi	r2,1
     d24:	10a53404 	addi	r2,r2,-27440
     d28:	10800017 	ldw	r2,0(r2)
     d2c:	e1fffd17 	ldw	r7,-12(fp)
     d30:	01800034 	movhi	r6,0
     d34:	3183df04 	addi	r6,r6,3964
     d38:	100b883a 	mov	r5,r2
     d3c:	1809883a 	mov	r4,r3
     d40:	00015bc0 	call	15bc <alt_alarm_start>
     d44:	1000040e 	bge	r2,zero,d58 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
     d48:	e0fffd17 	ldw	r3,-12(fp)
     d4c:	00a00034 	movhi	r2,32768
     d50:	10bfffc4 	addi	r2,r2,-1
     d54:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
     d58:	0001883a 	nop
     d5c:	e037883a 	mov	sp,fp
     d60:	dfc00117 	ldw	ra,4(sp)
     d64:	df000017 	ldw	fp,0(sp)
     d68:	dec00204 	addi	sp,sp,8
     d6c:	f800283a 	ret

00000d70 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
     d70:	defff804 	addi	sp,sp,-32
     d74:	df000715 	stw	fp,28(sp)
     d78:	df000704 	addi	fp,sp,28
     d7c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
     d80:	e0bfff17 	ldw	r2,-4(fp)
     d84:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
     d88:	e0bffb17 	ldw	r2,-20(fp)
     d8c:	10800017 	ldw	r2,0(r2)
     d90:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     d94:	e0bffc17 	ldw	r2,-16(fp)
     d98:	10800104 	addi	r2,r2,4
     d9c:	10800037 	ldwio	r2,0(r2)
     da0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
     da4:	e0bffd17 	ldw	r2,-12(fp)
     da8:	1080c00c 	andi	r2,r2,768
     dac:	10006d26 	beq	r2,zero,f64 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
     db0:	e0bffd17 	ldw	r2,-12(fp)
     db4:	1080400c 	andi	r2,r2,256
     db8:	10003526 	beq	r2,zero,e90 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
     dbc:	00800074 	movhi	r2,1
     dc0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     dc4:	e0bffb17 	ldw	r2,-20(fp)
     dc8:	10800a17 	ldw	r2,40(r2)
     dcc:	10800044 	addi	r2,r2,1
     dd0:	1081ffcc 	andi	r2,r2,2047
     dd4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
     dd8:	e0bffb17 	ldw	r2,-20(fp)
     ddc:	10c00b17 	ldw	r3,44(r2)
     de0:	e0bffe17 	ldw	r2,-8(fp)
     de4:	18801526 	beq	r3,r2,e3c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
     de8:	e0bffc17 	ldw	r2,-16(fp)
     dec:	10800037 	ldwio	r2,0(r2)
     df0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
     df4:	e0bff917 	ldw	r2,-28(fp)
     df8:	10a0000c 	andi	r2,r2,32768
     dfc:	10001126 	beq	r2,zero,e44 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
     e00:	e0bffb17 	ldw	r2,-20(fp)
     e04:	10800a17 	ldw	r2,40(r2)
     e08:	e0fff917 	ldw	r3,-28(fp)
     e0c:	1809883a 	mov	r4,r3
     e10:	e0fffb17 	ldw	r3,-20(fp)
     e14:	1885883a 	add	r2,r3,r2
     e18:	10800e04 	addi	r2,r2,56
     e1c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     e20:	e0bffb17 	ldw	r2,-20(fp)
     e24:	10800a17 	ldw	r2,40(r2)
     e28:	10800044 	addi	r2,r2,1
     e2c:	10c1ffcc 	andi	r3,r2,2047
     e30:	e0bffb17 	ldw	r2,-20(fp)
     e34:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
     e38:	003fe206 	br	dc4 <_gp+0xffff13a8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
     e3c:	0001883a 	nop
     e40:	00000106 	br	e48 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
     e44:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
     e48:	e0bff917 	ldw	r2,-28(fp)
     e4c:	10bfffec 	andhi	r2,r2,65535
     e50:	10000f26 	beq	r2,zero,e90 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     e54:	e0bffb17 	ldw	r2,-20(fp)
     e58:	10c00817 	ldw	r3,32(r2)
     e5c:	00bfff84 	movi	r2,-2
     e60:	1886703a 	and	r3,r3,r2
     e64:	e0bffb17 	ldw	r2,-20(fp)
     e68:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
     e6c:	e0bffc17 	ldw	r2,-16(fp)
     e70:	10800104 	addi	r2,r2,4
     e74:	1007883a 	mov	r3,r2
     e78:	e0bffb17 	ldw	r2,-20(fp)
     e7c:	10800817 	ldw	r2,32(r2)
     e80:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     e84:	e0bffc17 	ldw	r2,-16(fp)
     e88:	10800104 	addi	r2,r2,4
     e8c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
     e90:	e0bffd17 	ldw	r2,-12(fp)
     e94:	1080800c 	andi	r2,r2,512
     e98:	103fbe26 	beq	r2,zero,d94 <_gp+0xffff1378>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
     e9c:	e0bffd17 	ldw	r2,-12(fp)
     ea0:	1004d43a 	srli	r2,r2,16
     ea4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
     ea8:	00001406 	br	efc <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
     eac:	e0bffc17 	ldw	r2,-16(fp)
     eb0:	e0fffb17 	ldw	r3,-20(fp)
     eb4:	18c00d17 	ldw	r3,52(r3)
     eb8:	e13ffb17 	ldw	r4,-20(fp)
     ebc:	20c7883a 	add	r3,r4,r3
     ec0:	18c20e04 	addi	r3,r3,2104
     ec4:	18c00003 	ldbu	r3,0(r3)
     ec8:	18c03fcc 	andi	r3,r3,255
     ecc:	18c0201c 	xori	r3,r3,128
     ed0:	18ffe004 	addi	r3,r3,-128
     ed4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     ed8:	e0bffb17 	ldw	r2,-20(fp)
     edc:	10800d17 	ldw	r2,52(r2)
     ee0:	10800044 	addi	r2,r2,1
     ee4:	10c1ffcc 	andi	r3,r2,2047
     ee8:	e0bffb17 	ldw	r2,-20(fp)
     eec:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
     ef0:	e0bffa17 	ldw	r2,-24(fp)
     ef4:	10bfffc4 	addi	r2,r2,-1
     ef8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
     efc:	e0bffa17 	ldw	r2,-24(fp)
     f00:	10000526 	beq	r2,zero,f18 <altera_avalon_jtag_uart_irq+0x1a8>
     f04:	e0bffb17 	ldw	r2,-20(fp)
     f08:	10c00d17 	ldw	r3,52(r2)
     f0c:	e0bffb17 	ldw	r2,-20(fp)
     f10:	10800c17 	ldw	r2,48(r2)
     f14:	18bfe51e 	bne	r3,r2,eac <_gp+0xffff1490>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
     f18:	e0bffa17 	ldw	r2,-24(fp)
     f1c:	103f9d26 	beq	r2,zero,d94 <_gp+0xffff1378>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
     f20:	e0bffb17 	ldw	r2,-20(fp)
     f24:	10c00817 	ldw	r3,32(r2)
     f28:	00bfff44 	movi	r2,-3
     f2c:	1886703a 	and	r3,r3,r2
     f30:	e0bffb17 	ldw	r2,-20(fp)
     f34:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     f38:	e0bffb17 	ldw	r2,-20(fp)
     f3c:	10800017 	ldw	r2,0(r2)
     f40:	10800104 	addi	r2,r2,4
     f44:	1007883a 	mov	r3,r2
     f48:	e0bffb17 	ldw	r2,-20(fp)
     f4c:	10800817 	ldw	r2,32(r2)
     f50:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     f54:	e0bffc17 	ldw	r2,-16(fp)
     f58:	10800104 	addi	r2,r2,4
     f5c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
     f60:	003f8c06 	br	d94 <_gp+0xffff1378>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
     f64:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
     f68:	0001883a 	nop
     f6c:	e037883a 	mov	sp,fp
     f70:	df000017 	ldw	fp,0(sp)
     f74:	dec00104 	addi	sp,sp,4
     f78:	f800283a 	ret

00000f7c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
     f7c:	defff804 	addi	sp,sp,-32
     f80:	df000715 	stw	fp,28(sp)
     f84:	df000704 	addi	fp,sp,28
     f88:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
     f8c:	e0bffb17 	ldw	r2,-20(fp)
     f90:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
     f94:	e0bff917 	ldw	r2,-28(fp)
     f98:	10800017 	ldw	r2,0(r2)
     f9c:	10800104 	addi	r2,r2,4
     fa0:	10800037 	ldwio	r2,0(r2)
     fa4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
     fa8:	e0bffa17 	ldw	r2,-24(fp)
     fac:	1081000c 	andi	r2,r2,1024
     fb0:	10000b26 	beq	r2,zero,fe0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
     fb4:	e0bff917 	ldw	r2,-28(fp)
     fb8:	10800017 	ldw	r2,0(r2)
     fbc:	10800104 	addi	r2,r2,4
     fc0:	1007883a 	mov	r3,r2
     fc4:	e0bff917 	ldw	r2,-28(fp)
     fc8:	10800817 	ldw	r2,32(r2)
     fcc:	10810014 	ori	r2,r2,1024
     fd0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
     fd4:	e0bff917 	ldw	r2,-28(fp)
     fd8:	10000915 	stw	zero,36(r2)
     fdc:	00000a06 	br	1008 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
     fe0:	e0bff917 	ldw	r2,-28(fp)
     fe4:	10c00917 	ldw	r3,36(r2)
     fe8:	00a00034 	movhi	r2,32768
     fec:	10bfff04 	addi	r2,r2,-4
     ff0:	10c00536 	bltu	r2,r3,1008 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
     ff4:	e0bff917 	ldw	r2,-28(fp)
     ff8:	10800917 	ldw	r2,36(r2)
     ffc:	10c00044 	addi	r3,r2,1
    1000:	e0bff917 	ldw	r2,-28(fp)
    1004:	10c00915 	stw	r3,36(r2)
    1008:	00800074 	movhi	r2,1
    100c:	10a53404 	addi	r2,r2,-27440
    1010:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    1014:	e037883a 	mov	sp,fp
    1018:	df000017 	ldw	fp,0(sp)
    101c:	dec00104 	addi	sp,sp,4
    1020:	f800283a 	ret

00001024 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    1024:	defffd04 	addi	sp,sp,-12
    1028:	df000215 	stw	fp,8(sp)
    102c:	df000204 	addi	fp,sp,8
    1030:	e13ffe15 	stw	r4,-8(fp)
    1034:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    1038:	00000506 	br	1050 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    103c:	e0bfff17 	ldw	r2,-4(fp)
    1040:	1090000c 	andi	r2,r2,16384
    1044:	10000226 	beq	r2,zero,1050 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    1048:	00bffd44 	movi	r2,-11
    104c:	00000b06 	br	107c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    1050:	e0bffe17 	ldw	r2,-8(fp)
    1054:	10c00d17 	ldw	r3,52(r2)
    1058:	e0bffe17 	ldw	r2,-8(fp)
    105c:	10800c17 	ldw	r2,48(r2)
    1060:	18800526 	beq	r3,r2,1078 <altera_avalon_jtag_uart_close+0x54>
    1064:	e0bffe17 	ldw	r2,-8(fp)
    1068:	10c00917 	ldw	r3,36(r2)
    106c:	e0bffe17 	ldw	r2,-8(fp)
    1070:	10800117 	ldw	r2,4(r2)
    1074:	18bff136 	bltu	r3,r2,103c <_gp+0xffff1620>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    1078:	0005883a 	mov	r2,zero
}
    107c:	e037883a 	mov	sp,fp
    1080:	df000017 	ldw	fp,0(sp)
    1084:	dec00104 	addi	sp,sp,4
    1088:	f800283a 	ret

0000108c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    108c:	defffa04 	addi	sp,sp,-24
    1090:	df000515 	stw	fp,20(sp)
    1094:	df000504 	addi	fp,sp,20
    1098:	e13ffd15 	stw	r4,-12(fp)
    109c:	e17ffe15 	stw	r5,-8(fp)
    10a0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    10a4:	00bff9c4 	movi	r2,-25
    10a8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    10ac:	e0bffe17 	ldw	r2,-8(fp)
    10b0:	10da8060 	cmpeqi	r3,r2,27137
    10b4:	1800031e 	bne	r3,zero,10c4 <altera_avalon_jtag_uart_ioctl+0x38>
    10b8:	109a80a0 	cmpeqi	r2,r2,27138
    10bc:	1000181e 	bne	r2,zero,1120 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    10c0:	00002906 	br	1168 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    10c4:	e0bffd17 	ldw	r2,-12(fp)
    10c8:	10c00117 	ldw	r3,4(r2)
    10cc:	00a00034 	movhi	r2,32768
    10d0:	10bfffc4 	addi	r2,r2,-1
    10d4:	18802126 	beq	r3,r2,115c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    10d8:	e0bfff17 	ldw	r2,-4(fp)
    10dc:	10800017 	ldw	r2,0(r2)
    10e0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    10e4:	e0bffc17 	ldw	r2,-16(fp)
    10e8:	10800090 	cmplti	r2,r2,2
    10ec:	1000061e 	bne	r2,zero,1108 <altera_avalon_jtag_uart_ioctl+0x7c>
    10f0:	e0fffc17 	ldw	r3,-16(fp)
    10f4:	00a00034 	movhi	r2,32768
    10f8:	10bfffc4 	addi	r2,r2,-1
    10fc:	18800226 	beq	r3,r2,1108 <altera_avalon_jtag_uart_ioctl+0x7c>
    1100:	e0bffc17 	ldw	r2,-16(fp)
    1104:	00000206 	br	1110 <altera_avalon_jtag_uart_ioctl+0x84>
    1108:	00a00034 	movhi	r2,32768
    110c:	10bfff84 	addi	r2,r2,-2
    1110:	e0fffd17 	ldw	r3,-12(fp)
    1114:	18800115 	stw	r2,4(r3)
      rc = 0;
    1118:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    111c:	00000f06 	br	115c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    1120:	e0bffd17 	ldw	r2,-12(fp)
    1124:	10c00117 	ldw	r3,4(r2)
    1128:	00a00034 	movhi	r2,32768
    112c:	10bfffc4 	addi	r2,r2,-1
    1130:	18800c26 	beq	r3,r2,1164 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    1134:	e0bffd17 	ldw	r2,-12(fp)
    1138:	10c00917 	ldw	r3,36(r2)
    113c:	e0bffd17 	ldw	r2,-12(fp)
    1140:	10800117 	ldw	r2,4(r2)
    1144:	1885803a 	cmpltu	r2,r3,r2
    1148:	10c03fcc 	andi	r3,r2,255
    114c:	e0bfff17 	ldw	r2,-4(fp)
    1150:	10c00015 	stw	r3,0(r2)
      rc = 0;
    1154:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    1158:	00000206 	br	1164 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    115c:	0001883a 	nop
    1160:	00000106 	br	1168 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    1164:	0001883a 	nop

  default:
    break;
  }

  return rc;
    1168:	e0bffb17 	ldw	r2,-20(fp)
}
    116c:	e037883a 	mov	sp,fp
    1170:	df000017 	ldw	fp,0(sp)
    1174:	dec00104 	addi	sp,sp,4
    1178:	f800283a 	ret

0000117c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    117c:	defff304 	addi	sp,sp,-52
    1180:	dfc00c15 	stw	ra,48(sp)
    1184:	df000b15 	stw	fp,44(sp)
    1188:	df000b04 	addi	fp,sp,44
    118c:	e13ffc15 	stw	r4,-16(fp)
    1190:	e17ffd15 	stw	r5,-12(fp)
    1194:	e1bffe15 	stw	r6,-8(fp)
    1198:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    119c:	e0bffd17 	ldw	r2,-12(fp)
    11a0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    11a4:	00004706 	br	12c4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    11a8:	e0bffc17 	ldw	r2,-16(fp)
    11ac:	10800a17 	ldw	r2,40(r2)
    11b0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    11b4:	e0bffc17 	ldw	r2,-16(fp)
    11b8:	10800b17 	ldw	r2,44(r2)
    11bc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    11c0:	e0fff717 	ldw	r3,-36(fp)
    11c4:	e0bff817 	ldw	r2,-32(fp)
    11c8:	18800536 	bltu	r3,r2,11e0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    11cc:	e0fff717 	ldw	r3,-36(fp)
    11d0:	e0bff817 	ldw	r2,-32(fp)
    11d4:	1885c83a 	sub	r2,r3,r2
    11d8:	e0bff615 	stw	r2,-40(fp)
    11dc:	00000406 	br	11f0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    11e0:	00c20004 	movi	r3,2048
    11e4:	e0bff817 	ldw	r2,-32(fp)
    11e8:	1885c83a 	sub	r2,r3,r2
    11ec:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    11f0:	e0bff617 	ldw	r2,-40(fp)
    11f4:	10001e26 	beq	r2,zero,1270 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    11f8:	e0fffe17 	ldw	r3,-8(fp)
    11fc:	e0bff617 	ldw	r2,-40(fp)
    1200:	1880022e 	bgeu	r3,r2,120c <altera_avalon_jtag_uart_read+0x90>
        n = space;
    1204:	e0bffe17 	ldw	r2,-8(fp)
    1208:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    120c:	e0bffc17 	ldw	r2,-16(fp)
    1210:	10c00e04 	addi	r3,r2,56
    1214:	e0bff817 	ldw	r2,-32(fp)
    1218:	1885883a 	add	r2,r3,r2
    121c:	e1bff617 	ldw	r6,-40(fp)
    1220:	100b883a 	mov	r5,r2
    1224:	e13ff517 	ldw	r4,-44(fp)
    1228:	000343c0 	call	343c <memcpy>
      ptr   += n;
    122c:	e0fff517 	ldw	r3,-44(fp)
    1230:	e0bff617 	ldw	r2,-40(fp)
    1234:	1885883a 	add	r2,r3,r2
    1238:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    123c:	e0fffe17 	ldw	r3,-8(fp)
    1240:	e0bff617 	ldw	r2,-40(fp)
    1244:	1885c83a 	sub	r2,r3,r2
    1248:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    124c:	e0fff817 	ldw	r3,-32(fp)
    1250:	e0bff617 	ldw	r2,-40(fp)
    1254:	1885883a 	add	r2,r3,r2
    1258:	10c1ffcc 	andi	r3,r2,2047
    125c:	e0bffc17 	ldw	r2,-16(fp)
    1260:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    1264:	e0bffe17 	ldw	r2,-8(fp)
    1268:	00bfcf16 	blt	zero,r2,11a8 <_gp+0xffff178c>
    126c:	00000106 	br	1274 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    1270:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    1274:	e0fff517 	ldw	r3,-44(fp)
    1278:	e0bffd17 	ldw	r2,-12(fp)
    127c:	1880141e 	bne	r3,r2,12d0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    1280:	e0bfff17 	ldw	r2,-4(fp)
    1284:	1090000c 	andi	r2,r2,16384
    1288:	1000131e 	bne	r2,zero,12d8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    128c:	0001883a 	nop
    1290:	e0bffc17 	ldw	r2,-16(fp)
    1294:	10c00a17 	ldw	r3,40(r2)
    1298:	e0bff717 	ldw	r2,-36(fp)
    129c:	1880051e 	bne	r3,r2,12b4 <altera_avalon_jtag_uart_read+0x138>
    12a0:	e0bffc17 	ldw	r2,-16(fp)
    12a4:	10c00917 	ldw	r3,36(r2)
    12a8:	e0bffc17 	ldw	r2,-16(fp)
    12ac:	10800117 	ldw	r2,4(r2)
    12b0:	18bff736 	bltu	r3,r2,1290 <_gp+0xffff1874>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    12b4:	e0bffc17 	ldw	r2,-16(fp)
    12b8:	10c00a17 	ldw	r3,40(r2)
    12bc:	e0bff717 	ldw	r2,-36(fp)
    12c0:	18800726 	beq	r3,r2,12e0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    12c4:	e0bffe17 	ldw	r2,-8(fp)
    12c8:	00bfb716 	blt	zero,r2,11a8 <_gp+0xffff178c>
    12cc:	00000506 	br	12e4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    12d0:	0001883a 	nop
    12d4:	00000306 	br	12e4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    12d8:	0001883a 	nop
    12dc:	00000106 	br	12e4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    12e0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    12e4:	e0fff517 	ldw	r3,-44(fp)
    12e8:	e0bffd17 	ldw	r2,-12(fp)
    12ec:	18801826 	beq	r3,r2,1350 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    12f0:	0005303a 	rdctl	r2,status
    12f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    12f8:	e0fffb17 	ldw	r3,-20(fp)
    12fc:	00bfff84 	movi	r2,-2
    1300:	1884703a 	and	r2,r3,r2
    1304:	1001703a 	wrctl	status,r2
  
  return context;
    1308:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    130c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    1310:	e0bffc17 	ldw	r2,-16(fp)
    1314:	10800817 	ldw	r2,32(r2)
    1318:	10c00054 	ori	r3,r2,1
    131c:	e0bffc17 	ldw	r2,-16(fp)
    1320:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    1324:	e0bffc17 	ldw	r2,-16(fp)
    1328:	10800017 	ldw	r2,0(r2)
    132c:	10800104 	addi	r2,r2,4
    1330:	1007883a 	mov	r3,r2
    1334:	e0bffc17 	ldw	r2,-16(fp)
    1338:	10800817 	ldw	r2,32(r2)
    133c:	18800035 	stwio	r2,0(r3)
    1340:	e0bffa17 	ldw	r2,-24(fp)
    1344:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1348:	e0bff917 	ldw	r2,-28(fp)
    134c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    1350:	e0fff517 	ldw	r3,-44(fp)
    1354:	e0bffd17 	ldw	r2,-12(fp)
    1358:	18800426 	beq	r3,r2,136c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    135c:	e0fff517 	ldw	r3,-44(fp)
    1360:	e0bffd17 	ldw	r2,-12(fp)
    1364:	1885c83a 	sub	r2,r3,r2
    1368:	00000606 	br	1384 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    136c:	e0bfff17 	ldw	r2,-4(fp)
    1370:	1090000c 	andi	r2,r2,16384
    1374:	10000226 	beq	r2,zero,1380 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    1378:	00bffd44 	movi	r2,-11
    137c:	00000106 	br	1384 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    1380:	00bffec4 	movi	r2,-5
}
    1384:	e037883a 	mov	sp,fp
    1388:	dfc00117 	ldw	ra,4(sp)
    138c:	df000017 	ldw	fp,0(sp)
    1390:	dec00204 	addi	sp,sp,8
    1394:	f800283a 	ret

00001398 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    1398:	defff304 	addi	sp,sp,-52
    139c:	dfc00c15 	stw	ra,48(sp)
    13a0:	df000b15 	stw	fp,44(sp)
    13a4:	df000b04 	addi	fp,sp,44
    13a8:	e13ffc15 	stw	r4,-16(fp)
    13ac:	e17ffd15 	stw	r5,-12(fp)
    13b0:	e1bffe15 	stw	r6,-8(fp)
    13b4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    13b8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    13bc:	e0bffd17 	ldw	r2,-12(fp)
    13c0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    13c4:	00003706 	br	14a4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    13c8:	e0bffc17 	ldw	r2,-16(fp)
    13cc:	10800c17 	ldw	r2,48(r2)
    13d0:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    13d4:	e0bffc17 	ldw	r2,-16(fp)
    13d8:	10800d17 	ldw	r2,52(r2)
    13dc:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    13e0:	e0fff917 	ldw	r3,-28(fp)
    13e4:	e0bff517 	ldw	r2,-44(fp)
    13e8:	1880062e 	bgeu	r3,r2,1404 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    13ec:	e0fff517 	ldw	r3,-44(fp)
    13f0:	e0bff917 	ldw	r2,-28(fp)
    13f4:	1885c83a 	sub	r2,r3,r2
    13f8:	10bfffc4 	addi	r2,r2,-1
    13fc:	e0bff615 	stw	r2,-40(fp)
    1400:	00000b06 	br	1430 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    1404:	e0bff517 	ldw	r2,-44(fp)
    1408:	10000526 	beq	r2,zero,1420 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    140c:	00c20004 	movi	r3,2048
    1410:	e0bff917 	ldw	r2,-28(fp)
    1414:	1885c83a 	sub	r2,r3,r2
    1418:	e0bff615 	stw	r2,-40(fp)
    141c:	00000406 	br	1430 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    1420:	00c1ffc4 	movi	r3,2047
    1424:	e0bff917 	ldw	r2,-28(fp)
    1428:	1885c83a 	sub	r2,r3,r2
    142c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    1430:	e0bff617 	ldw	r2,-40(fp)
    1434:	10001e26 	beq	r2,zero,14b0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    1438:	e0fffe17 	ldw	r3,-8(fp)
    143c:	e0bff617 	ldw	r2,-40(fp)
    1440:	1880022e 	bgeu	r3,r2,144c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    1444:	e0bffe17 	ldw	r2,-8(fp)
    1448:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    144c:	e0bffc17 	ldw	r2,-16(fp)
    1450:	10c20e04 	addi	r3,r2,2104
    1454:	e0bff917 	ldw	r2,-28(fp)
    1458:	1885883a 	add	r2,r3,r2
    145c:	e1bff617 	ldw	r6,-40(fp)
    1460:	e17ffd17 	ldw	r5,-12(fp)
    1464:	1009883a 	mov	r4,r2
    1468:	000343c0 	call	343c <memcpy>
      ptr   += n;
    146c:	e0fffd17 	ldw	r3,-12(fp)
    1470:	e0bff617 	ldw	r2,-40(fp)
    1474:	1885883a 	add	r2,r3,r2
    1478:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    147c:	e0fffe17 	ldw	r3,-8(fp)
    1480:	e0bff617 	ldw	r2,-40(fp)
    1484:	1885c83a 	sub	r2,r3,r2
    1488:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    148c:	e0fff917 	ldw	r3,-28(fp)
    1490:	e0bff617 	ldw	r2,-40(fp)
    1494:	1885883a 	add	r2,r3,r2
    1498:	10c1ffcc 	andi	r3,r2,2047
    149c:	e0bffc17 	ldw	r2,-16(fp)
    14a0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    14a4:	e0bffe17 	ldw	r2,-8(fp)
    14a8:	00bfc716 	blt	zero,r2,13c8 <_gp+0xffff19ac>
    14ac:	00000106 	br	14b4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    14b0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    14b4:	0005303a 	rdctl	r2,status
    14b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    14bc:	e0fffb17 	ldw	r3,-20(fp)
    14c0:	00bfff84 	movi	r2,-2
    14c4:	1884703a 	and	r2,r3,r2
    14c8:	1001703a 	wrctl	status,r2
  
  return context;
    14cc:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    14d0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    14d4:	e0bffc17 	ldw	r2,-16(fp)
    14d8:	10800817 	ldw	r2,32(r2)
    14dc:	10c00094 	ori	r3,r2,2
    14e0:	e0bffc17 	ldw	r2,-16(fp)
    14e4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    14e8:	e0bffc17 	ldw	r2,-16(fp)
    14ec:	10800017 	ldw	r2,0(r2)
    14f0:	10800104 	addi	r2,r2,4
    14f4:	1007883a 	mov	r3,r2
    14f8:	e0bffc17 	ldw	r2,-16(fp)
    14fc:	10800817 	ldw	r2,32(r2)
    1500:	18800035 	stwio	r2,0(r3)
    1504:	e0bffa17 	ldw	r2,-24(fp)
    1508:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    150c:	e0bff817 	ldw	r2,-32(fp)
    1510:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    1514:	e0bffe17 	ldw	r2,-8(fp)
    1518:	0080100e 	bge	zero,r2,155c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    151c:	e0bfff17 	ldw	r2,-4(fp)
    1520:	1090000c 	andi	r2,r2,16384
    1524:	1000101e 	bne	r2,zero,1568 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    1528:	0001883a 	nop
    152c:	e0bffc17 	ldw	r2,-16(fp)
    1530:	10c00d17 	ldw	r3,52(r2)
    1534:	e0bff517 	ldw	r2,-44(fp)
    1538:	1880051e 	bne	r3,r2,1550 <altera_avalon_jtag_uart_write+0x1b8>
    153c:	e0bffc17 	ldw	r2,-16(fp)
    1540:	10c00917 	ldw	r3,36(r2)
    1544:	e0bffc17 	ldw	r2,-16(fp)
    1548:	10800117 	ldw	r2,4(r2)
    154c:	18bff736 	bltu	r3,r2,152c <_gp+0xffff1b10>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    1550:	e0bffc17 	ldw	r2,-16(fp)
    1554:	10800917 	ldw	r2,36(r2)
    1558:	1000051e 	bne	r2,zero,1570 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    155c:	e0bffe17 	ldw	r2,-8(fp)
    1560:	00bfd016 	blt	zero,r2,14a4 <_gp+0xffff1a88>
    1564:	00000306 	br	1574 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    1568:	0001883a 	nop
    156c:	00000106 	br	1574 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    1570:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    1574:	e0fffd17 	ldw	r3,-12(fp)
    1578:	e0bff717 	ldw	r2,-36(fp)
    157c:	18800426 	beq	r3,r2,1590 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    1580:	e0fffd17 	ldw	r3,-12(fp)
    1584:	e0bff717 	ldw	r2,-36(fp)
    1588:	1885c83a 	sub	r2,r3,r2
    158c:	00000606 	br	15a8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    1590:	e0bfff17 	ldw	r2,-4(fp)
    1594:	1090000c 	andi	r2,r2,16384
    1598:	10000226 	beq	r2,zero,15a4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    159c:	00bffd44 	movi	r2,-11
    15a0:	00000106 	br	15a8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    15a4:	00bffec4 	movi	r2,-5
}
    15a8:	e037883a 	mov	sp,fp
    15ac:	dfc00117 	ldw	ra,4(sp)
    15b0:	df000017 	ldw	fp,0(sp)
    15b4:	dec00204 	addi	sp,sp,8
    15b8:	f800283a 	ret

000015bc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    15bc:	defff504 	addi	sp,sp,-44
    15c0:	df000a15 	stw	fp,40(sp)
    15c4:	df000a04 	addi	fp,sp,40
    15c8:	e13ffc15 	stw	r4,-16(fp)
    15cc:	e17ffd15 	stw	r5,-12(fp)
    15d0:	e1bffe15 	stw	r6,-8(fp)
    15d4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    15d8:	e03ff615 	stw	zero,-40(fp)
    15dc:	00800074 	movhi	r2,1
    15e0:	10a53404 	addi	r2,r2,-27440
    15e4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    15e8:	10003f26 	beq	r2,zero,16e8 <alt_alarm_start+0x12c>
  {
    if (alarm)
    15ec:	e0bffc17 	ldw	r2,-16(fp)
    15f0:	10003b26 	beq	r2,zero,16e0 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
    15f4:	e0bffc17 	ldw	r2,-16(fp)
    15f8:	e0fffe17 	ldw	r3,-8(fp)
    15fc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    1600:	e0bffc17 	ldw	r2,-16(fp)
    1604:	e0ffff17 	ldw	r3,-4(fp)
    1608:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    160c:	0005303a 	rdctl	r2,status
    1610:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1614:	e0fff917 	ldw	r3,-28(fp)
    1618:	00bfff84 	movi	r2,-2
    161c:	1884703a 	and	r2,r3,r2
    1620:	1001703a 	wrctl	status,r2
  
  return context;
    1624:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    1628:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    162c:	00800074 	movhi	r2,1
    1630:	10a53504 	addi	r2,r2,-27436
    1634:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    1638:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    163c:	e0fffd17 	ldw	r3,-12(fp)
    1640:	e0bff617 	ldw	r2,-40(fp)
    1644:	1885883a 	add	r2,r3,r2
    1648:	10c00044 	addi	r3,r2,1
    164c:	e0bffc17 	ldw	r2,-16(fp)
    1650:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    1654:	e0bffc17 	ldw	r2,-16(fp)
    1658:	10c00217 	ldw	r3,8(r2)
    165c:	e0bff617 	ldw	r2,-40(fp)
    1660:	1880042e 	bgeu	r3,r2,1674 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
    1664:	e0bffc17 	ldw	r2,-16(fp)
    1668:	00c00044 	movi	r3,1
    166c:	10c00405 	stb	r3,16(r2)
    1670:	00000206 	br	167c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
    1674:	e0bffc17 	ldw	r2,-16(fp)
    1678:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    167c:	e0fffc17 	ldw	r3,-16(fp)
    1680:	00800034 	movhi	r2,0
    1684:	109e8e04 	addi	r2,r2,31288
    1688:	e0bffa15 	stw	r2,-24(fp)
    168c:	e0fffb15 	stw	r3,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    1690:	e0bffb17 	ldw	r2,-20(fp)
    1694:	e0fffa17 	ldw	r3,-24(fp)
    1698:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    169c:	e0bffa17 	ldw	r2,-24(fp)
    16a0:	10c00017 	ldw	r3,0(r2)
    16a4:	e0bffb17 	ldw	r2,-20(fp)
    16a8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    16ac:	e0bffa17 	ldw	r2,-24(fp)
    16b0:	10800017 	ldw	r2,0(r2)
    16b4:	e0fffb17 	ldw	r3,-20(fp)
    16b8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    16bc:	e0bffa17 	ldw	r2,-24(fp)
    16c0:	e0fffb17 	ldw	r3,-20(fp)
    16c4:	10c00015 	stw	r3,0(r2)
    16c8:	e0bff817 	ldw	r2,-32(fp)
    16cc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    16d0:	e0bff717 	ldw	r2,-36(fp)
    16d4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    16d8:	0005883a 	mov	r2,zero
    16dc:	00000306 	br	16ec <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
    16e0:	00bffa84 	movi	r2,-22
    16e4:	00000106 	br	16ec <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
    16e8:	00bfde84 	movi	r2,-134
  }
}
    16ec:	e037883a 	mov	sp,fp
    16f0:	df000017 	ldw	fp,0(sp)
    16f4:	dec00104 	addi	sp,sp,4
    16f8:	f800283a 	ret

000016fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    16fc:	defffe04 	addi	sp,sp,-8
    1700:	dfc00115 	stw	ra,4(sp)
    1704:	df000015 	stw	fp,0(sp)
    1708:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    170c:	00800034 	movhi	r2,0
    1710:	109e8c04 	addi	r2,r2,31280
    1714:	10800017 	ldw	r2,0(r2)
    1718:	10000526 	beq	r2,zero,1730 <alt_get_errno+0x34>
    171c:	00800034 	movhi	r2,0
    1720:	109e8c04 	addi	r2,r2,31280
    1724:	10800017 	ldw	r2,0(r2)
    1728:	103ee83a 	callr	r2
    172c:	00000206 	br	1738 <alt_get_errno+0x3c>
    1730:	00800074 	movhi	r2,1
    1734:	10a53604 	addi	r2,r2,-27432
}
    1738:	e037883a 	mov	sp,fp
    173c:	dfc00117 	ldw	ra,4(sp)
    1740:	df000017 	ldw	fp,0(sp)
    1744:	dec00204 	addi	sp,sp,8
    1748:	f800283a 	ret

0000174c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    174c:	defffb04 	addi	sp,sp,-20
    1750:	dfc00415 	stw	ra,16(sp)
    1754:	df000315 	stw	fp,12(sp)
    1758:	df000304 	addi	fp,sp,12
    175c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    1760:	e0bfff17 	ldw	r2,-4(fp)
    1764:	10000816 	blt	r2,zero,1788 <close+0x3c>
    1768:	01400304 	movi	r5,12
    176c:	e13fff17 	ldw	r4,-4(fp)
    1770:	00057d40 	call	57d4 <__mulsi3>
    1774:	1007883a 	mov	r3,r2
    1778:	00800034 	movhi	r2,0
    177c:	109c1c04 	addi	r2,r2,28784
    1780:	1885883a 	add	r2,r3,r2
    1784:	00000106 	br	178c <close+0x40>
    1788:	0005883a 	mov	r2,zero
    178c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    1790:	e0bffd17 	ldw	r2,-12(fp)
    1794:	10001926 	beq	r2,zero,17fc <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    1798:	e0bffd17 	ldw	r2,-12(fp)
    179c:	10800017 	ldw	r2,0(r2)
    17a0:	10800417 	ldw	r2,16(r2)
    17a4:	10000626 	beq	r2,zero,17c0 <close+0x74>
    17a8:	e0bffd17 	ldw	r2,-12(fp)
    17ac:	10800017 	ldw	r2,0(r2)
    17b0:	10800417 	ldw	r2,16(r2)
    17b4:	e13ffd17 	ldw	r4,-12(fp)
    17b8:	103ee83a 	callr	r2
    17bc:	00000106 	br	17c4 <close+0x78>
    17c0:	0005883a 	mov	r2,zero
    17c4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    17c8:	e13fff17 	ldw	r4,-4(fp)
    17cc:	00020580 	call	2058 <alt_release_fd>
    if (rval < 0)
    17d0:	e0bffe17 	ldw	r2,-8(fp)
    17d4:	1000070e 	bge	r2,zero,17f4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    17d8:	00016fc0 	call	16fc <alt_get_errno>
    17dc:	1007883a 	mov	r3,r2
    17e0:	e0bffe17 	ldw	r2,-8(fp)
    17e4:	0085c83a 	sub	r2,zero,r2
    17e8:	18800015 	stw	r2,0(r3)
      return -1;
    17ec:	00bfffc4 	movi	r2,-1
    17f0:	00000706 	br	1810 <close+0xc4>
    }
    return 0;
    17f4:	0005883a 	mov	r2,zero
    17f8:	00000506 	br	1810 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    17fc:	00016fc0 	call	16fc <alt_get_errno>
    1800:	1007883a 	mov	r3,r2
    1804:	00801444 	movi	r2,81
    1808:	18800015 	stw	r2,0(r3)
    return -1;
    180c:	00bfffc4 	movi	r2,-1
  }
}
    1810:	e037883a 	mov	sp,fp
    1814:	dfc00117 	ldw	ra,4(sp)
    1818:	df000017 	ldw	fp,0(sp)
    181c:	dec00204 	addi	sp,sp,8
    1820:	f800283a 	ret

00001824 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    1824:	deffff04 	addi	sp,sp,-4
    1828:	df000015 	stw	fp,0(sp)
    182c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    1830:	0001883a 	nop
    1834:	e037883a 	mov	sp,fp
    1838:	df000017 	ldw	fp,0(sp)
    183c:	dec00104 	addi	sp,sp,4
    1840:	f800283a 	ret

00001844 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    1844:	defffc04 	addi	sp,sp,-16
    1848:	df000315 	stw	fp,12(sp)
    184c:	df000304 	addi	fp,sp,12
    1850:	e13ffd15 	stw	r4,-12(fp)
    1854:	e17ffe15 	stw	r5,-8(fp)
    1858:	e1bfff15 	stw	r6,-4(fp)
  return len;
    185c:	e0bfff17 	ldw	r2,-4(fp)
}
    1860:	e037883a 	mov	sp,fp
    1864:	df000017 	ldw	fp,0(sp)
    1868:	dec00104 	addi	sp,sp,4
    186c:	f800283a 	ret

00001870 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    1870:	defffe04 	addi	sp,sp,-8
    1874:	dfc00115 	stw	ra,4(sp)
    1878:	df000015 	stw	fp,0(sp)
    187c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    1880:	00800034 	movhi	r2,0
    1884:	109e8c04 	addi	r2,r2,31280
    1888:	10800017 	ldw	r2,0(r2)
    188c:	10000526 	beq	r2,zero,18a4 <alt_get_errno+0x34>
    1890:	00800034 	movhi	r2,0
    1894:	109e8c04 	addi	r2,r2,31280
    1898:	10800017 	ldw	r2,0(r2)
    189c:	103ee83a 	callr	r2
    18a0:	00000206 	br	18ac <alt_get_errno+0x3c>
    18a4:	00800074 	movhi	r2,1
    18a8:	10a53604 	addi	r2,r2,-27432
}
    18ac:	e037883a 	mov	sp,fp
    18b0:	dfc00117 	ldw	ra,4(sp)
    18b4:	df000017 	ldw	fp,0(sp)
    18b8:	dec00204 	addi	sp,sp,8
    18bc:	f800283a 	ret

000018c0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    18c0:	defffa04 	addi	sp,sp,-24
    18c4:	dfc00515 	stw	ra,20(sp)
    18c8:	df000415 	stw	fp,16(sp)
    18cc:	df000404 	addi	fp,sp,16
    18d0:	e13ffe15 	stw	r4,-8(fp)
    18d4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    18d8:	e0bffe17 	ldw	r2,-8(fp)
    18dc:	10000326 	beq	r2,zero,18ec <alt_dev_llist_insert+0x2c>
    18e0:	e0bffe17 	ldw	r2,-8(fp)
    18e4:	10800217 	ldw	r2,8(r2)
    18e8:	1000061e 	bne	r2,zero,1904 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    18ec:	00018700 	call	1870 <alt_get_errno>
    18f0:	1007883a 	mov	r3,r2
    18f4:	00800584 	movi	r2,22
    18f8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    18fc:	00bffa84 	movi	r2,-22
    1900:	00001306 	br	1950 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    1904:	e0bffe17 	ldw	r2,-8(fp)
    1908:	e0ffff17 	ldw	r3,-4(fp)
    190c:	e0fffc15 	stw	r3,-16(fp)
    1910:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    1914:	e0bffd17 	ldw	r2,-12(fp)
    1918:	e0fffc17 	ldw	r3,-16(fp)
    191c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    1920:	e0bffc17 	ldw	r2,-16(fp)
    1924:	10c00017 	ldw	r3,0(r2)
    1928:	e0bffd17 	ldw	r2,-12(fp)
    192c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    1930:	e0bffc17 	ldw	r2,-16(fp)
    1934:	10800017 	ldw	r2,0(r2)
    1938:	e0fffd17 	ldw	r3,-12(fp)
    193c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    1940:	e0bffc17 	ldw	r2,-16(fp)
    1944:	e0fffd17 	ldw	r3,-12(fp)
    1948:	10c00015 	stw	r3,0(r2)

  return 0;  
    194c:	0005883a 	mov	r2,zero
}
    1950:	e037883a 	mov	sp,fp
    1954:	dfc00117 	ldw	ra,4(sp)
    1958:	df000017 	ldw	fp,0(sp)
    195c:	dec00204 	addi	sp,sp,8
    1960:	f800283a 	ret

00001964 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    1964:	deffff04 	addi	sp,sp,-4
    1968:	df000015 	stw	fp,0(sp)
    196c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    1970:	0001883a 	nop
    1974:	e037883a 	mov	sp,fp
    1978:	df000017 	ldw	fp,0(sp)
    197c:	dec00104 	addi	sp,sp,4
    1980:	f800283a 	ret

00001984 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    1984:	defff904 	addi	sp,sp,-28
    1988:	dfc00615 	stw	ra,24(sp)
    198c:	df000515 	stw	fp,20(sp)
    1990:	df000504 	addi	fp,sp,20
    1994:	e13ffc15 	stw	r4,-16(fp)
    1998:	e17ffd15 	stw	r5,-12(fp)
    199c:	e1bffe15 	stw	r6,-8(fp)
    19a0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    19a4:	e0800217 	ldw	r2,8(fp)
    19a8:	d8800015 	stw	r2,0(sp)
    19ac:	e1ffff17 	ldw	r7,-4(fp)
    19b0:	e1bffe17 	ldw	r6,-8(fp)
    19b4:	e17ffd17 	ldw	r5,-12(fp)
    19b8:	e13ffc17 	ldw	r4,-16(fp)
    19bc:	0001b640 	call	1b64 <alt_iic_isr_register>
}  
    19c0:	e037883a 	mov	sp,fp
    19c4:	dfc00117 	ldw	ra,4(sp)
    19c8:	df000017 	ldw	fp,0(sp)
    19cc:	dec00204 	addi	sp,sp,8
    19d0:	f800283a 	ret

000019d4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    19d4:	defff904 	addi	sp,sp,-28
    19d8:	df000615 	stw	fp,24(sp)
    19dc:	df000604 	addi	fp,sp,24
    19e0:	e13ffe15 	stw	r4,-8(fp)
    19e4:	e17fff15 	stw	r5,-4(fp)
    19e8:	e0bfff17 	ldw	r2,-4(fp)
    19ec:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    19f0:	0005303a 	rdctl	r2,status
    19f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    19f8:	e0fffb17 	ldw	r3,-20(fp)
    19fc:	00bfff84 	movi	r2,-2
    1a00:	1884703a 	and	r2,r3,r2
    1a04:	1001703a 	wrctl	status,r2
  
  return context;
    1a08:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    1a0c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    1a10:	00c00044 	movi	r3,1
    1a14:	e0bffa17 	ldw	r2,-24(fp)
    1a18:	1884983a 	sll	r2,r3,r2
    1a1c:	1007883a 	mov	r3,r2
    1a20:	00800074 	movhi	r2,1
    1a24:	10a53304 	addi	r2,r2,-27444
    1a28:	10800017 	ldw	r2,0(r2)
    1a2c:	1886b03a 	or	r3,r3,r2
    1a30:	00800074 	movhi	r2,1
    1a34:	10a53304 	addi	r2,r2,-27444
    1a38:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    1a3c:	00800074 	movhi	r2,1
    1a40:	10a53304 	addi	r2,r2,-27444
    1a44:	10800017 	ldw	r2,0(r2)
    1a48:	100170fa 	wrctl	ienable,r2
    1a4c:	e0bffc17 	ldw	r2,-16(fp)
    1a50:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1a54:	e0bffd17 	ldw	r2,-12(fp)
    1a58:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    1a5c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    1a60:	0001883a 	nop
}
    1a64:	e037883a 	mov	sp,fp
    1a68:	df000017 	ldw	fp,0(sp)
    1a6c:	dec00104 	addi	sp,sp,4
    1a70:	f800283a 	ret

00001a74 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    1a74:	defff904 	addi	sp,sp,-28
    1a78:	df000615 	stw	fp,24(sp)
    1a7c:	df000604 	addi	fp,sp,24
    1a80:	e13ffe15 	stw	r4,-8(fp)
    1a84:	e17fff15 	stw	r5,-4(fp)
    1a88:	e0bfff17 	ldw	r2,-4(fp)
    1a8c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1a90:	0005303a 	rdctl	r2,status
    1a94:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1a98:	e0fffb17 	ldw	r3,-20(fp)
    1a9c:	00bfff84 	movi	r2,-2
    1aa0:	1884703a 	and	r2,r3,r2
    1aa4:	1001703a 	wrctl	status,r2
  
  return context;
    1aa8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    1aac:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    1ab0:	00c00044 	movi	r3,1
    1ab4:	e0bffa17 	ldw	r2,-24(fp)
    1ab8:	1884983a 	sll	r2,r3,r2
    1abc:	0084303a 	nor	r2,zero,r2
    1ac0:	1007883a 	mov	r3,r2
    1ac4:	00800074 	movhi	r2,1
    1ac8:	10a53304 	addi	r2,r2,-27444
    1acc:	10800017 	ldw	r2,0(r2)
    1ad0:	1886703a 	and	r3,r3,r2
    1ad4:	00800074 	movhi	r2,1
    1ad8:	10a53304 	addi	r2,r2,-27444
    1adc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    1ae0:	00800074 	movhi	r2,1
    1ae4:	10a53304 	addi	r2,r2,-27444
    1ae8:	10800017 	ldw	r2,0(r2)
    1aec:	100170fa 	wrctl	ienable,r2
    1af0:	e0bffc17 	ldw	r2,-16(fp)
    1af4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1af8:	e0bffd17 	ldw	r2,-12(fp)
    1afc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    1b00:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    1b04:	0001883a 	nop
}
    1b08:	e037883a 	mov	sp,fp
    1b0c:	df000017 	ldw	fp,0(sp)
    1b10:	dec00104 	addi	sp,sp,4
    1b14:	f800283a 	ret

00001b18 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    1b18:	defffc04 	addi	sp,sp,-16
    1b1c:	df000315 	stw	fp,12(sp)
    1b20:	df000304 	addi	fp,sp,12
    1b24:	e13ffe15 	stw	r4,-8(fp)
    1b28:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    1b2c:	000530fa 	rdctl	r2,ienable
    1b30:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    1b34:	00c00044 	movi	r3,1
    1b38:	e0bfff17 	ldw	r2,-4(fp)
    1b3c:	1884983a 	sll	r2,r3,r2
    1b40:	1007883a 	mov	r3,r2
    1b44:	e0bffd17 	ldw	r2,-12(fp)
    1b48:	1884703a 	and	r2,r3,r2
    1b4c:	1004c03a 	cmpne	r2,r2,zero
    1b50:	10803fcc 	andi	r2,r2,255
}
    1b54:	e037883a 	mov	sp,fp
    1b58:	df000017 	ldw	fp,0(sp)
    1b5c:	dec00104 	addi	sp,sp,4
    1b60:	f800283a 	ret

00001b64 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    1b64:	defff504 	addi	sp,sp,-44
    1b68:	dfc00a15 	stw	ra,40(sp)
    1b6c:	df000915 	stw	fp,36(sp)
    1b70:	df000904 	addi	fp,sp,36
    1b74:	e13ffc15 	stw	r4,-16(fp)
    1b78:	e17ffd15 	stw	r5,-12(fp)
    1b7c:	e1bffe15 	stw	r6,-8(fp)
    1b80:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    1b84:	00bffa84 	movi	r2,-22
    1b88:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    1b8c:	e0bffd17 	ldw	r2,-12(fp)
    1b90:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    1b94:	e0bff817 	ldw	r2,-32(fp)
    1b98:	10800808 	cmpgei	r2,r2,32
    1b9c:	1000271e 	bne	r2,zero,1c3c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1ba0:	0005303a 	rdctl	r2,status
    1ba4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1ba8:	e0fffb17 	ldw	r3,-20(fp)
    1bac:	00bfff84 	movi	r2,-2
    1bb0:	1884703a 	and	r2,r3,r2
    1bb4:	1001703a 	wrctl	status,r2
  
  return context;
    1bb8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    1bbc:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    1bc0:	00800074 	movhi	r2,1
    1bc4:	10a54404 	addi	r2,r2,-27376
    1bc8:	e0fff817 	ldw	r3,-32(fp)
    1bcc:	180690fa 	slli	r3,r3,3
    1bd0:	10c5883a 	add	r2,r2,r3
    1bd4:	e0fffe17 	ldw	r3,-8(fp)
    1bd8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    1bdc:	00800074 	movhi	r2,1
    1be0:	10a54404 	addi	r2,r2,-27376
    1be4:	e0fff817 	ldw	r3,-32(fp)
    1be8:	180690fa 	slli	r3,r3,3
    1bec:	10c5883a 	add	r2,r2,r3
    1bf0:	10800104 	addi	r2,r2,4
    1bf4:	e0ffff17 	ldw	r3,-4(fp)
    1bf8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    1bfc:	e0bffe17 	ldw	r2,-8(fp)
    1c00:	10000526 	beq	r2,zero,1c18 <alt_iic_isr_register+0xb4>
    1c04:	e0bff817 	ldw	r2,-32(fp)
    1c08:	100b883a 	mov	r5,r2
    1c0c:	e13ffc17 	ldw	r4,-16(fp)
    1c10:	00019d40 	call	19d4 <alt_ic_irq_enable>
    1c14:	00000406 	br	1c28 <alt_iic_isr_register+0xc4>
    1c18:	e0bff817 	ldw	r2,-32(fp)
    1c1c:	100b883a 	mov	r5,r2
    1c20:	e13ffc17 	ldw	r4,-16(fp)
    1c24:	0001a740 	call	1a74 <alt_ic_irq_disable>
    1c28:	e0bff715 	stw	r2,-36(fp)
    1c2c:	e0bffa17 	ldw	r2,-24(fp)
    1c30:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1c34:	e0bff917 	ldw	r2,-28(fp)
    1c38:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    1c3c:	e0bff717 	ldw	r2,-36(fp)
}
    1c40:	e037883a 	mov	sp,fp
    1c44:	dfc00117 	ldw	ra,4(sp)
    1c48:	df000017 	ldw	fp,0(sp)
    1c4c:	dec00204 	addi	sp,sp,8
    1c50:	f800283a 	ret

00001c54 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    1c54:	defff804 	addi	sp,sp,-32
    1c58:	dfc00715 	stw	ra,28(sp)
    1c5c:	df000615 	stw	fp,24(sp)
    1c60:	dc000515 	stw	r16,20(sp)
    1c64:	df000604 	addi	fp,sp,24
    1c68:	e13ffb15 	stw	r4,-20(fp)
    1c6c:	e17ffc15 	stw	r5,-16(fp)
    1c70:	e1bffd15 	stw	r6,-12(fp)
    1c74:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    1c78:	e1bffe17 	ldw	r6,-8(fp)
    1c7c:	e17ffd17 	ldw	r5,-12(fp)
    1c80:	e13ffc17 	ldw	r4,-16(fp)
    1c84:	0001ef80 	call	1ef8 <open>
    1c88:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    1c8c:	e0bffa17 	ldw	r2,-24(fp)
    1c90:	10002216 	blt	r2,zero,1d1c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    1c94:	04000034 	movhi	r16,0
    1c98:	841c1c04 	addi	r16,r16,28784
    1c9c:	e0bffa17 	ldw	r2,-24(fp)
    1ca0:	01400304 	movi	r5,12
    1ca4:	1009883a 	mov	r4,r2
    1ca8:	00057d40 	call	57d4 <__mulsi3>
    1cac:	8085883a 	add	r2,r16,r2
    1cb0:	10c00017 	ldw	r3,0(r2)
    1cb4:	e0bffb17 	ldw	r2,-20(fp)
    1cb8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    1cbc:	04000034 	movhi	r16,0
    1cc0:	841c1c04 	addi	r16,r16,28784
    1cc4:	e0bffa17 	ldw	r2,-24(fp)
    1cc8:	01400304 	movi	r5,12
    1ccc:	1009883a 	mov	r4,r2
    1cd0:	00057d40 	call	57d4 <__mulsi3>
    1cd4:	8085883a 	add	r2,r16,r2
    1cd8:	10800104 	addi	r2,r2,4
    1cdc:	10c00017 	ldw	r3,0(r2)
    1ce0:	e0bffb17 	ldw	r2,-20(fp)
    1ce4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    1ce8:	04000034 	movhi	r16,0
    1cec:	841c1c04 	addi	r16,r16,28784
    1cf0:	e0bffa17 	ldw	r2,-24(fp)
    1cf4:	01400304 	movi	r5,12
    1cf8:	1009883a 	mov	r4,r2
    1cfc:	00057d40 	call	57d4 <__mulsi3>
    1d00:	8085883a 	add	r2,r16,r2
    1d04:	10800204 	addi	r2,r2,8
    1d08:	10c00017 	ldw	r3,0(r2)
    1d0c:	e0bffb17 	ldw	r2,-20(fp)
    1d10:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    1d14:	e13ffa17 	ldw	r4,-24(fp)
    1d18:	00020580 	call	2058 <alt_release_fd>
  }
} 
    1d1c:	0001883a 	nop
    1d20:	e6ffff04 	addi	sp,fp,-4
    1d24:	dfc00217 	ldw	ra,8(sp)
    1d28:	df000117 	ldw	fp,4(sp)
    1d2c:	dc000017 	ldw	r16,0(sp)
    1d30:	dec00304 	addi	sp,sp,12
    1d34:	f800283a 	ret

00001d38 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    1d38:	defffb04 	addi	sp,sp,-20
    1d3c:	dfc00415 	stw	ra,16(sp)
    1d40:	df000315 	stw	fp,12(sp)
    1d44:	df000304 	addi	fp,sp,12
    1d48:	e13ffd15 	stw	r4,-12(fp)
    1d4c:	e17ffe15 	stw	r5,-8(fp)
    1d50:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    1d54:	01c07fc4 	movi	r7,511
    1d58:	01800044 	movi	r6,1
    1d5c:	e17ffd17 	ldw	r5,-12(fp)
    1d60:	01000034 	movhi	r4,0
    1d64:	211c1f04 	addi	r4,r4,28796
    1d68:	0001c540 	call	1c54 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    1d6c:	01c07fc4 	movi	r7,511
    1d70:	000d883a 	mov	r6,zero
    1d74:	e17ffe17 	ldw	r5,-8(fp)
    1d78:	01000034 	movhi	r4,0
    1d7c:	211c1c04 	addi	r4,r4,28784
    1d80:	0001c540 	call	1c54 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    1d84:	01c07fc4 	movi	r7,511
    1d88:	01800044 	movi	r6,1
    1d8c:	e17fff17 	ldw	r5,-4(fp)
    1d90:	01000034 	movhi	r4,0
    1d94:	211c2204 	addi	r4,r4,28808
    1d98:	0001c540 	call	1c54 <alt_open_fd>
}  
    1d9c:	0001883a 	nop
    1da0:	e037883a 	mov	sp,fp
    1da4:	dfc00117 	ldw	ra,4(sp)
    1da8:	df000017 	ldw	fp,0(sp)
    1dac:	dec00204 	addi	sp,sp,8
    1db0:	f800283a 	ret

00001db4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    1db4:	defffe04 	addi	sp,sp,-8
    1db8:	dfc00115 	stw	ra,4(sp)
    1dbc:	df000015 	stw	fp,0(sp)
    1dc0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    1dc4:	00800034 	movhi	r2,0
    1dc8:	109e8c04 	addi	r2,r2,31280
    1dcc:	10800017 	ldw	r2,0(r2)
    1dd0:	10000526 	beq	r2,zero,1de8 <alt_get_errno+0x34>
    1dd4:	00800034 	movhi	r2,0
    1dd8:	109e8c04 	addi	r2,r2,31280
    1ddc:	10800017 	ldw	r2,0(r2)
    1de0:	103ee83a 	callr	r2
    1de4:	00000206 	br	1df0 <alt_get_errno+0x3c>
    1de8:	00800074 	movhi	r2,1
    1dec:	10a53604 	addi	r2,r2,-27432
}
    1df0:	e037883a 	mov	sp,fp
    1df4:	dfc00117 	ldw	ra,4(sp)
    1df8:	df000017 	ldw	fp,0(sp)
    1dfc:	dec00204 	addi	sp,sp,8
    1e00:	f800283a 	ret

00001e04 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    1e04:	defffb04 	addi	sp,sp,-20
    1e08:	dfc00415 	stw	ra,16(sp)
    1e0c:	df000315 	stw	fp,12(sp)
    1e10:	dc000215 	stw	r16,8(sp)
    1e14:	df000304 	addi	fp,sp,12
    1e18:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    1e1c:	e0bffe17 	ldw	r2,-8(fp)
    1e20:	10800217 	ldw	r2,8(r2)
    1e24:	10d00034 	orhi	r3,r2,16384
    1e28:	e0bffe17 	ldw	r2,-8(fp)
    1e2c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    1e30:	e03ffd15 	stw	zero,-12(fp)
    1e34:	00002306 	br	1ec4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    1e38:	04000034 	movhi	r16,0
    1e3c:	841c1c04 	addi	r16,r16,28784
    1e40:	e0bffd17 	ldw	r2,-12(fp)
    1e44:	01400304 	movi	r5,12
    1e48:	1009883a 	mov	r4,r2
    1e4c:	00057d40 	call	57d4 <__mulsi3>
    1e50:	8085883a 	add	r2,r16,r2
    1e54:	10c00017 	ldw	r3,0(r2)
    1e58:	e0bffe17 	ldw	r2,-8(fp)
    1e5c:	10800017 	ldw	r2,0(r2)
    1e60:	1880151e 	bne	r3,r2,1eb8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    1e64:	04000034 	movhi	r16,0
    1e68:	841c1c04 	addi	r16,r16,28784
    1e6c:	e0bffd17 	ldw	r2,-12(fp)
    1e70:	01400304 	movi	r5,12
    1e74:	1009883a 	mov	r4,r2
    1e78:	00057d40 	call	57d4 <__mulsi3>
    1e7c:	8085883a 	add	r2,r16,r2
    1e80:	10800204 	addi	r2,r2,8
    1e84:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    1e88:	10000b0e 	bge	r2,zero,1eb8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    1e8c:	01400304 	movi	r5,12
    1e90:	e13ffd17 	ldw	r4,-12(fp)
    1e94:	00057d40 	call	57d4 <__mulsi3>
    1e98:	1007883a 	mov	r3,r2
    1e9c:	00800034 	movhi	r2,0
    1ea0:	109c1c04 	addi	r2,r2,28784
    1ea4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    1ea8:	e0bffe17 	ldw	r2,-8(fp)
    1eac:	18800226 	beq	r3,r2,1eb8 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    1eb0:	00bffcc4 	movi	r2,-13
    1eb4:	00000a06 	br	1ee0 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    1eb8:	e0bffd17 	ldw	r2,-12(fp)
    1ebc:	10800044 	addi	r2,r2,1
    1ec0:	e0bffd15 	stw	r2,-12(fp)
    1ec4:	00800034 	movhi	r2,0
    1ec8:	109e8b04 	addi	r2,r2,31276
    1ecc:	10800017 	ldw	r2,0(r2)
    1ed0:	1007883a 	mov	r3,r2
    1ed4:	e0bffd17 	ldw	r2,-12(fp)
    1ed8:	18bfd72e 	bgeu	r3,r2,1e38 <_gp+0xffff241c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    1edc:	0005883a 	mov	r2,zero
}
    1ee0:	e6ffff04 	addi	sp,fp,-4
    1ee4:	dfc00217 	ldw	ra,8(sp)
    1ee8:	df000117 	ldw	fp,4(sp)
    1eec:	dc000017 	ldw	r16,0(sp)
    1ef0:	dec00304 	addi	sp,sp,12
    1ef4:	f800283a 	ret

00001ef8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    1ef8:	defff604 	addi	sp,sp,-40
    1efc:	dfc00915 	stw	ra,36(sp)
    1f00:	df000815 	stw	fp,32(sp)
    1f04:	df000804 	addi	fp,sp,32
    1f08:	e13ffd15 	stw	r4,-12(fp)
    1f0c:	e17ffe15 	stw	r5,-8(fp)
    1f10:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    1f14:	00bfffc4 	movi	r2,-1
    1f18:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    1f1c:	00bffb44 	movi	r2,-19
    1f20:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    1f24:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    1f28:	01400034 	movhi	r5,0
    1f2c:	295e8904 	addi	r5,r5,31268
    1f30:	e13ffd17 	ldw	r4,-12(fp)
    1f34:	00022a40 	call	22a4 <alt_find_dev>
    1f38:	e0bff815 	stw	r2,-32(fp)
    1f3c:	e0bff817 	ldw	r2,-32(fp)
    1f40:	1000051e 	bne	r2,zero,1f58 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    1f44:	e13ffd17 	ldw	r4,-12(fp)
    1f48:	00023340 	call	2334 <alt_find_file>
    1f4c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    1f50:	00800044 	movi	r2,1
    1f54:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    1f58:	e0bff817 	ldw	r2,-32(fp)
    1f5c:	10002b26 	beq	r2,zero,200c <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
    1f60:	e13ff817 	ldw	r4,-32(fp)
    1f64:	00024480 	call	2448 <alt_get_fd>
    1f68:	e0bff915 	stw	r2,-28(fp)
    1f6c:	e0bff917 	ldw	r2,-28(fp)
    1f70:	1000030e 	bge	r2,zero,1f80 <open+0x88>
    {
      status = index;
    1f74:	e0bff917 	ldw	r2,-28(fp)
    1f78:	e0bffa15 	stw	r2,-24(fp)
    1f7c:	00002506 	br	2014 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
    1f80:	01400304 	movi	r5,12
    1f84:	e13ff917 	ldw	r4,-28(fp)
    1f88:	00057d40 	call	57d4 <__mulsi3>
    1f8c:	1007883a 	mov	r3,r2
    1f90:	00800034 	movhi	r2,0
    1f94:	109c1c04 	addi	r2,r2,28784
    1f98:	1885883a 	add	r2,r3,r2
    1f9c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    1fa0:	e0fffe17 	ldw	r3,-8(fp)
    1fa4:	00900034 	movhi	r2,16384
    1fa8:	10bfffc4 	addi	r2,r2,-1
    1fac:	1886703a 	and	r3,r3,r2
    1fb0:	e0bffc17 	ldw	r2,-16(fp)
    1fb4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    1fb8:	e0bffb17 	ldw	r2,-20(fp)
    1fbc:	1000051e 	bne	r2,zero,1fd4 <open+0xdc>
    1fc0:	e13ffc17 	ldw	r4,-16(fp)
    1fc4:	0001e040 	call	1e04 <alt_file_locked>
    1fc8:	e0bffa15 	stw	r2,-24(fp)
    1fcc:	e0bffa17 	ldw	r2,-24(fp)
    1fd0:	10001016 	blt	r2,zero,2014 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    1fd4:	e0bff817 	ldw	r2,-32(fp)
    1fd8:	10800317 	ldw	r2,12(r2)
    1fdc:	10000826 	beq	r2,zero,2000 <open+0x108>
    1fe0:	e0bff817 	ldw	r2,-32(fp)
    1fe4:	10800317 	ldw	r2,12(r2)
    1fe8:	e1ffff17 	ldw	r7,-4(fp)
    1fec:	e1bffe17 	ldw	r6,-8(fp)
    1ff0:	e17ffd17 	ldw	r5,-12(fp)
    1ff4:	e13ffc17 	ldw	r4,-16(fp)
    1ff8:	103ee83a 	callr	r2
    1ffc:	00000106 	br	2004 <open+0x10c>
    2000:	0005883a 	mov	r2,zero
    2004:	e0bffa15 	stw	r2,-24(fp)
    2008:	00000206 	br	2014 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    200c:	00bffb44 	movi	r2,-19
    2010:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    2014:	e0bffa17 	ldw	r2,-24(fp)
    2018:	1000090e 	bge	r2,zero,2040 <open+0x148>
  {
    alt_release_fd (index);  
    201c:	e13ff917 	ldw	r4,-28(fp)
    2020:	00020580 	call	2058 <alt_release_fd>
    ALT_ERRNO = -status;
    2024:	0001db40 	call	1db4 <alt_get_errno>
    2028:	1007883a 	mov	r3,r2
    202c:	e0bffa17 	ldw	r2,-24(fp)
    2030:	0085c83a 	sub	r2,zero,r2
    2034:	18800015 	stw	r2,0(r3)
    return -1;
    2038:	00bfffc4 	movi	r2,-1
    203c:	00000106 	br	2044 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
    2040:	e0bff917 	ldw	r2,-28(fp)
}
    2044:	e037883a 	mov	sp,fp
    2048:	dfc00117 	ldw	ra,4(sp)
    204c:	df000017 	ldw	fp,0(sp)
    2050:	dec00204 	addi	sp,sp,8
    2054:	f800283a 	ret

00002058 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    2058:	defffc04 	addi	sp,sp,-16
    205c:	dfc00315 	stw	ra,12(sp)
    2060:	df000215 	stw	fp,8(sp)
    2064:	dc000115 	stw	r16,4(sp)
    2068:	df000204 	addi	fp,sp,8
    206c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    2070:	e0bffe17 	ldw	r2,-8(fp)
    2074:	108000d0 	cmplti	r2,r2,3
    2078:	1000111e 	bne	r2,zero,20c0 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    207c:	04000034 	movhi	r16,0
    2080:	841c1c04 	addi	r16,r16,28784
    2084:	e0bffe17 	ldw	r2,-8(fp)
    2088:	01400304 	movi	r5,12
    208c:	1009883a 	mov	r4,r2
    2090:	00057d40 	call	57d4 <__mulsi3>
    2094:	8085883a 	add	r2,r16,r2
    2098:	10800204 	addi	r2,r2,8
    209c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    20a0:	04000034 	movhi	r16,0
    20a4:	841c1c04 	addi	r16,r16,28784
    20a8:	e0bffe17 	ldw	r2,-8(fp)
    20ac:	01400304 	movi	r5,12
    20b0:	1009883a 	mov	r4,r2
    20b4:	00057d40 	call	57d4 <__mulsi3>
    20b8:	8085883a 	add	r2,r16,r2
    20bc:	10000015 	stw	zero,0(r2)
  }
}
    20c0:	0001883a 	nop
    20c4:	e6ffff04 	addi	sp,fp,-4
    20c8:	dfc00217 	ldw	ra,8(sp)
    20cc:	df000117 	ldw	fp,4(sp)
    20d0:	dc000017 	ldw	r16,0(sp)
    20d4:	dec00304 	addi	sp,sp,12
    20d8:	f800283a 	ret

000020dc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    20dc:	defffa04 	addi	sp,sp,-24
    20e0:	df000515 	stw	fp,20(sp)
    20e4:	df000504 	addi	fp,sp,20
    20e8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    20ec:	0005303a 	rdctl	r2,status
    20f0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    20f4:	e0fffc17 	ldw	r3,-16(fp)
    20f8:	00bfff84 	movi	r2,-2
    20fc:	1884703a 	and	r2,r3,r2
    2100:	1001703a 	wrctl	status,r2
  
  return context;
    2104:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    2108:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    210c:	e0bfff17 	ldw	r2,-4(fp)
    2110:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    2114:	e0bffd17 	ldw	r2,-12(fp)
    2118:	10800017 	ldw	r2,0(r2)
    211c:	e0fffd17 	ldw	r3,-12(fp)
    2120:	18c00117 	ldw	r3,4(r3)
    2124:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    2128:	e0bffd17 	ldw	r2,-12(fp)
    212c:	10800117 	ldw	r2,4(r2)
    2130:	e0fffd17 	ldw	r3,-12(fp)
    2134:	18c00017 	ldw	r3,0(r3)
    2138:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    213c:	e0bffd17 	ldw	r2,-12(fp)
    2140:	e0fffd17 	ldw	r3,-12(fp)
    2144:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    2148:	e0bffd17 	ldw	r2,-12(fp)
    214c:	e0fffd17 	ldw	r3,-12(fp)
    2150:	10c00015 	stw	r3,0(r2)
    2154:	e0bffb17 	ldw	r2,-20(fp)
    2158:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    215c:	e0bffe17 	ldw	r2,-8(fp)
    2160:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    2164:	0001883a 	nop
    2168:	e037883a 	mov	sp,fp
    216c:	df000017 	ldw	fp,0(sp)
    2170:	dec00104 	addi	sp,sp,4
    2174:	f800283a 	ret

00002178 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    2178:	defffb04 	addi	sp,sp,-20
    217c:	dfc00415 	stw	ra,16(sp)
    2180:	df000315 	stw	fp,12(sp)
    2184:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    2188:	d0a00717 	ldw	r2,-32740(gp)
    218c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    2190:	d0a6ae17 	ldw	r2,-25928(gp)
    2194:	10800044 	addi	r2,r2,1
    2198:	d0a6ae15 	stw	r2,-25928(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    219c:	00002e06 	br	2258 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    21a0:	e0bffd17 	ldw	r2,-12(fp)
    21a4:	10800017 	ldw	r2,0(r2)
    21a8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    21ac:	e0bffd17 	ldw	r2,-12(fp)
    21b0:	10800403 	ldbu	r2,16(r2)
    21b4:	10803fcc 	andi	r2,r2,255
    21b8:	10000426 	beq	r2,zero,21cc <alt_tick+0x54>
    21bc:	d0a6ae17 	ldw	r2,-25928(gp)
    21c0:	1000021e 	bne	r2,zero,21cc <alt_tick+0x54>
    {
      alarm->rollover = 0;
    21c4:	e0bffd17 	ldw	r2,-12(fp)
    21c8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    21cc:	e0bffd17 	ldw	r2,-12(fp)
    21d0:	10800217 	ldw	r2,8(r2)
    21d4:	d0e6ae17 	ldw	r3,-25928(gp)
    21d8:	18801d36 	bltu	r3,r2,2250 <alt_tick+0xd8>
    21dc:	e0bffd17 	ldw	r2,-12(fp)
    21e0:	10800403 	ldbu	r2,16(r2)
    21e4:	10803fcc 	andi	r2,r2,255
    21e8:	1000191e 	bne	r2,zero,2250 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    21ec:	e0bffd17 	ldw	r2,-12(fp)
    21f0:	10800317 	ldw	r2,12(r2)
    21f4:	e0fffd17 	ldw	r3,-12(fp)
    21f8:	18c00517 	ldw	r3,20(r3)
    21fc:	1809883a 	mov	r4,r3
    2200:	103ee83a 	callr	r2
    2204:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    2208:	e0bfff17 	ldw	r2,-4(fp)
    220c:	1000031e 	bne	r2,zero,221c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    2210:	e13ffd17 	ldw	r4,-12(fp)
    2214:	00020dc0 	call	20dc <alt_alarm_stop>
    2218:	00000d06 	br	2250 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    221c:	e0bffd17 	ldw	r2,-12(fp)
    2220:	10c00217 	ldw	r3,8(r2)
    2224:	e0bfff17 	ldw	r2,-4(fp)
    2228:	1887883a 	add	r3,r3,r2
    222c:	e0bffd17 	ldw	r2,-12(fp)
    2230:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    2234:	e0bffd17 	ldw	r2,-12(fp)
    2238:	10c00217 	ldw	r3,8(r2)
    223c:	d0a6ae17 	ldw	r2,-25928(gp)
    2240:	1880032e 	bgeu	r3,r2,2250 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    2244:	e0bffd17 	ldw	r2,-12(fp)
    2248:	00c00044 	movi	r3,1
    224c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    2250:	e0bffe17 	ldw	r2,-8(fp)
    2254:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    2258:	e0fffd17 	ldw	r3,-12(fp)
    225c:	d0a00704 	addi	r2,gp,-32740
    2260:	18bfcf1e 	bne	r3,r2,21a0 <_gp+0xffff2784>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    2264:	0001883a 	nop
}
    2268:	0001883a 	nop
    226c:	e037883a 	mov	sp,fp
    2270:	dfc00117 	ldw	ra,4(sp)
    2274:	df000017 	ldw	fp,0(sp)
    2278:	dec00204 	addi	sp,sp,8
    227c:	f800283a 	ret

00002280 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    2280:	deffff04 	addi	sp,sp,-4
    2284:	df000015 	stw	fp,0(sp)
    2288:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    228c:	000170fa 	wrctl	ienable,zero
}
    2290:	0001883a 	nop
    2294:	e037883a 	mov	sp,fp
    2298:	df000017 	ldw	fp,0(sp)
    229c:	dec00104 	addi	sp,sp,4
    22a0:	f800283a 	ret

000022a4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    22a4:	defffa04 	addi	sp,sp,-24
    22a8:	dfc00515 	stw	ra,20(sp)
    22ac:	df000415 	stw	fp,16(sp)
    22b0:	df000404 	addi	fp,sp,16
    22b4:	e13ffe15 	stw	r4,-8(fp)
    22b8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    22bc:	e0bfff17 	ldw	r2,-4(fp)
    22c0:	10800017 	ldw	r2,0(r2)
    22c4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    22c8:	e13ffe17 	ldw	r4,-8(fp)
    22cc:	0003e000 	call	3e00 <strlen>
    22d0:	10800044 	addi	r2,r2,1
    22d4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    22d8:	00000d06 	br	2310 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    22dc:	e0bffc17 	ldw	r2,-16(fp)
    22e0:	10800217 	ldw	r2,8(r2)
    22e4:	e0fffd17 	ldw	r3,-12(fp)
    22e8:	180d883a 	mov	r6,r3
    22ec:	e17ffe17 	ldw	r5,-8(fp)
    22f0:	1009883a 	mov	r4,r2
    22f4:	00033c00 	call	33c0 <memcmp>
    22f8:	1000021e 	bne	r2,zero,2304 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    22fc:	e0bffc17 	ldw	r2,-16(fp)
    2300:	00000706 	br	2320 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    2304:	e0bffc17 	ldw	r2,-16(fp)
    2308:	10800017 	ldw	r2,0(r2)
    230c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    2310:	e0fffc17 	ldw	r3,-16(fp)
    2314:	e0bfff17 	ldw	r2,-4(fp)
    2318:	18bff01e 	bne	r3,r2,22dc <_gp+0xffff28c0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    231c:	0005883a 	mov	r2,zero
}
    2320:	e037883a 	mov	sp,fp
    2324:	dfc00117 	ldw	ra,4(sp)
    2328:	df000017 	ldw	fp,0(sp)
    232c:	dec00204 	addi	sp,sp,8
    2330:	f800283a 	ret

00002334 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    2334:	defffb04 	addi	sp,sp,-20
    2338:	dfc00415 	stw	ra,16(sp)
    233c:	df000315 	stw	fp,12(sp)
    2340:	df000304 	addi	fp,sp,12
    2344:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    2348:	00800034 	movhi	r2,0
    234c:	109e8704 	addi	r2,r2,31260
    2350:	10800017 	ldw	r2,0(r2)
    2354:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    2358:	00003106 	br	2420 <alt_find_file+0xec>
  {
    len = strlen(next->name);
    235c:	e0bffd17 	ldw	r2,-12(fp)
    2360:	10800217 	ldw	r2,8(r2)
    2364:	1009883a 	mov	r4,r2
    2368:	0003e000 	call	3e00 <strlen>
    236c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    2370:	e0bffd17 	ldw	r2,-12(fp)
    2374:	10c00217 	ldw	r3,8(r2)
    2378:	e0bffe17 	ldw	r2,-8(fp)
    237c:	10bfffc4 	addi	r2,r2,-1
    2380:	1885883a 	add	r2,r3,r2
    2384:	10800003 	ldbu	r2,0(r2)
    2388:	10803fcc 	andi	r2,r2,255
    238c:	1080201c 	xori	r2,r2,128
    2390:	10bfe004 	addi	r2,r2,-128
    2394:	10800bd8 	cmpnei	r2,r2,47
    2398:	1000031e 	bne	r2,zero,23a8 <alt_find_file+0x74>
    {
      len -= 1;
    239c:	e0bffe17 	ldw	r2,-8(fp)
    23a0:	10bfffc4 	addi	r2,r2,-1
    23a4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    23a8:	e0bffe17 	ldw	r2,-8(fp)
    23ac:	e0ffff17 	ldw	r3,-4(fp)
    23b0:	1885883a 	add	r2,r3,r2
    23b4:	10800003 	ldbu	r2,0(r2)
    23b8:	10803fcc 	andi	r2,r2,255
    23bc:	1080201c 	xori	r2,r2,128
    23c0:	10bfe004 	addi	r2,r2,-128
    23c4:	10800be0 	cmpeqi	r2,r2,47
    23c8:	1000081e 	bne	r2,zero,23ec <alt_find_file+0xb8>
    23cc:	e0bffe17 	ldw	r2,-8(fp)
    23d0:	e0ffff17 	ldw	r3,-4(fp)
    23d4:	1885883a 	add	r2,r3,r2
    23d8:	10800003 	ldbu	r2,0(r2)
    23dc:	10803fcc 	andi	r2,r2,255
    23e0:	1080201c 	xori	r2,r2,128
    23e4:	10bfe004 	addi	r2,r2,-128
    23e8:	10000a1e 	bne	r2,zero,2414 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    23ec:	e0bffd17 	ldw	r2,-12(fp)
    23f0:	10800217 	ldw	r2,8(r2)
    23f4:	e0fffe17 	ldw	r3,-8(fp)
    23f8:	180d883a 	mov	r6,r3
    23fc:	e17fff17 	ldw	r5,-4(fp)
    2400:	1009883a 	mov	r4,r2
    2404:	00033c00 	call	33c0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    2408:	1000021e 	bne	r2,zero,2414 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    240c:	e0bffd17 	ldw	r2,-12(fp)
    2410:	00000806 	br	2434 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    2414:	e0bffd17 	ldw	r2,-12(fp)
    2418:	10800017 	ldw	r2,0(r2)
    241c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    2420:	e0fffd17 	ldw	r3,-12(fp)
    2424:	00800034 	movhi	r2,0
    2428:	109e8704 	addi	r2,r2,31260
    242c:	18bfcb1e 	bne	r3,r2,235c <_gp+0xffff2940>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    2430:	0005883a 	mov	r2,zero
}
    2434:	e037883a 	mov	sp,fp
    2438:	dfc00117 	ldw	ra,4(sp)
    243c:	df000017 	ldw	fp,0(sp)
    2440:	dec00204 	addi	sp,sp,8
    2444:	f800283a 	ret

00002448 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    2448:	defffa04 	addi	sp,sp,-24
    244c:	dfc00515 	stw	ra,20(sp)
    2450:	df000415 	stw	fp,16(sp)
    2454:	dc000315 	stw	r16,12(sp)
    2458:	df000404 	addi	fp,sp,16
    245c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    2460:	00bffa04 	movi	r2,-24
    2464:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    2468:	e03ffc15 	stw	zero,-16(fp)
    246c:	00002106 	br	24f4 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
    2470:	04000034 	movhi	r16,0
    2474:	841c1c04 	addi	r16,r16,28784
    2478:	e0bffc17 	ldw	r2,-16(fp)
    247c:	01400304 	movi	r5,12
    2480:	1009883a 	mov	r4,r2
    2484:	00057d40 	call	57d4 <__mulsi3>
    2488:	8085883a 	add	r2,r16,r2
    248c:	10800017 	ldw	r2,0(r2)
    2490:	1000151e 	bne	r2,zero,24e8 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
    2494:	04000034 	movhi	r16,0
    2498:	841c1c04 	addi	r16,r16,28784
    249c:	e0bffc17 	ldw	r2,-16(fp)
    24a0:	01400304 	movi	r5,12
    24a4:	1009883a 	mov	r4,r2
    24a8:	00057d40 	call	57d4 <__mulsi3>
    24ac:	8085883a 	add	r2,r16,r2
    24b0:	e0fffe17 	ldw	r3,-8(fp)
    24b4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    24b8:	00800034 	movhi	r2,0
    24bc:	109e8b04 	addi	r2,r2,31276
    24c0:	10c00017 	ldw	r3,0(r2)
    24c4:	e0bffc17 	ldw	r2,-16(fp)
    24c8:	1880040e 	bge	r3,r2,24dc <alt_get_fd+0x94>
      {
        alt_max_fd = i;
    24cc:	00800034 	movhi	r2,0
    24d0:	109e8b04 	addi	r2,r2,31276
    24d4:	e0fffc17 	ldw	r3,-16(fp)
    24d8:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    24dc:	e0bffc17 	ldw	r2,-16(fp)
    24e0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    24e4:	00000606 	br	2500 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    24e8:	e0bffc17 	ldw	r2,-16(fp)
    24ec:	10800044 	addi	r2,r2,1
    24f0:	e0bffc15 	stw	r2,-16(fp)
    24f4:	e0bffc17 	ldw	r2,-16(fp)
    24f8:	10800810 	cmplti	r2,r2,32
    24fc:	103fdc1e 	bne	r2,zero,2470 <_gp+0xffff2a54>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    2500:	e0bffd17 	ldw	r2,-12(fp)
}
    2504:	e6ffff04 	addi	sp,fp,-4
    2508:	dfc00217 	ldw	ra,8(sp)
    250c:	df000117 	ldw	fp,4(sp)
    2510:	dc000017 	ldw	r16,0(sp)
    2514:	dec00304 	addi	sp,sp,12
    2518:	f800283a 	ret

0000251c <exit>:
    251c:	defffe04 	addi	sp,sp,-8
    2520:	000b883a 	mov	r5,zero
    2524:	dc000015 	stw	r16,0(sp)
    2528:	dfc00115 	stw	ra,4(sp)
    252c:	2021883a 	mov	r16,r4
    2530:	00041440 	call	4144 <__call_exitprocs>
    2534:	00800034 	movhi	r2,0
    2538:	109e9004 	addi	r2,r2,31296
    253c:	11000017 	ldw	r4,0(r2)
    2540:	20800f17 	ldw	r2,60(r4)
    2544:	10000126 	beq	r2,zero,254c <exit+0x30>
    2548:	103ee83a 	callr	r2
    254c:	8009883a 	mov	r4,r16
    2550:	00057fc0 	call	57fc <_exit>

00002554 <_fputs_r>:
    2554:	defff804 	addi	sp,sp,-32
    2558:	dc400615 	stw	r17,24(sp)
    255c:	2023883a 	mov	r17,r4
    2560:	2809883a 	mov	r4,r5
    2564:	dc000515 	stw	r16,20(sp)
    2568:	dfc00715 	stw	ra,28(sp)
    256c:	3021883a 	mov	r16,r6
    2570:	d9400315 	stw	r5,12(sp)
    2574:	0003e000 	call	3e00 <strlen>
    2578:	d8800215 	stw	r2,8(sp)
    257c:	d8800415 	stw	r2,16(sp)
    2580:	d8800304 	addi	r2,sp,12
    2584:	d8800015 	stw	r2,0(sp)
    2588:	00800044 	movi	r2,1
    258c:	d8800115 	stw	r2,4(sp)
    2590:	88000226 	beq	r17,zero,259c <_fputs_r+0x48>
    2594:	88800e17 	ldw	r2,56(r17)
    2598:	10001226 	beq	r2,zero,25e4 <_fputs_r+0x90>
    259c:	8080030b 	ldhu	r2,12(r16)
    25a0:	10c8000c 	andi	r3,r2,8192
    25a4:	1800061e 	bne	r3,zero,25c0 <_fputs_r+0x6c>
    25a8:	81001917 	ldw	r4,100(r16)
    25ac:	00f7ffc4 	movi	r3,-8193
    25b0:	10880014 	ori	r2,r2,8192
    25b4:	20c6703a 	and	r3,r4,r3
    25b8:	8080030d 	sth	r2,12(r16)
    25bc:	80c01915 	stw	r3,100(r16)
    25c0:	d80d883a 	mov	r6,sp
    25c4:	800b883a 	mov	r5,r16
    25c8:	8809883a 	mov	r4,r17
    25cc:	00026080 	call	2608 <__sfvwrite_r>
    25d0:	dfc00717 	ldw	ra,28(sp)
    25d4:	dc400617 	ldw	r17,24(sp)
    25d8:	dc000517 	ldw	r16,20(sp)
    25dc:	dec00804 	addi	sp,sp,32
    25e0:	f800283a 	ret
    25e4:	8809883a 	mov	r4,r17
    25e8:	00048cc0 	call	48cc <__sinit>
    25ec:	003feb06 	br	259c <_gp+0xffff2b80>

000025f0 <fputs>:
    25f0:	00800034 	movhi	r2,0
    25f4:	109e9104 	addi	r2,r2,31300
    25f8:	280d883a 	mov	r6,r5
    25fc:	200b883a 	mov	r5,r4
    2600:	11000017 	ldw	r4,0(r2)
    2604:	00025541 	jmpi	2554 <_fputs_r>

00002608 <__sfvwrite_r>:
    2608:	30800217 	ldw	r2,8(r6)
    260c:	10006726 	beq	r2,zero,27ac <__sfvwrite_r+0x1a4>
    2610:	28c0030b 	ldhu	r3,12(r5)
    2614:	defff404 	addi	sp,sp,-48
    2618:	dd400715 	stw	r21,28(sp)
    261c:	dd000615 	stw	r20,24(sp)
    2620:	dc000215 	stw	r16,8(sp)
    2624:	dfc00b15 	stw	ra,44(sp)
    2628:	df000a15 	stw	fp,40(sp)
    262c:	ddc00915 	stw	r23,36(sp)
    2630:	dd800815 	stw	r22,32(sp)
    2634:	dcc00515 	stw	r19,20(sp)
    2638:	dc800415 	stw	r18,16(sp)
    263c:	dc400315 	stw	r17,12(sp)
    2640:	1880020c 	andi	r2,r3,8
    2644:	2821883a 	mov	r16,r5
    2648:	202b883a 	mov	r21,r4
    264c:	3029883a 	mov	r20,r6
    2650:	10002726 	beq	r2,zero,26f0 <__sfvwrite_r+0xe8>
    2654:	28800417 	ldw	r2,16(r5)
    2658:	10002526 	beq	r2,zero,26f0 <__sfvwrite_r+0xe8>
    265c:	1880008c 	andi	r2,r3,2
    2660:	a4400017 	ldw	r17,0(r20)
    2664:	10002a26 	beq	r2,zero,2710 <__sfvwrite_r+0x108>
    2668:	05a00034 	movhi	r22,32768
    266c:	0027883a 	mov	r19,zero
    2670:	0025883a 	mov	r18,zero
    2674:	b5bf0004 	addi	r22,r22,-1024
    2678:	980d883a 	mov	r6,r19
    267c:	a809883a 	mov	r4,r21
    2680:	90004626 	beq	r18,zero,279c <__sfvwrite_r+0x194>
    2684:	900f883a 	mov	r7,r18
    2688:	b480022e 	bgeu	r22,r18,2694 <__sfvwrite_r+0x8c>
    268c:	01e00034 	movhi	r7,32768
    2690:	39ff0004 	addi	r7,r7,-1024
    2694:	80800917 	ldw	r2,36(r16)
    2698:	81400717 	ldw	r5,28(r16)
    269c:	103ee83a 	callr	r2
    26a0:	00805a0e 	bge	zero,r2,280c <__sfvwrite_r+0x204>
    26a4:	a0c00217 	ldw	r3,8(r20)
    26a8:	98a7883a 	add	r19,r19,r2
    26ac:	90a5c83a 	sub	r18,r18,r2
    26b0:	1885c83a 	sub	r2,r3,r2
    26b4:	a0800215 	stw	r2,8(r20)
    26b8:	103fef1e 	bne	r2,zero,2678 <_gp+0xffff2c5c>
    26bc:	0005883a 	mov	r2,zero
    26c0:	dfc00b17 	ldw	ra,44(sp)
    26c4:	df000a17 	ldw	fp,40(sp)
    26c8:	ddc00917 	ldw	r23,36(sp)
    26cc:	dd800817 	ldw	r22,32(sp)
    26d0:	dd400717 	ldw	r21,28(sp)
    26d4:	dd000617 	ldw	r20,24(sp)
    26d8:	dcc00517 	ldw	r19,20(sp)
    26dc:	dc800417 	ldw	r18,16(sp)
    26e0:	dc400317 	ldw	r17,12(sp)
    26e4:	dc000217 	ldw	r16,8(sp)
    26e8:	dec00c04 	addi	sp,sp,48
    26ec:	f800283a 	ret
    26f0:	800b883a 	mov	r5,r16
    26f4:	a809883a 	mov	r4,r21
    26f8:	0003ff00 	call	3ff0 <__swsetup_r>
    26fc:	1000ee1e 	bne	r2,zero,2ab8 <__sfvwrite_r+0x4b0>
    2700:	80c0030b 	ldhu	r3,12(r16)
    2704:	a4400017 	ldw	r17,0(r20)
    2708:	1880008c 	andi	r2,r3,2
    270c:	103fd61e 	bne	r2,zero,2668 <_gp+0xffff2c4c>
    2710:	1880004c 	andi	r2,r3,1
    2714:	1000421e 	bne	r2,zero,2820 <__sfvwrite_r+0x218>
    2718:	0039883a 	mov	fp,zero
    271c:	0025883a 	mov	r18,zero
    2720:	90001a26 	beq	r18,zero,278c <__sfvwrite_r+0x184>
    2724:	1880800c 	andi	r2,r3,512
    2728:	84c00217 	ldw	r19,8(r16)
    272c:	10002126 	beq	r2,zero,27b4 <__sfvwrite_r+0x1ac>
    2730:	982f883a 	mov	r23,r19
    2734:	94c09636 	bltu	r18,r19,2990 <__sfvwrite_r+0x388>
    2738:	1881200c 	andi	r2,r3,1152
    273c:	1000a11e 	bne	r2,zero,29c4 <__sfvwrite_r+0x3bc>
    2740:	81000017 	ldw	r4,0(r16)
    2744:	b80d883a 	mov	r6,r23
    2748:	e00b883a 	mov	r5,fp
    274c:	00035840 	call	3584 <memmove>
    2750:	80c00217 	ldw	r3,8(r16)
    2754:	81000017 	ldw	r4,0(r16)
    2758:	9005883a 	mov	r2,r18
    275c:	1ce7c83a 	sub	r19,r3,r19
    2760:	25cf883a 	add	r7,r4,r23
    2764:	84c00215 	stw	r19,8(r16)
    2768:	81c00015 	stw	r7,0(r16)
    276c:	a0c00217 	ldw	r3,8(r20)
    2770:	e0b9883a 	add	fp,fp,r2
    2774:	90a5c83a 	sub	r18,r18,r2
    2778:	18a7c83a 	sub	r19,r3,r2
    277c:	a4c00215 	stw	r19,8(r20)
    2780:	983fce26 	beq	r19,zero,26bc <_gp+0xffff2ca0>
    2784:	80c0030b 	ldhu	r3,12(r16)
    2788:	903fe61e 	bne	r18,zero,2724 <_gp+0xffff2d08>
    278c:	8f000017 	ldw	fp,0(r17)
    2790:	8c800117 	ldw	r18,4(r17)
    2794:	8c400204 	addi	r17,r17,8
    2798:	003fe106 	br	2720 <_gp+0xffff2d04>
    279c:	8cc00017 	ldw	r19,0(r17)
    27a0:	8c800117 	ldw	r18,4(r17)
    27a4:	8c400204 	addi	r17,r17,8
    27a8:	003fb306 	br	2678 <_gp+0xffff2c5c>
    27ac:	0005883a 	mov	r2,zero
    27b0:	f800283a 	ret
    27b4:	81000017 	ldw	r4,0(r16)
    27b8:	80800417 	ldw	r2,16(r16)
    27bc:	11005a36 	bltu	r2,r4,2928 <__sfvwrite_r+0x320>
    27c0:	85c00517 	ldw	r23,20(r16)
    27c4:	95c05836 	bltu	r18,r23,2928 <__sfvwrite_r+0x320>
    27c8:	00a00034 	movhi	r2,32768
    27cc:	10bfffc4 	addi	r2,r2,-1
    27d0:	9009883a 	mov	r4,r18
    27d4:	1480012e 	bgeu	r2,r18,27dc <__sfvwrite_r+0x1d4>
    27d8:	1009883a 	mov	r4,r2
    27dc:	b80b883a 	mov	r5,r23
    27e0:	00056200 	call	5620 <__divsi3>
    27e4:	b80b883a 	mov	r5,r23
    27e8:	1009883a 	mov	r4,r2
    27ec:	00057d40 	call	57d4 <__mulsi3>
    27f0:	81400717 	ldw	r5,28(r16)
    27f4:	80c00917 	ldw	r3,36(r16)
    27f8:	100f883a 	mov	r7,r2
    27fc:	e00d883a 	mov	r6,fp
    2800:	a809883a 	mov	r4,r21
    2804:	183ee83a 	callr	r3
    2808:	00bfd816 	blt	zero,r2,276c <_gp+0xffff2d50>
    280c:	8080030b 	ldhu	r2,12(r16)
    2810:	10801014 	ori	r2,r2,64
    2814:	8080030d 	sth	r2,12(r16)
    2818:	00bfffc4 	movi	r2,-1
    281c:	003fa806 	br	26c0 <_gp+0xffff2ca4>
    2820:	0027883a 	mov	r19,zero
    2824:	0011883a 	mov	r8,zero
    2828:	0039883a 	mov	fp,zero
    282c:	0025883a 	mov	r18,zero
    2830:	90001f26 	beq	r18,zero,28b0 <__sfvwrite_r+0x2a8>
    2834:	40005a26 	beq	r8,zero,29a0 <__sfvwrite_r+0x398>
    2838:	982d883a 	mov	r22,r19
    283c:	94c0012e 	bgeu	r18,r19,2844 <__sfvwrite_r+0x23c>
    2840:	902d883a 	mov	r22,r18
    2844:	81000017 	ldw	r4,0(r16)
    2848:	80800417 	ldw	r2,16(r16)
    284c:	b02f883a 	mov	r23,r22
    2850:	81c00517 	ldw	r7,20(r16)
    2854:	1100032e 	bgeu	r2,r4,2864 <__sfvwrite_r+0x25c>
    2858:	80c00217 	ldw	r3,8(r16)
    285c:	38c7883a 	add	r3,r7,r3
    2860:	1d801816 	blt	r3,r22,28c4 <__sfvwrite_r+0x2bc>
    2864:	b1c03e16 	blt	r22,r7,2960 <__sfvwrite_r+0x358>
    2868:	80800917 	ldw	r2,36(r16)
    286c:	81400717 	ldw	r5,28(r16)
    2870:	e00d883a 	mov	r6,fp
    2874:	da000115 	stw	r8,4(sp)
    2878:	a809883a 	mov	r4,r21
    287c:	103ee83a 	callr	r2
    2880:	102f883a 	mov	r23,r2
    2884:	da000117 	ldw	r8,4(sp)
    2888:	00bfe00e 	bge	zero,r2,280c <_gp+0xffff2df0>
    288c:	9de7c83a 	sub	r19,r19,r23
    2890:	98001f26 	beq	r19,zero,2910 <__sfvwrite_r+0x308>
    2894:	a0800217 	ldw	r2,8(r20)
    2898:	e5f9883a 	add	fp,fp,r23
    289c:	95e5c83a 	sub	r18,r18,r23
    28a0:	15efc83a 	sub	r23,r2,r23
    28a4:	a5c00215 	stw	r23,8(r20)
    28a8:	b83f8426 	beq	r23,zero,26bc <_gp+0xffff2ca0>
    28ac:	903fe11e 	bne	r18,zero,2834 <_gp+0xffff2e18>
    28b0:	8f000017 	ldw	fp,0(r17)
    28b4:	8c800117 	ldw	r18,4(r17)
    28b8:	0011883a 	mov	r8,zero
    28bc:	8c400204 	addi	r17,r17,8
    28c0:	003fdb06 	br	2830 <_gp+0xffff2e14>
    28c4:	180d883a 	mov	r6,r3
    28c8:	e00b883a 	mov	r5,fp
    28cc:	da000115 	stw	r8,4(sp)
    28d0:	d8c00015 	stw	r3,0(sp)
    28d4:	00035840 	call	3584 <memmove>
    28d8:	d8c00017 	ldw	r3,0(sp)
    28dc:	80800017 	ldw	r2,0(r16)
    28e0:	800b883a 	mov	r5,r16
    28e4:	a809883a 	mov	r4,r21
    28e8:	10c5883a 	add	r2,r2,r3
    28ec:	80800015 	stw	r2,0(r16)
    28f0:	d8c00015 	stw	r3,0(sp)
    28f4:	00044e00 	call	44e0 <_fflush_r>
    28f8:	d8c00017 	ldw	r3,0(sp)
    28fc:	da000117 	ldw	r8,4(sp)
    2900:	103fc21e 	bne	r2,zero,280c <_gp+0xffff2df0>
    2904:	182f883a 	mov	r23,r3
    2908:	9de7c83a 	sub	r19,r19,r23
    290c:	983fe11e 	bne	r19,zero,2894 <_gp+0xffff2e78>
    2910:	800b883a 	mov	r5,r16
    2914:	a809883a 	mov	r4,r21
    2918:	00044e00 	call	44e0 <_fflush_r>
    291c:	103fbb1e 	bne	r2,zero,280c <_gp+0xffff2df0>
    2920:	0011883a 	mov	r8,zero
    2924:	003fdb06 	br	2894 <_gp+0xffff2e78>
    2928:	94c0012e 	bgeu	r18,r19,2930 <__sfvwrite_r+0x328>
    292c:	9027883a 	mov	r19,r18
    2930:	980d883a 	mov	r6,r19
    2934:	e00b883a 	mov	r5,fp
    2938:	00035840 	call	3584 <memmove>
    293c:	80800217 	ldw	r2,8(r16)
    2940:	80c00017 	ldw	r3,0(r16)
    2944:	14c5c83a 	sub	r2,r2,r19
    2948:	1cc7883a 	add	r3,r3,r19
    294c:	80800215 	stw	r2,8(r16)
    2950:	80c00015 	stw	r3,0(r16)
    2954:	10004326 	beq	r2,zero,2a64 <__sfvwrite_r+0x45c>
    2958:	9805883a 	mov	r2,r19
    295c:	003f8306 	br	276c <_gp+0xffff2d50>
    2960:	b00d883a 	mov	r6,r22
    2964:	e00b883a 	mov	r5,fp
    2968:	da000115 	stw	r8,4(sp)
    296c:	00035840 	call	3584 <memmove>
    2970:	80800217 	ldw	r2,8(r16)
    2974:	80c00017 	ldw	r3,0(r16)
    2978:	da000117 	ldw	r8,4(sp)
    297c:	1585c83a 	sub	r2,r2,r22
    2980:	1dad883a 	add	r22,r3,r22
    2984:	80800215 	stw	r2,8(r16)
    2988:	85800015 	stw	r22,0(r16)
    298c:	003fbf06 	br	288c <_gp+0xffff2e70>
    2990:	81000017 	ldw	r4,0(r16)
    2994:	9027883a 	mov	r19,r18
    2998:	902f883a 	mov	r23,r18
    299c:	003f6906 	br	2744 <_gp+0xffff2d28>
    29a0:	900d883a 	mov	r6,r18
    29a4:	01400284 	movi	r5,10
    29a8:	e009883a 	mov	r4,fp
    29ac:	00032dc0 	call	32dc <memchr>
    29b0:	10003e26 	beq	r2,zero,2aac <__sfvwrite_r+0x4a4>
    29b4:	10800044 	addi	r2,r2,1
    29b8:	1727c83a 	sub	r19,r2,fp
    29bc:	02000044 	movi	r8,1
    29c0:	003f9d06 	br	2838 <_gp+0xffff2e1c>
    29c4:	80800517 	ldw	r2,20(r16)
    29c8:	81400417 	ldw	r5,16(r16)
    29cc:	81c00017 	ldw	r7,0(r16)
    29d0:	10a7883a 	add	r19,r2,r2
    29d4:	9885883a 	add	r2,r19,r2
    29d8:	1026d7fa 	srli	r19,r2,31
    29dc:	396dc83a 	sub	r22,r7,r5
    29e0:	b1000044 	addi	r4,r22,1
    29e4:	9885883a 	add	r2,r19,r2
    29e8:	1027d07a 	srai	r19,r2,1
    29ec:	2485883a 	add	r2,r4,r18
    29f0:	980d883a 	mov	r6,r19
    29f4:	9880022e 	bgeu	r19,r2,2a00 <__sfvwrite_r+0x3f8>
    29f8:	1027883a 	mov	r19,r2
    29fc:	100d883a 	mov	r6,r2
    2a00:	18c1000c 	andi	r3,r3,1024
    2a04:	18001c26 	beq	r3,zero,2a78 <__sfvwrite_r+0x470>
    2a08:	300b883a 	mov	r5,r6
    2a0c:	a809883a 	mov	r4,r21
    2a10:	0002ad00 	call	2ad0 <_malloc_r>
    2a14:	102f883a 	mov	r23,r2
    2a18:	10002926 	beq	r2,zero,2ac0 <__sfvwrite_r+0x4b8>
    2a1c:	81400417 	ldw	r5,16(r16)
    2a20:	b00d883a 	mov	r6,r22
    2a24:	1009883a 	mov	r4,r2
    2a28:	000343c0 	call	343c <memcpy>
    2a2c:	8080030b 	ldhu	r2,12(r16)
    2a30:	00fedfc4 	movi	r3,-1153
    2a34:	10c4703a 	and	r2,r2,r3
    2a38:	10802014 	ori	r2,r2,128
    2a3c:	8080030d 	sth	r2,12(r16)
    2a40:	bd89883a 	add	r4,r23,r22
    2a44:	9d8fc83a 	sub	r7,r19,r22
    2a48:	85c00415 	stw	r23,16(r16)
    2a4c:	84c00515 	stw	r19,20(r16)
    2a50:	81000015 	stw	r4,0(r16)
    2a54:	9027883a 	mov	r19,r18
    2a58:	81c00215 	stw	r7,8(r16)
    2a5c:	902f883a 	mov	r23,r18
    2a60:	003f3806 	br	2744 <_gp+0xffff2d28>
    2a64:	800b883a 	mov	r5,r16
    2a68:	a809883a 	mov	r4,r21
    2a6c:	00044e00 	call	44e0 <_fflush_r>
    2a70:	103fb926 	beq	r2,zero,2958 <_gp+0xffff2f3c>
    2a74:	003f6506 	br	280c <_gp+0xffff2df0>
    2a78:	a809883a 	mov	r4,r21
    2a7c:	00038480 	call	3848 <_realloc_r>
    2a80:	102f883a 	mov	r23,r2
    2a84:	103fee1e 	bne	r2,zero,2a40 <_gp+0xffff3024>
    2a88:	81400417 	ldw	r5,16(r16)
    2a8c:	a809883a 	mov	r4,r21
    2a90:	0004a400 	call	4a40 <_free_r>
    2a94:	8080030b 	ldhu	r2,12(r16)
    2a98:	00ffdfc4 	movi	r3,-129
    2a9c:	1884703a 	and	r2,r3,r2
    2aa0:	00c00304 	movi	r3,12
    2aa4:	a8c00015 	stw	r3,0(r21)
    2aa8:	003f5906 	br	2810 <_gp+0xffff2df4>
    2aac:	94c00044 	addi	r19,r18,1
    2ab0:	02000044 	movi	r8,1
    2ab4:	003f6006 	br	2838 <_gp+0xffff2e1c>
    2ab8:	00bfffc4 	movi	r2,-1
    2abc:	003f0006 	br	26c0 <_gp+0xffff2ca4>
    2ac0:	00800304 	movi	r2,12
    2ac4:	a8800015 	stw	r2,0(r21)
    2ac8:	8080030b 	ldhu	r2,12(r16)
    2acc:	003f5006 	br	2810 <_gp+0xffff2df4>

00002ad0 <_malloc_r>:
    2ad0:	defff504 	addi	sp,sp,-44
    2ad4:	dc800315 	stw	r18,12(sp)
    2ad8:	dfc00a15 	stw	ra,40(sp)
    2adc:	df000915 	stw	fp,36(sp)
    2ae0:	ddc00815 	stw	r23,32(sp)
    2ae4:	dd800715 	stw	r22,28(sp)
    2ae8:	dd400615 	stw	r21,24(sp)
    2aec:	dd000515 	stw	r20,20(sp)
    2af0:	dcc00415 	stw	r19,16(sp)
    2af4:	dc400215 	stw	r17,8(sp)
    2af8:	dc000115 	stw	r16,4(sp)
    2afc:	288002c4 	addi	r2,r5,11
    2b00:	00c00584 	movi	r3,22
    2b04:	2025883a 	mov	r18,r4
    2b08:	18807f2e 	bgeu	r3,r2,2d08 <_malloc_r+0x238>
    2b0c:	047ffe04 	movi	r17,-8
    2b10:	1462703a 	and	r17,r2,r17
    2b14:	8800a316 	blt	r17,zero,2da4 <_malloc_r+0x2d4>
    2b18:	8940a236 	bltu	r17,r5,2da4 <_malloc_r+0x2d4>
    2b1c:	0005b600 	call	5b60 <__malloc_lock>
    2b20:	00807dc4 	movi	r2,503
    2b24:	1441e92e 	bgeu	r2,r17,32cc <_malloc_r+0x7fc>
    2b28:	8804d27a 	srli	r2,r17,9
    2b2c:	1000a126 	beq	r2,zero,2db4 <_malloc_r+0x2e4>
    2b30:	00c00104 	movi	r3,4
    2b34:	18811e36 	bltu	r3,r2,2fb0 <_malloc_r+0x4e0>
    2b38:	8804d1ba 	srli	r2,r17,6
    2b3c:	12000e44 	addi	r8,r2,57
    2b40:	11c00e04 	addi	r7,r2,56
    2b44:	4209883a 	add	r4,r8,r8
    2b48:	04c00034 	movhi	r19,0
    2b4c:	2109883a 	add	r4,r4,r4
    2b50:	9cdd8504 	addi	r19,r19,30228
    2b54:	2109883a 	add	r4,r4,r4
    2b58:	9909883a 	add	r4,r19,r4
    2b5c:	24000117 	ldw	r16,4(r4)
    2b60:	213ffe04 	addi	r4,r4,-8
    2b64:	24009726 	beq	r4,r16,2dc4 <_malloc_r+0x2f4>
    2b68:	80800117 	ldw	r2,4(r16)
    2b6c:	01bfff04 	movi	r6,-4
    2b70:	014003c4 	movi	r5,15
    2b74:	1184703a 	and	r2,r2,r6
    2b78:	1447c83a 	sub	r3,r2,r17
    2b7c:	28c00716 	blt	r5,r3,2b9c <_malloc_r+0xcc>
    2b80:	1800920e 	bge	r3,zero,2dcc <_malloc_r+0x2fc>
    2b84:	84000317 	ldw	r16,12(r16)
    2b88:	24008e26 	beq	r4,r16,2dc4 <_malloc_r+0x2f4>
    2b8c:	80800117 	ldw	r2,4(r16)
    2b90:	1184703a 	and	r2,r2,r6
    2b94:	1447c83a 	sub	r3,r2,r17
    2b98:	28fff90e 	bge	r5,r3,2b80 <_gp+0xffff3164>
    2b9c:	3809883a 	mov	r4,r7
    2ba0:	01800034 	movhi	r6,0
    2ba4:	9c000417 	ldw	r16,16(r19)
    2ba8:	319d8504 	addi	r6,r6,30228
    2bac:	32000204 	addi	r8,r6,8
    2bb0:	82013426 	beq	r16,r8,3084 <_malloc_r+0x5b4>
    2bb4:	80c00117 	ldw	r3,4(r16)
    2bb8:	00bfff04 	movi	r2,-4
    2bbc:	188e703a 	and	r7,r3,r2
    2bc0:	3c45c83a 	sub	r2,r7,r17
    2bc4:	00c003c4 	movi	r3,15
    2bc8:	18811f16 	blt	r3,r2,3048 <_malloc_r+0x578>
    2bcc:	32000515 	stw	r8,20(r6)
    2bd0:	32000415 	stw	r8,16(r6)
    2bd4:	10007f0e 	bge	r2,zero,2dd4 <_malloc_r+0x304>
    2bd8:	00807fc4 	movi	r2,511
    2bdc:	11c0fd36 	bltu	r2,r7,2fd4 <_malloc_r+0x504>
    2be0:	3806d0fa 	srli	r3,r7,3
    2be4:	01c00044 	movi	r7,1
    2be8:	30800117 	ldw	r2,4(r6)
    2bec:	19400044 	addi	r5,r3,1
    2bf0:	294b883a 	add	r5,r5,r5
    2bf4:	1807d0ba 	srai	r3,r3,2
    2bf8:	294b883a 	add	r5,r5,r5
    2bfc:	294b883a 	add	r5,r5,r5
    2c00:	298b883a 	add	r5,r5,r6
    2c04:	38c6983a 	sll	r3,r7,r3
    2c08:	29c00017 	ldw	r7,0(r5)
    2c0c:	2a7ffe04 	addi	r9,r5,-8
    2c10:	1886b03a 	or	r3,r3,r2
    2c14:	82400315 	stw	r9,12(r16)
    2c18:	81c00215 	stw	r7,8(r16)
    2c1c:	30c00115 	stw	r3,4(r6)
    2c20:	2c000015 	stw	r16,0(r5)
    2c24:	3c000315 	stw	r16,12(r7)
    2c28:	2005d0ba 	srai	r2,r4,2
    2c2c:	01400044 	movi	r5,1
    2c30:	288a983a 	sll	r5,r5,r2
    2c34:	19406f36 	bltu	r3,r5,2df4 <_malloc_r+0x324>
    2c38:	28c4703a 	and	r2,r5,r3
    2c3c:	10000a1e 	bne	r2,zero,2c68 <_malloc_r+0x198>
    2c40:	00bfff04 	movi	r2,-4
    2c44:	294b883a 	add	r5,r5,r5
    2c48:	2088703a 	and	r4,r4,r2
    2c4c:	28c4703a 	and	r2,r5,r3
    2c50:	21000104 	addi	r4,r4,4
    2c54:	1000041e 	bne	r2,zero,2c68 <_malloc_r+0x198>
    2c58:	294b883a 	add	r5,r5,r5
    2c5c:	28c4703a 	and	r2,r5,r3
    2c60:	21000104 	addi	r4,r4,4
    2c64:	103ffc26 	beq	r2,zero,2c58 <_gp+0xffff323c>
    2c68:	02bfff04 	movi	r10,-4
    2c6c:	024003c4 	movi	r9,15
    2c70:	21800044 	addi	r6,r4,1
    2c74:	318d883a 	add	r6,r6,r6
    2c78:	318d883a 	add	r6,r6,r6
    2c7c:	318d883a 	add	r6,r6,r6
    2c80:	998d883a 	add	r6,r19,r6
    2c84:	333ffe04 	addi	r12,r6,-8
    2c88:	2017883a 	mov	r11,r4
    2c8c:	31800104 	addi	r6,r6,4
    2c90:	34000017 	ldw	r16,0(r6)
    2c94:	31fffd04 	addi	r7,r6,-12
    2c98:	81c0041e 	bne	r16,r7,2cac <_malloc_r+0x1dc>
    2c9c:	0000fb06 	br	308c <_malloc_r+0x5bc>
    2ca0:	1801030e 	bge	r3,zero,30b0 <_malloc_r+0x5e0>
    2ca4:	84000317 	ldw	r16,12(r16)
    2ca8:	81c0f826 	beq	r16,r7,308c <_malloc_r+0x5bc>
    2cac:	80800117 	ldw	r2,4(r16)
    2cb0:	1284703a 	and	r2,r2,r10
    2cb4:	1447c83a 	sub	r3,r2,r17
    2cb8:	48fff90e 	bge	r9,r3,2ca0 <_gp+0xffff3284>
    2cbc:	80800317 	ldw	r2,12(r16)
    2cc0:	81000217 	ldw	r4,8(r16)
    2cc4:	89400054 	ori	r5,r17,1
    2cc8:	81400115 	stw	r5,4(r16)
    2ccc:	20800315 	stw	r2,12(r4)
    2cd0:	11000215 	stw	r4,8(r2)
    2cd4:	8463883a 	add	r17,r16,r17
    2cd8:	9c400515 	stw	r17,20(r19)
    2cdc:	9c400415 	stw	r17,16(r19)
    2ce0:	18800054 	ori	r2,r3,1
    2ce4:	88800115 	stw	r2,4(r17)
    2ce8:	8a000315 	stw	r8,12(r17)
    2cec:	8a000215 	stw	r8,8(r17)
    2cf0:	88e3883a 	add	r17,r17,r3
    2cf4:	88c00015 	stw	r3,0(r17)
    2cf8:	9009883a 	mov	r4,r18
    2cfc:	0005b840 	call	5b84 <__malloc_unlock>
    2d00:	80800204 	addi	r2,r16,8
    2d04:	00001b06 	br	2d74 <_malloc_r+0x2a4>
    2d08:	04400404 	movi	r17,16
    2d0c:	89402536 	bltu	r17,r5,2da4 <_malloc_r+0x2d4>
    2d10:	0005b600 	call	5b60 <__malloc_lock>
    2d14:	00800184 	movi	r2,6
    2d18:	01000084 	movi	r4,2
    2d1c:	04c00034 	movhi	r19,0
    2d20:	1085883a 	add	r2,r2,r2
    2d24:	9cdd8504 	addi	r19,r19,30228
    2d28:	1085883a 	add	r2,r2,r2
    2d2c:	9885883a 	add	r2,r19,r2
    2d30:	14000117 	ldw	r16,4(r2)
    2d34:	10fffe04 	addi	r3,r2,-8
    2d38:	80c0d926 	beq	r16,r3,30a0 <_malloc_r+0x5d0>
    2d3c:	80c00117 	ldw	r3,4(r16)
    2d40:	81000317 	ldw	r4,12(r16)
    2d44:	00bfff04 	movi	r2,-4
    2d48:	1884703a 	and	r2,r3,r2
    2d4c:	81400217 	ldw	r5,8(r16)
    2d50:	8085883a 	add	r2,r16,r2
    2d54:	10c00117 	ldw	r3,4(r2)
    2d58:	29000315 	stw	r4,12(r5)
    2d5c:	21400215 	stw	r5,8(r4)
    2d60:	18c00054 	ori	r3,r3,1
    2d64:	10c00115 	stw	r3,4(r2)
    2d68:	9009883a 	mov	r4,r18
    2d6c:	0005b840 	call	5b84 <__malloc_unlock>
    2d70:	80800204 	addi	r2,r16,8
    2d74:	dfc00a17 	ldw	ra,40(sp)
    2d78:	df000917 	ldw	fp,36(sp)
    2d7c:	ddc00817 	ldw	r23,32(sp)
    2d80:	dd800717 	ldw	r22,28(sp)
    2d84:	dd400617 	ldw	r21,24(sp)
    2d88:	dd000517 	ldw	r20,20(sp)
    2d8c:	dcc00417 	ldw	r19,16(sp)
    2d90:	dc800317 	ldw	r18,12(sp)
    2d94:	dc400217 	ldw	r17,8(sp)
    2d98:	dc000117 	ldw	r16,4(sp)
    2d9c:	dec00b04 	addi	sp,sp,44
    2da0:	f800283a 	ret
    2da4:	00800304 	movi	r2,12
    2da8:	90800015 	stw	r2,0(r18)
    2dac:	0005883a 	mov	r2,zero
    2db0:	003ff006 	br	2d74 <_gp+0xffff3358>
    2db4:	01002004 	movi	r4,128
    2db8:	02001004 	movi	r8,64
    2dbc:	01c00fc4 	movi	r7,63
    2dc0:	003f6106 	br	2b48 <_gp+0xffff312c>
    2dc4:	4009883a 	mov	r4,r8
    2dc8:	003f7506 	br	2ba0 <_gp+0xffff3184>
    2dcc:	81000317 	ldw	r4,12(r16)
    2dd0:	003fde06 	br	2d4c <_gp+0xffff3330>
    2dd4:	81c5883a 	add	r2,r16,r7
    2dd8:	11400117 	ldw	r5,4(r2)
    2ddc:	9009883a 	mov	r4,r18
    2de0:	29400054 	ori	r5,r5,1
    2de4:	11400115 	stw	r5,4(r2)
    2de8:	0005b840 	call	5b84 <__malloc_unlock>
    2dec:	80800204 	addi	r2,r16,8
    2df0:	003fe006 	br	2d74 <_gp+0xffff3358>
    2df4:	9c000217 	ldw	r16,8(r19)
    2df8:	00bfff04 	movi	r2,-4
    2dfc:	85800117 	ldw	r22,4(r16)
    2e00:	b0ac703a 	and	r22,r22,r2
    2e04:	b4400336 	bltu	r22,r17,2e14 <_malloc_r+0x344>
    2e08:	b445c83a 	sub	r2,r22,r17
    2e0c:	00c003c4 	movi	r3,15
    2e10:	18805d16 	blt	r3,r2,2f88 <_malloc_r+0x4b8>
    2e14:	05c00034 	movhi	r23,0
    2e18:	00800074 	movhi	r2,1
    2e1c:	10a53904 	addi	r2,r2,-27420
    2e20:	bdde9204 	addi	r23,r23,31304
    2e24:	15400017 	ldw	r21,0(r2)
    2e28:	b8c00017 	ldw	r3,0(r23)
    2e2c:	00bfffc4 	movi	r2,-1
    2e30:	858d883a 	add	r6,r16,r22
    2e34:	8d6b883a 	add	r21,r17,r21
    2e38:	1880ea26 	beq	r3,r2,31e4 <_malloc_r+0x714>
    2e3c:	ad4403c4 	addi	r21,r21,4111
    2e40:	00bc0004 	movi	r2,-4096
    2e44:	a8aa703a 	and	r21,r21,r2
    2e48:	a80b883a 	mov	r5,r21
    2e4c:	9009883a 	mov	r4,r18
    2e50:	d9800015 	stw	r6,0(sp)
    2e54:	0003dac0 	call	3dac <_sbrk_r>
    2e58:	1029883a 	mov	r20,r2
    2e5c:	00bfffc4 	movi	r2,-1
    2e60:	d9800017 	ldw	r6,0(sp)
    2e64:	a080e826 	beq	r20,r2,3208 <_malloc_r+0x738>
    2e68:	a180a636 	bltu	r20,r6,3104 <_malloc_r+0x634>
    2e6c:	07000074 	movhi	fp,1
    2e70:	e7253a04 	addi	fp,fp,-27416
    2e74:	e0800017 	ldw	r2,0(fp)
    2e78:	a887883a 	add	r3,r21,r2
    2e7c:	e0c00015 	stw	r3,0(fp)
    2e80:	3500e626 	beq	r6,r20,321c <_malloc_r+0x74c>
    2e84:	b9000017 	ldw	r4,0(r23)
    2e88:	00bfffc4 	movi	r2,-1
    2e8c:	2080ee26 	beq	r4,r2,3248 <_malloc_r+0x778>
    2e90:	a185c83a 	sub	r2,r20,r6
    2e94:	10c5883a 	add	r2,r2,r3
    2e98:	e0800015 	stw	r2,0(fp)
    2e9c:	a0c001cc 	andi	r3,r20,7
    2ea0:	1800bc26 	beq	r3,zero,3194 <_malloc_r+0x6c4>
    2ea4:	a0e9c83a 	sub	r20,r20,r3
    2ea8:	00840204 	movi	r2,4104
    2eac:	a5000204 	addi	r20,r20,8
    2eb0:	10c7c83a 	sub	r3,r2,r3
    2eb4:	a545883a 	add	r2,r20,r21
    2eb8:	1083ffcc 	andi	r2,r2,4095
    2ebc:	18abc83a 	sub	r21,r3,r2
    2ec0:	a80b883a 	mov	r5,r21
    2ec4:	9009883a 	mov	r4,r18
    2ec8:	0003dac0 	call	3dac <_sbrk_r>
    2ecc:	00ffffc4 	movi	r3,-1
    2ed0:	10c0e126 	beq	r2,r3,3258 <_malloc_r+0x788>
    2ed4:	1505c83a 	sub	r2,r2,r20
    2ed8:	1545883a 	add	r2,r2,r21
    2edc:	10800054 	ori	r2,r2,1
    2ee0:	e0c00017 	ldw	r3,0(fp)
    2ee4:	9d000215 	stw	r20,8(r19)
    2ee8:	a0800115 	stw	r2,4(r20)
    2eec:	a8c7883a 	add	r3,r21,r3
    2ef0:	e0c00015 	stw	r3,0(fp)
    2ef4:	84c00e26 	beq	r16,r19,2f30 <_malloc_r+0x460>
    2ef8:	018003c4 	movi	r6,15
    2efc:	3580a72e 	bgeu	r6,r22,319c <_malloc_r+0x6cc>
    2f00:	81400117 	ldw	r5,4(r16)
    2f04:	013ffe04 	movi	r4,-8
    2f08:	b0bffd04 	addi	r2,r22,-12
    2f0c:	1104703a 	and	r2,r2,r4
    2f10:	2900004c 	andi	r4,r5,1
    2f14:	2088b03a 	or	r4,r4,r2
    2f18:	81000115 	stw	r4,4(r16)
    2f1c:	01400144 	movi	r5,5
    2f20:	8089883a 	add	r4,r16,r2
    2f24:	21400115 	stw	r5,4(r4)
    2f28:	21400215 	stw	r5,8(r4)
    2f2c:	3080cd36 	bltu	r6,r2,3264 <_malloc_r+0x794>
    2f30:	00800074 	movhi	r2,1
    2f34:	10a53804 	addi	r2,r2,-27424
    2f38:	11000017 	ldw	r4,0(r2)
    2f3c:	20c0012e 	bgeu	r4,r3,2f44 <_malloc_r+0x474>
    2f40:	10c00015 	stw	r3,0(r2)
    2f44:	00800074 	movhi	r2,1
    2f48:	10a53704 	addi	r2,r2,-27428
    2f4c:	11000017 	ldw	r4,0(r2)
    2f50:	9c000217 	ldw	r16,8(r19)
    2f54:	20c0012e 	bgeu	r4,r3,2f5c <_malloc_r+0x48c>
    2f58:	10c00015 	stw	r3,0(r2)
    2f5c:	80c00117 	ldw	r3,4(r16)
    2f60:	00bfff04 	movi	r2,-4
    2f64:	1886703a 	and	r3,r3,r2
    2f68:	1c45c83a 	sub	r2,r3,r17
    2f6c:	1c400236 	bltu	r3,r17,2f78 <_malloc_r+0x4a8>
    2f70:	00c003c4 	movi	r3,15
    2f74:	18800416 	blt	r3,r2,2f88 <_malloc_r+0x4b8>
    2f78:	9009883a 	mov	r4,r18
    2f7c:	0005b840 	call	5b84 <__malloc_unlock>
    2f80:	0005883a 	mov	r2,zero
    2f84:	003f7b06 	br	2d74 <_gp+0xffff3358>
    2f88:	88c00054 	ori	r3,r17,1
    2f8c:	80c00115 	stw	r3,4(r16)
    2f90:	8463883a 	add	r17,r16,r17
    2f94:	10800054 	ori	r2,r2,1
    2f98:	9c400215 	stw	r17,8(r19)
    2f9c:	88800115 	stw	r2,4(r17)
    2fa0:	9009883a 	mov	r4,r18
    2fa4:	0005b840 	call	5b84 <__malloc_unlock>
    2fa8:	80800204 	addi	r2,r16,8
    2fac:	003f7106 	br	2d74 <_gp+0xffff3358>
    2fb0:	00c00504 	movi	r3,20
    2fb4:	18804a2e 	bgeu	r3,r2,30e0 <_malloc_r+0x610>
    2fb8:	00c01504 	movi	r3,84
    2fbc:	18806e36 	bltu	r3,r2,3178 <_malloc_r+0x6a8>
    2fc0:	8804d33a 	srli	r2,r17,12
    2fc4:	12001bc4 	addi	r8,r2,111
    2fc8:	11c01b84 	addi	r7,r2,110
    2fcc:	4209883a 	add	r4,r8,r8
    2fd0:	003edd06 	br	2b48 <_gp+0xffff312c>
    2fd4:	3804d27a 	srli	r2,r7,9
    2fd8:	00c00104 	movi	r3,4
    2fdc:	1880442e 	bgeu	r3,r2,30f0 <_malloc_r+0x620>
    2fe0:	00c00504 	movi	r3,20
    2fe4:	18808136 	bltu	r3,r2,31ec <_malloc_r+0x71c>
    2fe8:	11401704 	addi	r5,r2,92
    2fec:	10c016c4 	addi	r3,r2,91
    2ff0:	294b883a 	add	r5,r5,r5
    2ff4:	294b883a 	add	r5,r5,r5
    2ff8:	294b883a 	add	r5,r5,r5
    2ffc:	994b883a 	add	r5,r19,r5
    3000:	28800017 	ldw	r2,0(r5)
    3004:	01800034 	movhi	r6,0
    3008:	297ffe04 	addi	r5,r5,-8
    300c:	319d8504 	addi	r6,r6,30228
    3010:	28806526 	beq	r5,r2,31a8 <_malloc_r+0x6d8>
    3014:	01bfff04 	movi	r6,-4
    3018:	10c00117 	ldw	r3,4(r2)
    301c:	1986703a 	and	r3,r3,r6
    3020:	38c0022e 	bgeu	r7,r3,302c <_malloc_r+0x55c>
    3024:	10800217 	ldw	r2,8(r2)
    3028:	28bffb1e 	bne	r5,r2,3018 <_gp+0xffff35fc>
    302c:	11400317 	ldw	r5,12(r2)
    3030:	98c00117 	ldw	r3,4(r19)
    3034:	81400315 	stw	r5,12(r16)
    3038:	80800215 	stw	r2,8(r16)
    303c:	2c000215 	stw	r16,8(r5)
    3040:	14000315 	stw	r16,12(r2)
    3044:	003ef806 	br	2c28 <_gp+0xffff320c>
    3048:	88c00054 	ori	r3,r17,1
    304c:	80c00115 	stw	r3,4(r16)
    3050:	8463883a 	add	r17,r16,r17
    3054:	34400515 	stw	r17,20(r6)
    3058:	34400415 	stw	r17,16(r6)
    305c:	10c00054 	ori	r3,r2,1
    3060:	8a000315 	stw	r8,12(r17)
    3064:	8a000215 	stw	r8,8(r17)
    3068:	88c00115 	stw	r3,4(r17)
    306c:	88a3883a 	add	r17,r17,r2
    3070:	88800015 	stw	r2,0(r17)
    3074:	9009883a 	mov	r4,r18
    3078:	0005b840 	call	5b84 <__malloc_unlock>
    307c:	80800204 	addi	r2,r16,8
    3080:	003f3c06 	br	2d74 <_gp+0xffff3358>
    3084:	30c00117 	ldw	r3,4(r6)
    3088:	003ee706 	br	2c28 <_gp+0xffff320c>
    308c:	5ac00044 	addi	r11,r11,1
    3090:	588000cc 	andi	r2,r11,3
    3094:	31800204 	addi	r6,r6,8
    3098:	103efd1e 	bne	r2,zero,2c90 <_gp+0xffff3274>
    309c:	00002406 	br	3130 <_malloc_r+0x660>
    30a0:	14000317 	ldw	r16,12(r2)
    30a4:	143f251e 	bne	r2,r16,2d3c <_gp+0xffff3320>
    30a8:	21000084 	addi	r4,r4,2
    30ac:	003ebc06 	br	2ba0 <_gp+0xffff3184>
    30b0:	8085883a 	add	r2,r16,r2
    30b4:	10c00117 	ldw	r3,4(r2)
    30b8:	81000317 	ldw	r4,12(r16)
    30bc:	81400217 	ldw	r5,8(r16)
    30c0:	18c00054 	ori	r3,r3,1
    30c4:	10c00115 	stw	r3,4(r2)
    30c8:	29000315 	stw	r4,12(r5)
    30cc:	21400215 	stw	r5,8(r4)
    30d0:	9009883a 	mov	r4,r18
    30d4:	0005b840 	call	5b84 <__malloc_unlock>
    30d8:	80800204 	addi	r2,r16,8
    30dc:	003f2506 	br	2d74 <_gp+0xffff3358>
    30e0:	12001704 	addi	r8,r2,92
    30e4:	11c016c4 	addi	r7,r2,91
    30e8:	4209883a 	add	r4,r8,r8
    30ec:	003e9606 	br	2b48 <_gp+0xffff312c>
    30f0:	3804d1ba 	srli	r2,r7,6
    30f4:	11400e44 	addi	r5,r2,57
    30f8:	10c00e04 	addi	r3,r2,56
    30fc:	294b883a 	add	r5,r5,r5
    3100:	003fbc06 	br	2ff4 <_gp+0xffff35d8>
    3104:	84ff5926 	beq	r16,r19,2e6c <_gp+0xffff3450>
    3108:	00800034 	movhi	r2,0
    310c:	109d8504 	addi	r2,r2,30228
    3110:	14000217 	ldw	r16,8(r2)
    3114:	00bfff04 	movi	r2,-4
    3118:	80c00117 	ldw	r3,4(r16)
    311c:	1886703a 	and	r3,r3,r2
    3120:	003f9106 	br	2f68 <_gp+0xffff354c>
    3124:	60800217 	ldw	r2,8(r12)
    3128:	213fffc4 	addi	r4,r4,-1
    312c:	1300651e 	bne	r2,r12,32c4 <_malloc_r+0x7f4>
    3130:	208000cc 	andi	r2,r4,3
    3134:	633ffe04 	addi	r12,r12,-8
    3138:	103ffa1e 	bne	r2,zero,3124 <_gp+0xffff3708>
    313c:	98800117 	ldw	r2,4(r19)
    3140:	0146303a 	nor	r3,zero,r5
    3144:	1884703a 	and	r2,r3,r2
    3148:	98800115 	stw	r2,4(r19)
    314c:	294b883a 	add	r5,r5,r5
    3150:	117f2836 	bltu	r2,r5,2df4 <_gp+0xffff33d8>
    3154:	283f2726 	beq	r5,zero,2df4 <_gp+0xffff33d8>
    3158:	2886703a 	and	r3,r5,r2
    315c:	5809883a 	mov	r4,r11
    3160:	183ec31e 	bne	r3,zero,2c70 <_gp+0xffff3254>
    3164:	294b883a 	add	r5,r5,r5
    3168:	2886703a 	and	r3,r5,r2
    316c:	21000104 	addi	r4,r4,4
    3170:	183ffc26 	beq	r3,zero,3164 <_gp+0xffff3748>
    3174:	003ebe06 	br	2c70 <_gp+0xffff3254>
    3178:	00c05504 	movi	r3,340
    317c:	18801236 	bltu	r3,r2,31c8 <_malloc_r+0x6f8>
    3180:	8804d3fa 	srli	r2,r17,15
    3184:	12001e04 	addi	r8,r2,120
    3188:	11c01dc4 	addi	r7,r2,119
    318c:	4209883a 	add	r4,r8,r8
    3190:	003e6d06 	br	2b48 <_gp+0xffff312c>
    3194:	00c40004 	movi	r3,4096
    3198:	003f4606 	br	2eb4 <_gp+0xffff3498>
    319c:	00800044 	movi	r2,1
    31a0:	a0800115 	stw	r2,4(r20)
    31a4:	003f7406 	br	2f78 <_gp+0xffff355c>
    31a8:	1805d0ba 	srai	r2,r3,2
    31ac:	01c00044 	movi	r7,1
    31b0:	30c00117 	ldw	r3,4(r6)
    31b4:	388e983a 	sll	r7,r7,r2
    31b8:	2805883a 	mov	r2,r5
    31bc:	38c6b03a 	or	r3,r7,r3
    31c0:	30c00115 	stw	r3,4(r6)
    31c4:	003f9b06 	br	3034 <_gp+0xffff3618>
    31c8:	00c15504 	movi	r3,1364
    31cc:	18801a36 	bltu	r3,r2,3238 <_malloc_r+0x768>
    31d0:	8804d4ba 	srli	r2,r17,18
    31d4:	12001f44 	addi	r8,r2,125
    31d8:	11c01f04 	addi	r7,r2,124
    31dc:	4209883a 	add	r4,r8,r8
    31e0:	003e5906 	br	2b48 <_gp+0xffff312c>
    31e4:	ad400404 	addi	r21,r21,16
    31e8:	003f1706 	br	2e48 <_gp+0xffff342c>
    31ec:	00c01504 	movi	r3,84
    31f0:	18802336 	bltu	r3,r2,3280 <_malloc_r+0x7b0>
    31f4:	3804d33a 	srli	r2,r7,12
    31f8:	11401bc4 	addi	r5,r2,111
    31fc:	10c01b84 	addi	r3,r2,110
    3200:	294b883a 	add	r5,r5,r5
    3204:	003f7b06 	br	2ff4 <_gp+0xffff35d8>
    3208:	9c000217 	ldw	r16,8(r19)
    320c:	00bfff04 	movi	r2,-4
    3210:	80c00117 	ldw	r3,4(r16)
    3214:	1886703a 	and	r3,r3,r2
    3218:	003f5306 	br	2f68 <_gp+0xffff354c>
    321c:	3083ffcc 	andi	r2,r6,4095
    3220:	103f181e 	bne	r2,zero,2e84 <_gp+0xffff3468>
    3224:	99000217 	ldw	r4,8(r19)
    3228:	b545883a 	add	r2,r22,r21
    322c:	10800054 	ori	r2,r2,1
    3230:	20800115 	stw	r2,4(r4)
    3234:	003f3e06 	br	2f30 <_gp+0xffff3514>
    3238:	01003f84 	movi	r4,254
    323c:	02001fc4 	movi	r8,127
    3240:	01c01f84 	movi	r7,126
    3244:	003e4006 	br	2b48 <_gp+0xffff312c>
    3248:	00800034 	movhi	r2,0
    324c:	109e9204 	addi	r2,r2,31304
    3250:	15000015 	stw	r20,0(r2)
    3254:	003f1106 	br	2e9c <_gp+0xffff3480>
    3258:	00800044 	movi	r2,1
    325c:	002b883a 	mov	r21,zero
    3260:	003f1f06 	br	2ee0 <_gp+0xffff34c4>
    3264:	81400204 	addi	r5,r16,8
    3268:	9009883a 	mov	r4,r18
    326c:	0004a400 	call	4a40 <_free_r>
    3270:	00800074 	movhi	r2,1
    3274:	10a53a04 	addi	r2,r2,-27416
    3278:	10c00017 	ldw	r3,0(r2)
    327c:	003f2c06 	br	2f30 <_gp+0xffff3514>
    3280:	00c05504 	movi	r3,340
    3284:	18800536 	bltu	r3,r2,329c <_malloc_r+0x7cc>
    3288:	3804d3fa 	srli	r2,r7,15
    328c:	11401e04 	addi	r5,r2,120
    3290:	10c01dc4 	addi	r3,r2,119
    3294:	294b883a 	add	r5,r5,r5
    3298:	003f5606 	br	2ff4 <_gp+0xffff35d8>
    329c:	00c15504 	movi	r3,1364
    32a0:	18800536 	bltu	r3,r2,32b8 <_malloc_r+0x7e8>
    32a4:	3804d4ba 	srli	r2,r7,18
    32a8:	11401f44 	addi	r5,r2,125
    32ac:	10c01f04 	addi	r3,r2,124
    32b0:	294b883a 	add	r5,r5,r5
    32b4:	003f4f06 	br	2ff4 <_gp+0xffff35d8>
    32b8:	01403f84 	movi	r5,254
    32bc:	00c01f84 	movi	r3,126
    32c0:	003f4c06 	br	2ff4 <_gp+0xffff35d8>
    32c4:	98800117 	ldw	r2,4(r19)
    32c8:	003fa006 	br	314c <_gp+0xffff3730>
    32cc:	8808d0fa 	srli	r4,r17,3
    32d0:	20800044 	addi	r2,r4,1
    32d4:	1085883a 	add	r2,r2,r2
    32d8:	003e9006 	br	2d1c <_gp+0xffff3300>

000032dc <memchr>:
    32dc:	208000cc 	andi	r2,r4,3
    32e0:	280f883a 	mov	r7,r5
    32e4:	10003426 	beq	r2,zero,33b8 <memchr+0xdc>
    32e8:	30bfffc4 	addi	r2,r6,-1
    32ec:	30001a26 	beq	r6,zero,3358 <memchr+0x7c>
    32f0:	20c00003 	ldbu	r3,0(r4)
    32f4:	29803fcc 	andi	r6,r5,255
    32f8:	30c0051e 	bne	r6,r3,3310 <memchr+0x34>
    32fc:	00001806 	br	3360 <memchr+0x84>
    3300:	10001526 	beq	r2,zero,3358 <memchr+0x7c>
    3304:	20c00003 	ldbu	r3,0(r4)
    3308:	10bfffc4 	addi	r2,r2,-1
    330c:	30c01426 	beq	r6,r3,3360 <memchr+0x84>
    3310:	21000044 	addi	r4,r4,1
    3314:	20c000cc 	andi	r3,r4,3
    3318:	183ff91e 	bne	r3,zero,3300 <_gp+0xffff38e4>
    331c:	020000c4 	movi	r8,3
    3320:	40801136 	bltu	r8,r2,3368 <memchr+0x8c>
    3324:	10000c26 	beq	r2,zero,3358 <memchr+0x7c>
    3328:	20c00003 	ldbu	r3,0(r4)
    332c:	29403fcc 	andi	r5,r5,255
    3330:	28c00b26 	beq	r5,r3,3360 <memchr+0x84>
    3334:	20c00044 	addi	r3,r4,1
    3338:	39803fcc 	andi	r6,r7,255
    333c:	2089883a 	add	r4,r4,r2
    3340:	00000306 	br	3350 <memchr+0x74>
    3344:	18c00044 	addi	r3,r3,1
    3348:	197fffc3 	ldbu	r5,-1(r3)
    334c:	31400526 	beq	r6,r5,3364 <memchr+0x88>
    3350:	1805883a 	mov	r2,r3
    3354:	20fffb1e 	bne	r4,r3,3344 <_gp+0xffff3928>
    3358:	0005883a 	mov	r2,zero
    335c:	f800283a 	ret
    3360:	2005883a 	mov	r2,r4
    3364:	f800283a 	ret
    3368:	28c03fcc 	andi	r3,r5,255
    336c:	1812923a 	slli	r9,r3,8
    3370:	02ffbff4 	movhi	r11,65279
    3374:	02a02074 	movhi	r10,32897
    3378:	48d2b03a 	or	r9,r9,r3
    337c:	4806943a 	slli	r3,r9,16
    3380:	5affbfc4 	addi	r11,r11,-257
    3384:	52a02004 	addi	r10,r10,-32640
    3388:	48d2b03a 	or	r9,r9,r3
    338c:	20c00017 	ldw	r3,0(r4)
    3390:	48c6f03a 	xor	r3,r9,r3
    3394:	1acd883a 	add	r6,r3,r11
    3398:	00c6303a 	nor	r3,zero,r3
    339c:	30c6703a 	and	r3,r6,r3
    33a0:	1a86703a 	and	r3,r3,r10
    33a4:	183fe01e 	bne	r3,zero,3328 <_gp+0xffff390c>
    33a8:	10bfff04 	addi	r2,r2,-4
    33ac:	21000104 	addi	r4,r4,4
    33b0:	40bff636 	bltu	r8,r2,338c <_gp+0xffff3970>
    33b4:	003fdb06 	br	3324 <_gp+0xffff3908>
    33b8:	3005883a 	mov	r2,r6
    33bc:	003fd706 	br	331c <_gp+0xffff3900>

000033c0 <memcmp>:
    33c0:	01c000c4 	movi	r7,3
    33c4:	3980192e 	bgeu	r7,r6,342c <memcmp+0x6c>
    33c8:	2144b03a 	or	r2,r4,r5
    33cc:	11c4703a 	and	r2,r2,r7
    33d0:	10000f26 	beq	r2,zero,3410 <memcmp+0x50>
    33d4:	20800003 	ldbu	r2,0(r4)
    33d8:	28c00003 	ldbu	r3,0(r5)
    33dc:	10c0151e 	bne	r2,r3,3434 <memcmp+0x74>
    33e0:	31bfff84 	addi	r6,r6,-2
    33e4:	01ffffc4 	movi	r7,-1
    33e8:	00000406 	br	33fc <memcmp+0x3c>
    33ec:	20800003 	ldbu	r2,0(r4)
    33f0:	28c00003 	ldbu	r3,0(r5)
    33f4:	31bfffc4 	addi	r6,r6,-1
    33f8:	10c00e1e 	bne	r2,r3,3434 <memcmp+0x74>
    33fc:	21000044 	addi	r4,r4,1
    3400:	29400044 	addi	r5,r5,1
    3404:	31fff91e 	bne	r6,r7,33ec <_gp+0xffff39d0>
    3408:	0005883a 	mov	r2,zero
    340c:	f800283a 	ret
    3410:	20c00017 	ldw	r3,0(r4)
    3414:	28800017 	ldw	r2,0(r5)
    3418:	18bfee1e 	bne	r3,r2,33d4 <_gp+0xffff39b8>
    341c:	31bfff04 	addi	r6,r6,-4
    3420:	21000104 	addi	r4,r4,4
    3424:	29400104 	addi	r5,r5,4
    3428:	39bff936 	bltu	r7,r6,3410 <_gp+0xffff39f4>
    342c:	303fe91e 	bne	r6,zero,33d4 <_gp+0xffff39b8>
    3430:	003ff506 	br	3408 <_gp+0xffff39ec>
    3434:	10c5c83a 	sub	r2,r2,r3
    3438:	f800283a 	ret

0000343c <memcpy>:
    343c:	defffd04 	addi	sp,sp,-12
    3440:	dfc00215 	stw	ra,8(sp)
    3444:	dc400115 	stw	r17,4(sp)
    3448:	dc000015 	stw	r16,0(sp)
    344c:	00c003c4 	movi	r3,15
    3450:	2005883a 	mov	r2,r4
    3454:	1980452e 	bgeu	r3,r6,356c <memcpy+0x130>
    3458:	2906b03a 	or	r3,r5,r4
    345c:	18c000cc 	andi	r3,r3,3
    3460:	1800441e 	bne	r3,zero,3574 <memcpy+0x138>
    3464:	347ffc04 	addi	r17,r6,-16
    3468:	8822d13a 	srli	r17,r17,4
    346c:	28c00104 	addi	r3,r5,4
    3470:	23400104 	addi	r13,r4,4
    3474:	8820913a 	slli	r16,r17,4
    3478:	2b000204 	addi	r12,r5,8
    347c:	22c00204 	addi	r11,r4,8
    3480:	84000504 	addi	r16,r16,20
    3484:	2a800304 	addi	r10,r5,12
    3488:	22400304 	addi	r9,r4,12
    348c:	2c21883a 	add	r16,r5,r16
    3490:	2811883a 	mov	r8,r5
    3494:	200f883a 	mov	r7,r4
    3498:	41000017 	ldw	r4,0(r8)
    349c:	1fc00017 	ldw	ra,0(r3)
    34a0:	63c00017 	ldw	r15,0(r12)
    34a4:	39000015 	stw	r4,0(r7)
    34a8:	53800017 	ldw	r14,0(r10)
    34ac:	6fc00015 	stw	ra,0(r13)
    34b0:	5bc00015 	stw	r15,0(r11)
    34b4:	4b800015 	stw	r14,0(r9)
    34b8:	18c00404 	addi	r3,r3,16
    34bc:	39c00404 	addi	r7,r7,16
    34c0:	42000404 	addi	r8,r8,16
    34c4:	6b400404 	addi	r13,r13,16
    34c8:	63000404 	addi	r12,r12,16
    34cc:	5ac00404 	addi	r11,r11,16
    34d0:	52800404 	addi	r10,r10,16
    34d4:	4a400404 	addi	r9,r9,16
    34d8:	1c3fef1e 	bne	r3,r16,3498 <_gp+0xffff3a7c>
    34dc:	89c00044 	addi	r7,r17,1
    34e0:	380e913a 	slli	r7,r7,4
    34e4:	310003cc 	andi	r4,r6,15
    34e8:	02c000c4 	movi	r11,3
    34ec:	11c7883a 	add	r3,r2,r7
    34f0:	29cb883a 	add	r5,r5,r7
    34f4:	5900212e 	bgeu	r11,r4,357c <memcpy+0x140>
    34f8:	1813883a 	mov	r9,r3
    34fc:	2811883a 	mov	r8,r5
    3500:	200f883a 	mov	r7,r4
    3504:	42800017 	ldw	r10,0(r8)
    3508:	4a400104 	addi	r9,r9,4
    350c:	39ffff04 	addi	r7,r7,-4
    3510:	4abfff15 	stw	r10,-4(r9)
    3514:	42000104 	addi	r8,r8,4
    3518:	59fffa36 	bltu	r11,r7,3504 <_gp+0xffff3ae8>
    351c:	213fff04 	addi	r4,r4,-4
    3520:	2008d0ba 	srli	r4,r4,2
    3524:	318000cc 	andi	r6,r6,3
    3528:	21000044 	addi	r4,r4,1
    352c:	2109883a 	add	r4,r4,r4
    3530:	2109883a 	add	r4,r4,r4
    3534:	1907883a 	add	r3,r3,r4
    3538:	290b883a 	add	r5,r5,r4
    353c:	30000626 	beq	r6,zero,3558 <memcpy+0x11c>
    3540:	198d883a 	add	r6,r3,r6
    3544:	29c00003 	ldbu	r7,0(r5)
    3548:	18c00044 	addi	r3,r3,1
    354c:	29400044 	addi	r5,r5,1
    3550:	19ffffc5 	stb	r7,-1(r3)
    3554:	19bffb1e 	bne	r3,r6,3544 <_gp+0xffff3b28>
    3558:	dfc00217 	ldw	ra,8(sp)
    355c:	dc400117 	ldw	r17,4(sp)
    3560:	dc000017 	ldw	r16,0(sp)
    3564:	dec00304 	addi	sp,sp,12
    3568:	f800283a 	ret
    356c:	2007883a 	mov	r3,r4
    3570:	003ff206 	br	353c <_gp+0xffff3b20>
    3574:	2007883a 	mov	r3,r4
    3578:	003ff106 	br	3540 <_gp+0xffff3b24>
    357c:	200d883a 	mov	r6,r4
    3580:	003fee06 	br	353c <_gp+0xffff3b20>

00003584 <memmove>:
    3584:	2005883a 	mov	r2,r4
    3588:	29000b2e 	bgeu	r5,r4,35b8 <memmove+0x34>
    358c:	298f883a 	add	r7,r5,r6
    3590:	21c0092e 	bgeu	r4,r7,35b8 <memmove+0x34>
    3594:	2187883a 	add	r3,r4,r6
    3598:	198bc83a 	sub	r5,r3,r6
    359c:	30004826 	beq	r6,zero,36c0 <memmove+0x13c>
    35a0:	39ffffc4 	addi	r7,r7,-1
    35a4:	39000003 	ldbu	r4,0(r7)
    35a8:	18ffffc4 	addi	r3,r3,-1
    35ac:	19000005 	stb	r4,0(r3)
    35b0:	28fffb1e 	bne	r5,r3,35a0 <_gp+0xffff3b84>
    35b4:	f800283a 	ret
    35b8:	00c003c4 	movi	r3,15
    35bc:	1980412e 	bgeu	r3,r6,36c4 <memmove+0x140>
    35c0:	2886b03a 	or	r3,r5,r2
    35c4:	18c000cc 	andi	r3,r3,3
    35c8:	1800401e 	bne	r3,zero,36cc <memmove+0x148>
    35cc:	33fffc04 	addi	r15,r6,-16
    35d0:	781ed13a 	srli	r15,r15,4
    35d4:	28c00104 	addi	r3,r5,4
    35d8:	13400104 	addi	r13,r2,4
    35dc:	781c913a 	slli	r14,r15,4
    35e0:	2b000204 	addi	r12,r5,8
    35e4:	12c00204 	addi	r11,r2,8
    35e8:	73800504 	addi	r14,r14,20
    35ec:	2a800304 	addi	r10,r5,12
    35f0:	12400304 	addi	r9,r2,12
    35f4:	2b9d883a 	add	r14,r5,r14
    35f8:	2811883a 	mov	r8,r5
    35fc:	100f883a 	mov	r7,r2
    3600:	41000017 	ldw	r4,0(r8)
    3604:	39c00404 	addi	r7,r7,16
    3608:	18c00404 	addi	r3,r3,16
    360c:	393ffc15 	stw	r4,-16(r7)
    3610:	193ffc17 	ldw	r4,-16(r3)
    3614:	6b400404 	addi	r13,r13,16
    3618:	5ac00404 	addi	r11,r11,16
    361c:	693ffc15 	stw	r4,-16(r13)
    3620:	61000017 	ldw	r4,0(r12)
    3624:	4a400404 	addi	r9,r9,16
    3628:	42000404 	addi	r8,r8,16
    362c:	593ffc15 	stw	r4,-16(r11)
    3630:	51000017 	ldw	r4,0(r10)
    3634:	63000404 	addi	r12,r12,16
    3638:	52800404 	addi	r10,r10,16
    363c:	493ffc15 	stw	r4,-16(r9)
    3640:	1bbfef1e 	bne	r3,r14,3600 <_gp+0xffff3be4>
    3644:	79000044 	addi	r4,r15,1
    3648:	2008913a 	slli	r4,r4,4
    364c:	328003cc 	andi	r10,r6,15
    3650:	02c000c4 	movi	r11,3
    3654:	1107883a 	add	r3,r2,r4
    3658:	290b883a 	add	r5,r5,r4
    365c:	5a801e2e 	bgeu	r11,r10,36d8 <memmove+0x154>
    3660:	1813883a 	mov	r9,r3
    3664:	2811883a 	mov	r8,r5
    3668:	500f883a 	mov	r7,r10
    366c:	41000017 	ldw	r4,0(r8)
    3670:	4a400104 	addi	r9,r9,4
    3674:	39ffff04 	addi	r7,r7,-4
    3678:	493fff15 	stw	r4,-4(r9)
    367c:	42000104 	addi	r8,r8,4
    3680:	59fffa36 	bltu	r11,r7,366c <_gp+0xffff3c50>
    3684:	513fff04 	addi	r4,r10,-4
    3688:	2008d0ba 	srli	r4,r4,2
    368c:	318000cc 	andi	r6,r6,3
    3690:	21000044 	addi	r4,r4,1
    3694:	2109883a 	add	r4,r4,r4
    3698:	2109883a 	add	r4,r4,r4
    369c:	1907883a 	add	r3,r3,r4
    36a0:	290b883a 	add	r5,r5,r4
    36a4:	30000b26 	beq	r6,zero,36d4 <memmove+0x150>
    36a8:	198d883a 	add	r6,r3,r6
    36ac:	29c00003 	ldbu	r7,0(r5)
    36b0:	18c00044 	addi	r3,r3,1
    36b4:	29400044 	addi	r5,r5,1
    36b8:	19ffffc5 	stb	r7,-1(r3)
    36bc:	19bffb1e 	bne	r3,r6,36ac <_gp+0xffff3c90>
    36c0:	f800283a 	ret
    36c4:	1007883a 	mov	r3,r2
    36c8:	003ff606 	br	36a4 <_gp+0xffff3c88>
    36cc:	1007883a 	mov	r3,r2
    36d0:	003ff506 	br	36a8 <_gp+0xffff3c8c>
    36d4:	f800283a 	ret
    36d8:	500d883a 	mov	r6,r10
    36dc:	003ff106 	br	36a4 <_gp+0xffff3c88>

000036e0 <_putc_r>:
    36e0:	defffc04 	addi	sp,sp,-16
    36e4:	dc000215 	stw	r16,8(sp)
    36e8:	dfc00315 	stw	ra,12(sp)
    36ec:	2021883a 	mov	r16,r4
    36f0:	20000226 	beq	r4,zero,36fc <_putc_r+0x1c>
    36f4:	20800e17 	ldw	r2,56(r4)
    36f8:	10001b26 	beq	r2,zero,3768 <_putc_r+0x88>
    36fc:	30800217 	ldw	r2,8(r6)
    3700:	10bfffc4 	addi	r2,r2,-1
    3704:	30800215 	stw	r2,8(r6)
    3708:	10000a16 	blt	r2,zero,3734 <_putc_r+0x54>
    370c:	30800017 	ldw	r2,0(r6)
    3710:	11400005 	stb	r5,0(r2)
    3714:	30800017 	ldw	r2,0(r6)
    3718:	10c00044 	addi	r3,r2,1
    371c:	30c00015 	stw	r3,0(r6)
    3720:	10800003 	ldbu	r2,0(r2)
    3724:	dfc00317 	ldw	ra,12(sp)
    3728:	dc000217 	ldw	r16,8(sp)
    372c:	dec00404 	addi	sp,sp,16
    3730:	f800283a 	ret
    3734:	30c00617 	ldw	r3,24(r6)
    3738:	10c00616 	blt	r2,r3,3754 <_putc_r+0x74>
    373c:	30800017 	ldw	r2,0(r6)
    3740:	00c00284 	movi	r3,10
    3744:	11400005 	stb	r5,0(r2)
    3748:	30800017 	ldw	r2,0(r6)
    374c:	11400003 	ldbu	r5,0(r2)
    3750:	28fff11e 	bne	r5,r3,3718 <_gp+0xffff3cfc>
    3754:	8009883a 	mov	r4,r16
    3758:	dfc00317 	ldw	ra,12(sp)
    375c:	dc000217 	ldw	r16,8(sp)
    3760:	dec00404 	addi	sp,sp,16
    3764:	0003e981 	jmpi	3e98 <__swbuf_r>
    3768:	d9400015 	stw	r5,0(sp)
    376c:	d9800115 	stw	r6,4(sp)
    3770:	00048cc0 	call	48cc <__sinit>
    3774:	d9800117 	ldw	r6,4(sp)
    3778:	d9400017 	ldw	r5,0(sp)
    377c:	003fdf06 	br	36fc <_gp+0xffff3ce0>

00003780 <putc>:
    3780:	00800034 	movhi	r2,0
    3784:	defffc04 	addi	sp,sp,-16
    3788:	109e9104 	addi	r2,r2,31300
    378c:	dc000115 	stw	r16,4(sp)
    3790:	14000017 	ldw	r16,0(r2)
    3794:	dc400215 	stw	r17,8(sp)
    3798:	dfc00315 	stw	ra,12(sp)
    379c:	2023883a 	mov	r17,r4
    37a0:	80000226 	beq	r16,zero,37ac <putc+0x2c>
    37a4:	80800e17 	ldw	r2,56(r16)
    37a8:	10001a26 	beq	r2,zero,3814 <putc+0x94>
    37ac:	28800217 	ldw	r2,8(r5)
    37b0:	10bfffc4 	addi	r2,r2,-1
    37b4:	28800215 	stw	r2,8(r5)
    37b8:	10000b16 	blt	r2,zero,37e8 <putc+0x68>
    37bc:	28800017 	ldw	r2,0(r5)
    37c0:	14400005 	stb	r17,0(r2)
    37c4:	28800017 	ldw	r2,0(r5)
    37c8:	10c00044 	addi	r3,r2,1
    37cc:	28c00015 	stw	r3,0(r5)
    37d0:	10800003 	ldbu	r2,0(r2)
    37d4:	dfc00317 	ldw	ra,12(sp)
    37d8:	dc400217 	ldw	r17,8(sp)
    37dc:	dc000117 	ldw	r16,4(sp)
    37e0:	dec00404 	addi	sp,sp,16
    37e4:	f800283a 	ret
    37e8:	28c00617 	ldw	r3,24(r5)
    37ec:	10c00e16 	blt	r2,r3,3828 <putc+0xa8>
    37f0:	28800017 	ldw	r2,0(r5)
    37f4:	01000284 	movi	r4,10
    37f8:	14400005 	stb	r17,0(r2)
    37fc:	28800017 	ldw	r2,0(r5)
    3800:	10c00003 	ldbu	r3,0(r2)
    3804:	193ff01e 	bne	r3,r4,37c8 <_gp+0xffff3dac>
    3808:	280d883a 	mov	r6,r5
    380c:	180b883a 	mov	r5,r3
    3810:	00000706 	br	3830 <putc+0xb0>
    3814:	8009883a 	mov	r4,r16
    3818:	d9400015 	stw	r5,0(sp)
    381c:	00048cc0 	call	48cc <__sinit>
    3820:	d9400017 	ldw	r5,0(sp)
    3824:	003fe106 	br	37ac <_gp+0xffff3d90>
    3828:	280d883a 	mov	r6,r5
    382c:	880b883a 	mov	r5,r17
    3830:	8009883a 	mov	r4,r16
    3834:	dfc00317 	ldw	ra,12(sp)
    3838:	dc400217 	ldw	r17,8(sp)
    383c:	dc000117 	ldw	r16,4(sp)
    3840:	dec00404 	addi	sp,sp,16
    3844:	0003e981 	jmpi	3e98 <__swbuf_r>

00003848 <_realloc_r>:
    3848:	defff604 	addi	sp,sp,-40
    384c:	dc400115 	stw	r17,4(sp)
    3850:	dfc00915 	stw	ra,36(sp)
    3854:	df000815 	stw	fp,32(sp)
    3858:	ddc00715 	stw	r23,28(sp)
    385c:	dd800615 	stw	r22,24(sp)
    3860:	dd400515 	stw	r21,20(sp)
    3864:	dd000415 	stw	r20,16(sp)
    3868:	dcc00315 	stw	r19,12(sp)
    386c:	dc800215 	stw	r18,8(sp)
    3870:	dc000015 	stw	r16,0(sp)
    3874:	3023883a 	mov	r17,r6
    3878:	2800b626 	beq	r5,zero,3b54 <_realloc_r+0x30c>
    387c:	2829883a 	mov	r20,r5
    3880:	2025883a 	mov	r18,r4
    3884:	0005b600 	call	5b60 <__malloc_lock>
    3888:	a0ffff17 	ldw	r3,-4(r20)
    388c:	043fff04 	movi	r16,-4
    3890:	888002c4 	addi	r2,r17,11
    3894:	01000584 	movi	r4,22
    3898:	a57ffe04 	addi	r21,r20,-8
    389c:	1c20703a 	and	r16,r3,r16
    38a0:	2080332e 	bgeu	r4,r2,3970 <_realloc_r+0x128>
    38a4:	05bffe04 	movi	r22,-8
    38a8:	15ac703a 	and	r22,r2,r22
    38ac:	b005883a 	mov	r2,r22
    38b0:	b0005716 	blt	r22,zero,3a10 <_realloc_r+0x1c8>
    38b4:	b4405636 	bltu	r22,r17,3a10 <_realloc_r+0x1c8>
    38b8:	8080300e 	bge	r16,r2,397c <_realloc_r+0x134>
    38bc:	07000034 	movhi	fp,0
    38c0:	e71d8504 	addi	fp,fp,30228
    38c4:	e2000217 	ldw	r8,8(fp)
    38c8:	ac09883a 	add	r4,r21,r16
    38cc:	22006126 	beq	r4,r8,3a54 <_realloc_r+0x20c>
    38d0:	22400117 	ldw	r9,4(r4)
    38d4:	01ffff84 	movi	r7,-2
    38d8:	49ce703a 	and	r7,r9,r7
    38dc:	21cf883a 	add	r7,r4,r7
    38e0:	39800117 	ldw	r6,4(r7)
    38e4:	3180004c 	andi	r6,r6,1
    38e8:	30003e26 	beq	r6,zero,39e4 <_realloc_r+0x19c>
    38ec:	18c0004c 	andi	r3,r3,1
    38f0:	18008126 	beq	r3,zero,3af8 <_realloc_r+0x2b0>
    38f4:	880b883a 	mov	r5,r17
    38f8:	9009883a 	mov	r4,r18
    38fc:	0002ad00 	call	2ad0 <_malloc_r>
    3900:	1023883a 	mov	r17,r2
    3904:	10011e26 	beq	r2,zero,3d80 <_realloc_r+0x538>
    3908:	a0ffff17 	ldw	r3,-4(r20)
    390c:	113ffe04 	addi	r4,r2,-8
    3910:	00bfff84 	movi	r2,-2
    3914:	1884703a 	and	r2,r3,r2
    3918:	a885883a 	add	r2,r21,r2
    391c:	2080ee26 	beq	r4,r2,3cd8 <_realloc_r+0x490>
    3920:	81bfff04 	addi	r6,r16,-4
    3924:	00800904 	movi	r2,36
    3928:	1180b836 	bltu	r2,r6,3c0c <_realloc_r+0x3c4>
    392c:	00c004c4 	movi	r3,19
    3930:	19809536 	bltu	r3,r6,3b88 <_realloc_r+0x340>
    3934:	8805883a 	mov	r2,r17
    3938:	a007883a 	mov	r3,r20
    393c:	19000017 	ldw	r4,0(r3)
    3940:	11000015 	stw	r4,0(r2)
    3944:	19000117 	ldw	r4,4(r3)
    3948:	11000115 	stw	r4,4(r2)
    394c:	18c00217 	ldw	r3,8(r3)
    3950:	10c00215 	stw	r3,8(r2)
    3954:	a00b883a 	mov	r5,r20
    3958:	9009883a 	mov	r4,r18
    395c:	0004a400 	call	4a40 <_free_r>
    3960:	9009883a 	mov	r4,r18
    3964:	0005b840 	call	5b84 <__malloc_unlock>
    3968:	8805883a 	mov	r2,r17
    396c:	00001106 	br	39b4 <_realloc_r+0x16c>
    3970:	00800404 	movi	r2,16
    3974:	102d883a 	mov	r22,r2
    3978:	003fce06 	br	38b4 <_gp+0xffff3e98>
    397c:	a023883a 	mov	r17,r20
    3980:	858fc83a 	sub	r7,r16,r22
    3984:	008003c4 	movi	r2,15
    3988:	18c0004c 	andi	r3,r3,1
    398c:	11c02436 	bltu	r2,r7,3a20 <_realloc_r+0x1d8>
    3990:	1c06b03a 	or	r3,r3,r16
    3994:	a8c00115 	stw	r3,4(r21)
    3998:	ac21883a 	add	r16,r21,r16
    399c:	80800117 	ldw	r2,4(r16)
    39a0:	10800054 	ori	r2,r2,1
    39a4:	80800115 	stw	r2,4(r16)
    39a8:	9009883a 	mov	r4,r18
    39ac:	0005b840 	call	5b84 <__malloc_unlock>
    39b0:	8805883a 	mov	r2,r17
    39b4:	dfc00917 	ldw	ra,36(sp)
    39b8:	df000817 	ldw	fp,32(sp)
    39bc:	ddc00717 	ldw	r23,28(sp)
    39c0:	dd800617 	ldw	r22,24(sp)
    39c4:	dd400517 	ldw	r21,20(sp)
    39c8:	dd000417 	ldw	r20,16(sp)
    39cc:	dcc00317 	ldw	r19,12(sp)
    39d0:	dc800217 	ldw	r18,8(sp)
    39d4:	dc400117 	ldw	r17,4(sp)
    39d8:	dc000017 	ldw	r16,0(sp)
    39dc:	dec00a04 	addi	sp,sp,40
    39e0:	f800283a 	ret
    39e4:	017fff04 	movi	r5,-4
    39e8:	494a703a 	and	r5,r9,r5
    39ec:	814d883a 	add	r6,r16,r5
    39f0:	30801e16 	blt	r6,r2,3a6c <_realloc_r+0x224>
    39f4:	20800317 	ldw	r2,12(r4)
    39f8:	21000217 	ldw	r4,8(r4)
    39fc:	a023883a 	mov	r17,r20
    3a00:	3021883a 	mov	r16,r6
    3a04:	20800315 	stw	r2,12(r4)
    3a08:	11000215 	stw	r4,8(r2)
    3a0c:	003fdc06 	br	3980 <_gp+0xffff3f64>
    3a10:	00800304 	movi	r2,12
    3a14:	90800015 	stw	r2,0(r18)
    3a18:	0005883a 	mov	r2,zero
    3a1c:	003fe506 	br	39b4 <_gp+0xffff3f98>
    3a20:	1d86b03a 	or	r3,r3,r22
    3a24:	a8c00115 	stw	r3,4(r21)
    3a28:	ad8b883a 	add	r5,r21,r22
    3a2c:	38c00054 	ori	r3,r7,1
    3a30:	28c00115 	stw	r3,4(r5)
    3a34:	29cf883a 	add	r7,r5,r7
    3a38:	38c00117 	ldw	r3,4(r7)
    3a3c:	29400204 	addi	r5,r5,8
    3a40:	9009883a 	mov	r4,r18
    3a44:	18800054 	ori	r2,r3,1
    3a48:	38800115 	stw	r2,4(r7)
    3a4c:	0004a400 	call	4a40 <_free_r>
    3a50:	003fd506 	br	39a8 <_gp+0xffff3f8c>
    3a54:	21c00117 	ldw	r7,4(r4)
    3a58:	017fff04 	movi	r5,-4
    3a5c:	b1800404 	addi	r6,r22,16
    3a60:	394a703a 	and	r5,r7,r5
    3a64:	814f883a 	add	r7,r16,r5
    3a68:	39805b0e 	bge	r7,r6,3bd8 <_realloc_r+0x390>
    3a6c:	18c0004c 	andi	r3,r3,1
    3a70:	183fa01e 	bne	r3,zero,38f4 <_gp+0xffff3ed8>
    3a74:	a4fffe17 	ldw	r19,-8(r20)
    3a78:	00ffff04 	movi	r3,-4
    3a7c:	ace7c83a 	sub	r19,r21,r19
    3a80:	99800117 	ldw	r6,4(r19)
    3a84:	30c6703a 	and	r3,r6,r3
    3a88:	20002026 	beq	r4,zero,3b0c <_realloc_r+0x2c4>
    3a8c:	80ef883a 	add	r23,r16,r3
    3a90:	b96f883a 	add	r23,r23,r5
    3a94:	22006126 	beq	r4,r8,3c1c <_realloc_r+0x3d4>
    3a98:	b8801c16 	blt	r23,r2,3b0c <_realloc_r+0x2c4>
    3a9c:	20800317 	ldw	r2,12(r4)
    3aa0:	20c00217 	ldw	r3,8(r4)
    3aa4:	81bfff04 	addi	r6,r16,-4
    3aa8:	01000904 	movi	r4,36
    3aac:	18800315 	stw	r2,12(r3)
    3ab0:	10c00215 	stw	r3,8(r2)
    3ab4:	98c00217 	ldw	r3,8(r19)
    3ab8:	98800317 	ldw	r2,12(r19)
    3abc:	9c400204 	addi	r17,r19,8
    3ac0:	18800315 	stw	r2,12(r3)
    3ac4:	10c00215 	stw	r3,8(r2)
    3ac8:	21801b36 	bltu	r4,r6,3b38 <_realloc_r+0x2f0>
    3acc:	008004c4 	movi	r2,19
    3ad0:	1180362e 	bgeu	r2,r6,3bac <_realloc_r+0x364>
    3ad4:	a0800017 	ldw	r2,0(r20)
    3ad8:	98800215 	stw	r2,8(r19)
    3adc:	a0800117 	ldw	r2,4(r20)
    3ae0:	98800315 	stw	r2,12(r19)
    3ae4:	008006c4 	movi	r2,27
    3ae8:	11808136 	bltu	r2,r6,3cf0 <_realloc_r+0x4a8>
    3aec:	98800404 	addi	r2,r19,16
    3af0:	a5000204 	addi	r20,r20,8
    3af4:	00002e06 	br	3bb0 <_realloc_r+0x368>
    3af8:	a4fffe17 	ldw	r19,-8(r20)
    3afc:	00ffff04 	movi	r3,-4
    3b00:	ace7c83a 	sub	r19,r21,r19
    3b04:	99000117 	ldw	r4,4(r19)
    3b08:	20c6703a 	and	r3,r4,r3
    3b0c:	983f7926 	beq	r19,zero,38f4 <_gp+0xffff3ed8>
    3b10:	80ef883a 	add	r23,r16,r3
    3b14:	b8bf7716 	blt	r23,r2,38f4 <_gp+0xffff3ed8>
    3b18:	98800317 	ldw	r2,12(r19)
    3b1c:	98c00217 	ldw	r3,8(r19)
    3b20:	81bfff04 	addi	r6,r16,-4
    3b24:	01000904 	movi	r4,36
    3b28:	18800315 	stw	r2,12(r3)
    3b2c:	10c00215 	stw	r3,8(r2)
    3b30:	9c400204 	addi	r17,r19,8
    3b34:	21bfe52e 	bgeu	r4,r6,3acc <_gp+0xffff40b0>
    3b38:	a00b883a 	mov	r5,r20
    3b3c:	8809883a 	mov	r4,r17
    3b40:	00035840 	call	3584 <memmove>
    3b44:	98c00117 	ldw	r3,4(r19)
    3b48:	b821883a 	mov	r16,r23
    3b4c:	982b883a 	mov	r21,r19
    3b50:	003f8b06 	br	3980 <_gp+0xffff3f64>
    3b54:	300b883a 	mov	r5,r6
    3b58:	dfc00917 	ldw	ra,36(sp)
    3b5c:	df000817 	ldw	fp,32(sp)
    3b60:	ddc00717 	ldw	r23,28(sp)
    3b64:	dd800617 	ldw	r22,24(sp)
    3b68:	dd400517 	ldw	r21,20(sp)
    3b6c:	dd000417 	ldw	r20,16(sp)
    3b70:	dcc00317 	ldw	r19,12(sp)
    3b74:	dc800217 	ldw	r18,8(sp)
    3b78:	dc400117 	ldw	r17,4(sp)
    3b7c:	dc000017 	ldw	r16,0(sp)
    3b80:	dec00a04 	addi	sp,sp,40
    3b84:	0002ad01 	jmpi	2ad0 <_malloc_r>
    3b88:	a0c00017 	ldw	r3,0(r20)
    3b8c:	88c00015 	stw	r3,0(r17)
    3b90:	a0c00117 	ldw	r3,4(r20)
    3b94:	88c00115 	stw	r3,4(r17)
    3b98:	00c006c4 	movi	r3,27
    3b9c:	19804636 	bltu	r3,r6,3cb8 <_realloc_r+0x470>
    3ba0:	88800204 	addi	r2,r17,8
    3ba4:	a0c00204 	addi	r3,r20,8
    3ba8:	003f6406 	br	393c <_gp+0xffff3f20>
    3bac:	8805883a 	mov	r2,r17
    3bb0:	a0c00017 	ldw	r3,0(r20)
    3bb4:	b821883a 	mov	r16,r23
    3bb8:	982b883a 	mov	r21,r19
    3bbc:	10c00015 	stw	r3,0(r2)
    3bc0:	a0c00117 	ldw	r3,4(r20)
    3bc4:	10c00115 	stw	r3,4(r2)
    3bc8:	a0c00217 	ldw	r3,8(r20)
    3bcc:	10c00215 	stw	r3,8(r2)
    3bd0:	98c00117 	ldw	r3,4(r19)
    3bd4:	003f6a06 	br	3980 <_gp+0xffff3f64>
    3bd8:	adab883a 	add	r21,r21,r22
    3bdc:	3d85c83a 	sub	r2,r7,r22
    3be0:	e5400215 	stw	r21,8(fp)
    3be4:	10800054 	ori	r2,r2,1
    3be8:	a8800115 	stw	r2,4(r21)
    3bec:	a0bfff17 	ldw	r2,-4(r20)
    3bf0:	9009883a 	mov	r4,r18
    3bf4:	1080004c 	andi	r2,r2,1
    3bf8:	1584b03a 	or	r2,r2,r22
    3bfc:	a0bfff15 	stw	r2,-4(r20)
    3c00:	0005b840 	call	5b84 <__malloc_unlock>
    3c04:	a005883a 	mov	r2,r20
    3c08:	003f6a06 	br	39b4 <_gp+0xffff3f98>
    3c0c:	a00b883a 	mov	r5,r20
    3c10:	8809883a 	mov	r4,r17
    3c14:	00035840 	call	3584 <memmove>
    3c18:	003f4e06 	br	3954 <_gp+0xffff3f38>
    3c1c:	b1000404 	addi	r4,r22,16
    3c20:	b93fba16 	blt	r23,r4,3b0c <_gp+0xffff40f0>
    3c24:	98800317 	ldw	r2,12(r19)
    3c28:	98c00217 	ldw	r3,8(r19)
    3c2c:	81bfff04 	addi	r6,r16,-4
    3c30:	01000904 	movi	r4,36
    3c34:	18800315 	stw	r2,12(r3)
    3c38:	10c00215 	stw	r3,8(r2)
    3c3c:	9c400204 	addi	r17,r19,8
    3c40:	21804336 	bltu	r4,r6,3d50 <_realloc_r+0x508>
    3c44:	008004c4 	movi	r2,19
    3c48:	11803f2e 	bgeu	r2,r6,3d48 <_realloc_r+0x500>
    3c4c:	a0800017 	ldw	r2,0(r20)
    3c50:	98800215 	stw	r2,8(r19)
    3c54:	a0800117 	ldw	r2,4(r20)
    3c58:	98800315 	stw	r2,12(r19)
    3c5c:	008006c4 	movi	r2,27
    3c60:	11803f36 	bltu	r2,r6,3d60 <_realloc_r+0x518>
    3c64:	98800404 	addi	r2,r19,16
    3c68:	a5000204 	addi	r20,r20,8
    3c6c:	a0c00017 	ldw	r3,0(r20)
    3c70:	10c00015 	stw	r3,0(r2)
    3c74:	a0c00117 	ldw	r3,4(r20)
    3c78:	10c00115 	stw	r3,4(r2)
    3c7c:	a0c00217 	ldw	r3,8(r20)
    3c80:	10c00215 	stw	r3,8(r2)
    3c84:	9d87883a 	add	r3,r19,r22
    3c88:	bd85c83a 	sub	r2,r23,r22
    3c8c:	e0c00215 	stw	r3,8(fp)
    3c90:	10800054 	ori	r2,r2,1
    3c94:	18800115 	stw	r2,4(r3)
    3c98:	98800117 	ldw	r2,4(r19)
    3c9c:	9009883a 	mov	r4,r18
    3ca0:	1080004c 	andi	r2,r2,1
    3ca4:	1584b03a 	or	r2,r2,r22
    3ca8:	98800115 	stw	r2,4(r19)
    3cac:	0005b840 	call	5b84 <__malloc_unlock>
    3cb0:	8805883a 	mov	r2,r17
    3cb4:	003f3f06 	br	39b4 <_gp+0xffff3f98>
    3cb8:	a0c00217 	ldw	r3,8(r20)
    3cbc:	88c00215 	stw	r3,8(r17)
    3cc0:	a0c00317 	ldw	r3,12(r20)
    3cc4:	88c00315 	stw	r3,12(r17)
    3cc8:	30801126 	beq	r6,r2,3d10 <_realloc_r+0x4c8>
    3ccc:	88800404 	addi	r2,r17,16
    3cd0:	a0c00404 	addi	r3,r20,16
    3cd4:	003f1906 	br	393c <_gp+0xffff3f20>
    3cd8:	893fff17 	ldw	r4,-4(r17)
    3cdc:	00bfff04 	movi	r2,-4
    3ce0:	a023883a 	mov	r17,r20
    3ce4:	2084703a 	and	r2,r4,r2
    3ce8:	80a1883a 	add	r16,r16,r2
    3cec:	003f2406 	br	3980 <_gp+0xffff3f64>
    3cf0:	a0800217 	ldw	r2,8(r20)
    3cf4:	98800415 	stw	r2,16(r19)
    3cf8:	a0800317 	ldw	r2,12(r20)
    3cfc:	98800515 	stw	r2,20(r19)
    3d00:	31000a26 	beq	r6,r4,3d2c <_realloc_r+0x4e4>
    3d04:	98800604 	addi	r2,r19,24
    3d08:	a5000404 	addi	r20,r20,16
    3d0c:	003fa806 	br	3bb0 <_gp+0xffff4194>
    3d10:	a1000417 	ldw	r4,16(r20)
    3d14:	88800604 	addi	r2,r17,24
    3d18:	a0c00604 	addi	r3,r20,24
    3d1c:	89000415 	stw	r4,16(r17)
    3d20:	a1000517 	ldw	r4,20(r20)
    3d24:	89000515 	stw	r4,20(r17)
    3d28:	003f0406 	br	393c <_gp+0xffff3f20>
    3d2c:	a0c00417 	ldw	r3,16(r20)
    3d30:	a5000604 	addi	r20,r20,24
    3d34:	98800804 	addi	r2,r19,32
    3d38:	98c00615 	stw	r3,24(r19)
    3d3c:	a0ffff17 	ldw	r3,-4(r20)
    3d40:	98c00715 	stw	r3,28(r19)
    3d44:	003f9a06 	br	3bb0 <_gp+0xffff4194>
    3d48:	8805883a 	mov	r2,r17
    3d4c:	003fc706 	br	3c6c <_gp+0xffff4250>
    3d50:	a00b883a 	mov	r5,r20
    3d54:	8809883a 	mov	r4,r17
    3d58:	00035840 	call	3584 <memmove>
    3d5c:	003fc906 	br	3c84 <_gp+0xffff4268>
    3d60:	a0800217 	ldw	r2,8(r20)
    3d64:	98800415 	stw	r2,16(r19)
    3d68:	a0800317 	ldw	r2,12(r20)
    3d6c:	98800515 	stw	r2,20(r19)
    3d70:	31000726 	beq	r6,r4,3d90 <_realloc_r+0x548>
    3d74:	98800604 	addi	r2,r19,24
    3d78:	a5000404 	addi	r20,r20,16
    3d7c:	003fbb06 	br	3c6c <_gp+0xffff4250>
    3d80:	9009883a 	mov	r4,r18
    3d84:	0005b840 	call	5b84 <__malloc_unlock>
    3d88:	0005883a 	mov	r2,zero
    3d8c:	003f0906 	br	39b4 <_gp+0xffff3f98>
    3d90:	a0c00417 	ldw	r3,16(r20)
    3d94:	a5000604 	addi	r20,r20,24
    3d98:	98800804 	addi	r2,r19,32
    3d9c:	98c00615 	stw	r3,24(r19)
    3da0:	a0ffff17 	ldw	r3,-4(r20)
    3da4:	98c00715 	stw	r3,28(r19)
    3da8:	003fb006 	br	3c6c <_gp+0xffff4250>

00003dac <_sbrk_r>:
    3dac:	defffd04 	addi	sp,sp,-12
    3db0:	dc000015 	stw	r16,0(sp)
    3db4:	04000074 	movhi	r16,1
    3db8:	dc400115 	stw	r17,4(sp)
    3dbc:	84253604 	addi	r16,r16,-27432
    3dc0:	2023883a 	mov	r17,r4
    3dc4:	2809883a 	mov	r4,r5
    3dc8:	dfc00215 	stw	ra,8(sp)
    3dcc:	80000015 	stw	zero,0(r16)
    3dd0:	0005cfc0 	call	5cfc <sbrk>
    3dd4:	00ffffc4 	movi	r3,-1
    3dd8:	10c00526 	beq	r2,r3,3df0 <_sbrk_r+0x44>
    3ddc:	dfc00217 	ldw	ra,8(sp)
    3de0:	dc400117 	ldw	r17,4(sp)
    3de4:	dc000017 	ldw	r16,0(sp)
    3de8:	dec00304 	addi	sp,sp,12
    3dec:	f800283a 	ret
    3df0:	80c00017 	ldw	r3,0(r16)
    3df4:	183ff926 	beq	r3,zero,3ddc <_gp+0xffff43c0>
    3df8:	88c00015 	stw	r3,0(r17)
    3dfc:	003ff706 	br	3ddc <_gp+0xffff43c0>

00003e00 <strlen>:
    3e00:	208000cc 	andi	r2,r4,3
    3e04:	10002026 	beq	r2,zero,3e88 <strlen+0x88>
    3e08:	20800007 	ldb	r2,0(r4)
    3e0c:	10002026 	beq	r2,zero,3e90 <strlen+0x90>
    3e10:	2005883a 	mov	r2,r4
    3e14:	00000206 	br	3e20 <strlen+0x20>
    3e18:	10c00007 	ldb	r3,0(r2)
    3e1c:	18001826 	beq	r3,zero,3e80 <strlen+0x80>
    3e20:	10800044 	addi	r2,r2,1
    3e24:	10c000cc 	andi	r3,r2,3
    3e28:	183ffb1e 	bne	r3,zero,3e18 <_gp+0xffff43fc>
    3e2c:	10c00017 	ldw	r3,0(r2)
    3e30:	01ffbff4 	movhi	r7,65279
    3e34:	39ffbfc4 	addi	r7,r7,-257
    3e38:	00ca303a 	nor	r5,zero,r3
    3e3c:	01a02074 	movhi	r6,32897
    3e40:	19c7883a 	add	r3,r3,r7
    3e44:	31a02004 	addi	r6,r6,-32640
    3e48:	1946703a 	and	r3,r3,r5
    3e4c:	1986703a 	and	r3,r3,r6
    3e50:	1800091e 	bne	r3,zero,3e78 <strlen+0x78>
    3e54:	10800104 	addi	r2,r2,4
    3e58:	10c00017 	ldw	r3,0(r2)
    3e5c:	19cb883a 	add	r5,r3,r7
    3e60:	00c6303a 	nor	r3,zero,r3
    3e64:	28c6703a 	and	r3,r5,r3
    3e68:	1986703a 	and	r3,r3,r6
    3e6c:	183ff926 	beq	r3,zero,3e54 <_gp+0xffff4438>
    3e70:	00000106 	br	3e78 <strlen+0x78>
    3e74:	10800044 	addi	r2,r2,1
    3e78:	10c00007 	ldb	r3,0(r2)
    3e7c:	183ffd1e 	bne	r3,zero,3e74 <_gp+0xffff4458>
    3e80:	1105c83a 	sub	r2,r2,r4
    3e84:	f800283a 	ret
    3e88:	2005883a 	mov	r2,r4
    3e8c:	003fe706 	br	3e2c <_gp+0xffff4410>
    3e90:	0005883a 	mov	r2,zero
    3e94:	f800283a 	ret

00003e98 <__swbuf_r>:
    3e98:	defffb04 	addi	sp,sp,-20
    3e9c:	dcc00315 	stw	r19,12(sp)
    3ea0:	dc800215 	stw	r18,8(sp)
    3ea4:	dc000015 	stw	r16,0(sp)
    3ea8:	dfc00415 	stw	ra,16(sp)
    3eac:	dc400115 	stw	r17,4(sp)
    3eb0:	2025883a 	mov	r18,r4
    3eb4:	2827883a 	mov	r19,r5
    3eb8:	3021883a 	mov	r16,r6
    3ebc:	20000226 	beq	r4,zero,3ec8 <__swbuf_r+0x30>
    3ec0:	20800e17 	ldw	r2,56(r4)
    3ec4:	10004226 	beq	r2,zero,3fd0 <__swbuf_r+0x138>
    3ec8:	80800617 	ldw	r2,24(r16)
    3ecc:	8100030b 	ldhu	r4,12(r16)
    3ed0:	80800215 	stw	r2,8(r16)
    3ed4:	2080020c 	andi	r2,r4,8
    3ed8:	10003626 	beq	r2,zero,3fb4 <__swbuf_r+0x11c>
    3edc:	80c00417 	ldw	r3,16(r16)
    3ee0:	18003426 	beq	r3,zero,3fb4 <__swbuf_r+0x11c>
    3ee4:	2088000c 	andi	r2,r4,8192
    3ee8:	9c403fcc 	andi	r17,r19,255
    3eec:	10001a26 	beq	r2,zero,3f58 <__swbuf_r+0xc0>
    3ef0:	80800017 	ldw	r2,0(r16)
    3ef4:	81000517 	ldw	r4,20(r16)
    3ef8:	10c7c83a 	sub	r3,r2,r3
    3efc:	1900200e 	bge	r3,r4,3f80 <__swbuf_r+0xe8>
    3f00:	18c00044 	addi	r3,r3,1
    3f04:	81000217 	ldw	r4,8(r16)
    3f08:	11400044 	addi	r5,r2,1
    3f0c:	81400015 	stw	r5,0(r16)
    3f10:	213fffc4 	addi	r4,r4,-1
    3f14:	81000215 	stw	r4,8(r16)
    3f18:	14c00005 	stb	r19,0(r2)
    3f1c:	80800517 	ldw	r2,20(r16)
    3f20:	10c01e26 	beq	r2,r3,3f9c <__swbuf_r+0x104>
    3f24:	8080030b 	ldhu	r2,12(r16)
    3f28:	1080004c 	andi	r2,r2,1
    3f2c:	10000226 	beq	r2,zero,3f38 <__swbuf_r+0xa0>
    3f30:	00800284 	movi	r2,10
    3f34:	88801926 	beq	r17,r2,3f9c <__swbuf_r+0x104>
    3f38:	8805883a 	mov	r2,r17
    3f3c:	dfc00417 	ldw	ra,16(sp)
    3f40:	dcc00317 	ldw	r19,12(sp)
    3f44:	dc800217 	ldw	r18,8(sp)
    3f48:	dc400117 	ldw	r17,4(sp)
    3f4c:	dc000017 	ldw	r16,0(sp)
    3f50:	dec00504 	addi	sp,sp,20
    3f54:	f800283a 	ret
    3f58:	81401917 	ldw	r5,100(r16)
    3f5c:	00b7ffc4 	movi	r2,-8193
    3f60:	21080014 	ori	r4,r4,8192
    3f64:	2884703a 	and	r2,r5,r2
    3f68:	80801915 	stw	r2,100(r16)
    3f6c:	80800017 	ldw	r2,0(r16)
    3f70:	8100030d 	sth	r4,12(r16)
    3f74:	81000517 	ldw	r4,20(r16)
    3f78:	10c7c83a 	sub	r3,r2,r3
    3f7c:	193fe016 	blt	r3,r4,3f00 <_gp+0xffff44e4>
    3f80:	800b883a 	mov	r5,r16
    3f84:	9009883a 	mov	r4,r18
    3f88:	00044e00 	call	44e0 <_fflush_r>
    3f8c:	1000071e 	bne	r2,zero,3fac <__swbuf_r+0x114>
    3f90:	80800017 	ldw	r2,0(r16)
    3f94:	00c00044 	movi	r3,1
    3f98:	003fda06 	br	3f04 <_gp+0xffff44e8>
    3f9c:	800b883a 	mov	r5,r16
    3fa0:	9009883a 	mov	r4,r18
    3fa4:	00044e00 	call	44e0 <_fflush_r>
    3fa8:	103fe326 	beq	r2,zero,3f38 <_gp+0xffff451c>
    3fac:	00bfffc4 	movi	r2,-1
    3fb0:	003fe206 	br	3f3c <_gp+0xffff4520>
    3fb4:	800b883a 	mov	r5,r16
    3fb8:	9009883a 	mov	r4,r18
    3fbc:	0003ff00 	call	3ff0 <__swsetup_r>
    3fc0:	103ffa1e 	bne	r2,zero,3fac <_gp+0xffff4590>
    3fc4:	8100030b 	ldhu	r4,12(r16)
    3fc8:	80c00417 	ldw	r3,16(r16)
    3fcc:	003fc506 	br	3ee4 <_gp+0xffff44c8>
    3fd0:	00048cc0 	call	48cc <__sinit>
    3fd4:	003fbc06 	br	3ec8 <_gp+0xffff44ac>

00003fd8 <__swbuf>:
    3fd8:	00800034 	movhi	r2,0
    3fdc:	109e9104 	addi	r2,r2,31300
    3fe0:	280d883a 	mov	r6,r5
    3fe4:	200b883a 	mov	r5,r4
    3fe8:	11000017 	ldw	r4,0(r2)
    3fec:	0003e981 	jmpi	3e98 <__swbuf_r>

00003ff0 <__swsetup_r>:
    3ff0:	00800034 	movhi	r2,0
    3ff4:	defffd04 	addi	sp,sp,-12
    3ff8:	109e9104 	addi	r2,r2,31300
    3ffc:	dc400115 	stw	r17,4(sp)
    4000:	2023883a 	mov	r17,r4
    4004:	11000017 	ldw	r4,0(r2)
    4008:	dc000015 	stw	r16,0(sp)
    400c:	dfc00215 	stw	ra,8(sp)
    4010:	2821883a 	mov	r16,r5
    4014:	20000226 	beq	r4,zero,4020 <__swsetup_r+0x30>
    4018:	20800e17 	ldw	r2,56(r4)
    401c:	10003126 	beq	r2,zero,40e4 <__swsetup_r+0xf4>
    4020:	8080030b 	ldhu	r2,12(r16)
    4024:	10c0020c 	andi	r3,r2,8
    4028:	1009883a 	mov	r4,r2
    402c:	18000f26 	beq	r3,zero,406c <__swsetup_r+0x7c>
    4030:	80c00417 	ldw	r3,16(r16)
    4034:	18001526 	beq	r3,zero,408c <__swsetup_r+0x9c>
    4038:	1100004c 	andi	r4,r2,1
    403c:	20001c1e 	bne	r4,zero,40b0 <__swsetup_r+0xc0>
    4040:	1080008c 	andi	r2,r2,2
    4044:	1000291e 	bne	r2,zero,40ec <__swsetup_r+0xfc>
    4048:	80800517 	ldw	r2,20(r16)
    404c:	80800215 	stw	r2,8(r16)
    4050:	18001c26 	beq	r3,zero,40c4 <__swsetup_r+0xd4>
    4054:	0005883a 	mov	r2,zero
    4058:	dfc00217 	ldw	ra,8(sp)
    405c:	dc400117 	ldw	r17,4(sp)
    4060:	dc000017 	ldw	r16,0(sp)
    4064:	dec00304 	addi	sp,sp,12
    4068:	f800283a 	ret
    406c:	2080040c 	andi	r2,r4,16
    4070:	10002e26 	beq	r2,zero,412c <__swsetup_r+0x13c>
    4074:	2080010c 	andi	r2,r4,4
    4078:	10001e1e 	bne	r2,zero,40f4 <__swsetup_r+0x104>
    407c:	80c00417 	ldw	r3,16(r16)
    4080:	20800214 	ori	r2,r4,8
    4084:	8080030d 	sth	r2,12(r16)
    4088:	183feb1e 	bne	r3,zero,4038 <_gp+0xffff461c>
    408c:	1100a00c 	andi	r4,r2,640
    4090:	01408004 	movi	r5,512
    4094:	217fe826 	beq	r4,r5,4038 <_gp+0xffff461c>
    4098:	800b883a 	mov	r5,r16
    409c:	8809883a 	mov	r4,r17
    40a0:	0004ed80 	call	4ed8 <__smakebuf_r>
    40a4:	8080030b 	ldhu	r2,12(r16)
    40a8:	80c00417 	ldw	r3,16(r16)
    40ac:	003fe206 	br	4038 <_gp+0xffff461c>
    40b0:	80800517 	ldw	r2,20(r16)
    40b4:	80000215 	stw	zero,8(r16)
    40b8:	0085c83a 	sub	r2,zero,r2
    40bc:	80800615 	stw	r2,24(r16)
    40c0:	183fe41e 	bne	r3,zero,4054 <_gp+0xffff4638>
    40c4:	80c0030b 	ldhu	r3,12(r16)
    40c8:	0005883a 	mov	r2,zero
    40cc:	1900200c 	andi	r4,r3,128
    40d0:	203fe126 	beq	r4,zero,4058 <_gp+0xffff463c>
    40d4:	18c01014 	ori	r3,r3,64
    40d8:	80c0030d 	sth	r3,12(r16)
    40dc:	00bfffc4 	movi	r2,-1
    40e0:	003fdd06 	br	4058 <_gp+0xffff463c>
    40e4:	00048cc0 	call	48cc <__sinit>
    40e8:	003fcd06 	br	4020 <_gp+0xffff4604>
    40ec:	0005883a 	mov	r2,zero
    40f0:	003fd606 	br	404c <_gp+0xffff4630>
    40f4:	81400c17 	ldw	r5,48(r16)
    40f8:	28000626 	beq	r5,zero,4114 <__swsetup_r+0x124>
    40fc:	80801004 	addi	r2,r16,64
    4100:	28800326 	beq	r5,r2,4110 <__swsetup_r+0x120>
    4104:	8809883a 	mov	r4,r17
    4108:	0004a400 	call	4a40 <_free_r>
    410c:	8100030b 	ldhu	r4,12(r16)
    4110:	80000c15 	stw	zero,48(r16)
    4114:	80c00417 	ldw	r3,16(r16)
    4118:	00bff6c4 	movi	r2,-37
    411c:	1108703a 	and	r4,r2,r4
    4120:	80000115 	stw	zero,4(r16)
    4124:	80c00015 	stw	r3,0(r16)
    4128:	003fd506 	br	4080 <_gp+0xffff4664>
    412c:	00800244 	movi	r2,9
    4130:	88800015 	stw	r2,0(r17)
    4134:	20801014 	ori	r2,r4,64
    4138:	8080030d 	sth	r2,12(r16)
    413c:	00bfffc4 	movi	r2,-1
    4140:	003fc506 	br	4058 <_gp+0xffff463c>

00004144 <__call_exitprocs>:
    4144:	defff504 	addi	sp,sp,-44
    4148:	df000915 	stw	fp,36(sp)
    414c:	dd400615 	stw	r21,24(sp)
    4150:	dc800315 	stw	r18,12(sp)
    4154:	dfc00a15 	stw	ra,40(sp)
    4158:	ddc00815 	stw	r23,32(sp)
    415c:	dd800715 	stw	r22,28(sp)
    4160:	dd000515 	stw	r20,20(sp)
    4164:	dcc00415 	stw	r19,16(sp)
    4168:	dc400215 	stw	r17,8(sp)
    416c:	dc000115 	stw	r16,4(sp)
    4170:	d9000015 	stw	r4,0(sp)
    4174:	2839883a 	mov	fp,r5
    4178:	04800044 	movi	r18,1
    417c:	057fffc4 	movi	r21,-1
    4180:	00800034 	movhi	r2,0
    4184:	109e9004 	addi	r2,r2,31296
    4188:	12000017 	ldw	r8,0(r2)
    418c:	45005217 	ldw	r20,328(r8)
    4190:	44c05204 	addi	r19,r8,328
    4194:	a0001c26 	beq	r20,zero,4208 <__call_exitprocs+0xc4>
    4198:	a0800117 	ldw	r2,4(r20)
    419c:	15ffffc4 	addi	r23,r2,-1
    41a0:	b8000d16 	blt	r23,zero,41d8 <__call_exitprocs+0x94>
    41a4:	14000044 	addi	r16,r2,1
    41a8:	8421883a 	add	r16,r16,r16
    41ac:	8421883a 	add	r16,r16,r16
    41b0:	84402004 	addi	r17,r16,128
    41b4:	a463883a 	add	r17,r20,r17
    41b8:	a421883a 	add	r16,r20,r16
    41bc:	e0001e26 	beq	fp,zero,4238 <__call_exitprocs+0xf4>
    41c0:	80804017 	ldw	r2,256(r16)
    41c4:	e0801c26 	beq	fp,r2,4238 <__call_exitprocs+0xf4>
    41c8:	bdffffc4 	addi	r23,r23,-1
    41cc:	843fff04 	addi	r16,r16,-4
    41d0:	8c7fff04 	addi	r17,r17,-4
    41d4:	bd7ff91e 	bne	r23,r21,41bc <_gp+0xffff47a0>
    41d8:	00800034 	movhi	r2,0
    41dc:	10800004 	addi	r2,r2,0
    41e0:	10000926 	beq	r2,zero,4208 <__call_exitprocs+0xc4>
    41e4:	a0800117 	ldw	r2,4(r20)
    41e8:	1000301e 	bne	r2,zero,42ac <__call_exitprocs+0x168>
    41ec:	a0800017 	ldw	r2,0(r20)
    41f0:	10003226 	beq	r2,zero,42bc <__call_exitprocs+0x178>
    41f4:	a009883a 	mov	r4,r20
    41f8:	98800015 	stw	r2,0(r19)
    41fc:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
    4200:	9d000017 	ldw	r20,0(r19)
    4204:	a03fe41e 	bne	r20,zero,4198 <_gp+0xffff477c>
    4208:	dfc00a17 	ldw	ra,40(sp)
    420c:	df000917 	ldw	fp,36(sp)
    4210:	ddc00817 	ldw	r23,32(sp)
    4214:	dd800717 	ldw	r22,28(sp)
    4218:	dd400617 	ldw	r21,24(sp)
    421c:	dd000517 	ldw	r20,20(sp)
    4220:	dcc00417 	ldw	r19,16(sp)
    4224:	dc800317 	ldw	r18,12(sp)
    4228:	dc400217 	ldw	r17,8(sp)
    422c:	dc000117 	ldw	r16,4(sp)
    4230:	dec00b04 	addi	sp,sp,44
    4234:	f800283a 	ret
    4238:	a0800117 	ldw	r2,4(r20)
    423c:	80c00017 	ldw	r3,0(r16)
    4240:	10bfffc4 	addi	r2,r2,-1
    4244:	15c01426 	beq	r2,r23,4298 <__call_exitprocs+0x154>
    4248:	80000015 	stw	zero,0(r16)
    424c:	183fde26 	beq	r3,zero,41c8 <_gp+0xffff47ac>
    4250:	95c8983a 	sll	r4,r18,r23
    4254:	a0806217 	ldw	r2,392(r20)
    4258:	a5800117 	ldw	r22,4(r20)
    425c:	2084703a 	and	r2,r4,r2
    4260:	10000b26 	beq	r2,zero,4290 <__call_exitprocs+0x14c>
    4264:	a0806317 	ldw	r2,396(r20)
    4268:	2088703a 	and	r4,r4,r2
    426c:	20000c1e 	bne	r4,zero,42a0 <__call_exitprocs+0x15c>
    4270:	89400017 	ldw	r5,0(r17)
    4274:	d9000017 	ldw	r4,0(sp)
    4278:	183ee83a 	callr	r3
    427c:	a0800117 	ldw	r2,4(r20)
    4280:	15bfbf1e 	bne	r2,r22,4180 <_gp+0xffff4764>
    4284:	98800017 	ldw	r2,0(r19)
    4288:	153fcf26 	beq	r2,r20,41c8 <_gp+0xffff47ac>
    428c:	003fbc06 	br	4180 <_gp+0xffff4764>
    4290:	183ee83a 	callr	r3
    4294:	003ff906 	br	427c <_gp+0xffff4860>
    4298:	a5c00115 	stw	r23,4(r20)
    429c:	003feb06 	br	424c <_gp+0xffff4830>
    42a0:	89000017 	ldw	r4,0(r17)
    42a4:	183ee83a 	callr	r3
    42a8:	003ff406 	br	427c <_gp+0xffff4860>
    42ac:	a0800017 	ldw	r2,0(r20)
    42b0:	a027883a 	mov	r19,r20
    42b4:	1029883a 	mov	r20,r2
    42b8:	003fb606 	br	4194 <_gp+0xffff4778>
    42bc:	0005883a 	mov	r2,zero
    42c0:	003ffb06 	br	42b0 <_gp+0xffff4894>

000042c4 <__sflush_r>:
    42c4:	2880030b 	ldhu	r2,12(r5)
    42c8:	defffb04 	addi	sp,sp,-20
    42cc:	dcc00315 	stw	r19,12(sp)
    42d0:	dc400115 	stw	r17,4(sp)
    42d4:	dfc00415 	stw	ra,16(sp)
    42d8:	dc800215 	stw	r18,8(sp)
    42dc:	dc000015 	stw	r16,0(sp)
    42e0:	10c0020c 	andi	r3,r2,8
    42e4:	2823883a 	mov	r17,r5
    42e8:	2027883a 	mov	r19,r4
    42ec:	1800311e 	bne	r3,zero,43b4 <__sflush_r+0xf0>
    42f0:	28c00117 	ldw	r3,4(r5)
    42f4:	10820014 	ori	r2,r2,2048
    42f8:	2880030d 	sth	r2,12(r5)
    42fc:	00c04b0e 	bge	zero,r3,442c <__sflush_r+0x168>
    4300:	8a000a17 	ldw	r8,40(r17)
    4304:	40002326 	beq	r8,zero,4394 <__sflush_r+0xd0>
    4308:	9c000017 	ldw	r16,0(r19)
    430c:	10c4000c 	andi	r3,r2,4096
    4310:	98000015 	stw	zero,0(r19)
    4314:	18004826 	beq	r3,zero,4438 <__sflush_r+0x174>
    4318:	89801417 	ldw	r6,80(r17)
    431c:	10c0010c 	andi	r3,r2,4
    4320:	18000626 	beq	r3,zero,433c <__sflush_r+0x78>
    4324:	88c00117 	ldw	r3,4(r17)
    4328:	88800c17 	ldw	r2,48(r17)
    432c:	30cdc83a 	sub	r6,r6,r3
    4330:	10000226 	beq	r2,zero,433c <__sflush_r+0x78>
    4334:	88800f17 	ldw	r2,60(r17)
    4338:	308dc83a 	sub	r6,r6,r2
    433c:	89400717 	ldw	r5,28(r17)
    4340:	000f883a 	mov	r7,zero
    4344:	9809883a 	mov	r4,r19
    4348:	403ee83a 	callr	r8
    434c:	00ffffc4 	movi	r3,-1
    4350:	10c04426 	beq	r2,r3,4464 <__sflush_r+0x1a0>
    4354:	88c0030b 	ldhu	r3,12(r17)
    4358:	89000417 	ldw	r4,16(r17)
    435c:	88000115 	stw	zero,4(r17)
    4360:	197dffcc 	andi	r5,r3,63487
    4364:	8940030d 	sth	r5,12(r17)
    4368:	89000015 	stw	r4,0(r17)
    436c:	18c4000c 	andi	r3,r3,4096
    4370:	18002c1e 	bne	r3,zero,4424 <__sflush_r+0x160>
    4374:	89400c17 	ldw	r5,48(r17)
    4378:	9c000015 	stw	r16,0(r19)
    437c:	28000526 	beq	r5,zero,4394 <__sflush_r+0xd0>
    4380:	88801004 	addi	r2,r17,64
    4384:	28800226 	beq	r5,r2,4390 <__sflush_r+0xcc>
    4388:	9809883a 	mov	r4,r19
    438c:	0004a400 	call	4a40 <_free_r>
    4390:	88000c15 	stw	zero,48(r17)
    4394:	0005883a 	mov	r2,zero
    4398:	dfc00417 	ldw	ra,16(sp)
    439c:	dcc00317 	ldw	r19,12(sp)
    43a0:	dc800217 	ldw	r18,8(sp)
    43a4:	dc400117 	ldw	r17,4(sp)
    43a8:	dc000017 	ldw	r16,0(sp)
    43ac:	dec00504 	addi	sp,sp,20
    43b0:	f800283a 	ret
    43b4:	2c800417 	ldw	r18,16(r5)
    43b8:	903ff626 	beq	r18,zero,4394 <_gp+0xffff4978>
    43bc:	2c000017 	ldw	r16,0(r5)
    43c0:	108000cc 	andi	r2,r2,3
    43c4:	2c800015 	stw	r18,0(r5)
    43c8:	84a1c83a 	sub	r16,r16,r18
    43cc:	1000131e 	bne	r2,zero,441c <__sflush_r+0x158>
    43d0:	28800517 	ldw	r2,20(r5)
    43d4:	88800215 	stw	r2,8(r17)
    43d8:	04000316 	blt	zero,r16,43e8 <__sflush_r+0x124>
    43dc:	003fed06 	br	4394 <_gp+0xffff4978>
    43e0:	90a5883a 	add	r18,r18,r2
    43e4:	043feb0e 	bge	zero,r16,4394 <_gp+0xffff4978>
    43e8:	88800917 	ldw	r2,36(r17)
    43ec:	89400717 	ldw	r5,28(r17)
    43f0:	800f883a 	mov	r7,r16
    43f4:	900d883a 	mov	r6,r18
    43f8:	9809883a 	mov	r4,r19
    43fc:	103ee83a 	callr	r2
    4400:	80a1c83a 	sub	r16,r16,r2
    4404:	00bff616 	blt	zero,r2,43e0 <_gp+0xffff49c4>
    4408:	88c0030b 	ldhu	r3,12(r17)
    440c:	00bfffc4 	movi	r2,-1
    4410:	18c01014 	ori	r3,r3,64
    4414:	88c0030d 	sth	r3,12(r17)
    4418:	003fdf06 	br	4398 <_gp+0xffff497c>
    441c:	0005883a 	mov	r2,zero
    4420:	003fec06 	br	43d4 <_gp+0xffff49b8>
    4424:	88801415 	stw	r2,80(r17)
    4428:	003fd206 	br	4374 <_gp+0xffff4958>
    442c:	28c00f17 	ldw	r3,60(r5)
    4430:	00ffb316 	blt	zero,r3,4300 <_gp+0xffff48e4>
    4434:	003fd706 	br	4394 <_gp+0xffff4978>
    4438:	89400717 	ldw	r5,28(r17)
    443c:	000d883a 	mov	r6,zero
    4440:	01c00044 	movi	r7,1
    4444:	9809883a 	mov	r4,r19
    4448:	403ee83a 	callr	r8
    444c:	100d883a 	mov	r6,r2
    4450:	00bfffc4 	movi	r2,-1
    4454:	30801426 	beq	r6,r2,44a8 <__sflush_r+0x1e4>
    4458:	8880030b 	ldhu	r2,12(r17)
    445c:	8a000a17 	ldw	r8,40(r17)
    4460:	003fae06 	br	431c <_gp+0xffff4900>
    4464:	98c00017 	ldw	r3,0(r19)
    4468:	183fba26 	beq	r3,zero,4354 <_gp+0xffff4938>
    446c:	01000744 	movi	r4,29
    4470:	19000626 	beq	r3,r4,448c <__sflush_r+0x1c8>
    4474:	01000584 	movi	r4,22
    4478:	19000426 	beq	r3,r4,448c <__sflush_r+0x1c8>
    447c:	88c0030b 	ldhu	r3,12(r17)
    4480:	18c01014 	ori	r3,r3,64
    4484:	88c0030d 	sth	r3,12(r17)
    4488:	003fc306 	br	4398 <_gp+0xffff497c>
    448c:	8880030b 	ldhu	r2,12(r17)
    4490:	88c00417 	ldw	r3,16(r17)
    4494:	88000115 	stw	zero,4(r17)
    4498:	10bdffcc 	andi	r2,r2,63487
    449c:	8880030d 	sth	r2,12(r17)
    44a0:	88c00015 	stw	r3,0(r17)
    44a4:	003fb306 	br	4374 <_gp+0xffff4958>
    44a8:	98800017 	ldw	r2,0(r19)
    44ac:	103fea26 	beq	r2,zero,4458 <_gp+0xffff4a3c>
    44b0:	00c00744 	movi	r3,29
    44b4:	10c00226 	beq	r2,r3,44c0 <__sflush_r+0x1fc>
    44b8:	00c00584 	movi	r3,22
    44bc:	10c0031e 	bne	r2,r3,44cc <__sflush_r+0x208>
    44c0:	9c000015 	stw	r16,0(r19)
    44c4:	0005883a 	mov	r2,zero
    44c8:	003fb306 	br	4398 <_gp+0xffff497c>
    44cc:	88c0030b 	ldhu	r3,12(r17)
    44d0:	3005883a 	mov	r2,r6
    44d4:	18c01014 	ori	r3,r3,64
    44d8:	88c0030d 	sth	r3,12(r17)
    44dc:	003fae06 	br	4398 <_gp+0xffff497c>

000044e0 <_fflush_r>:
    44e0:	defffd04 	addi	sp,sp,-12
    44e4:	dc000115 	stw	r16,4(sp)
    44e8:	dfc00215 	stw	ra,8(sp)
    44ec:	2021883a 	mov	r16,r4
    44f0:	20000226 	beq	r4,zero,44fc <_fflush_r+0x1c>
    44f4:	20800e17 	ldw	r2,56(r4)
    44f8:	10000c26 	beq	r2,zero,452c <_fflush_r+0x4c>
    44fc:	2880030f 	ldh	r2,12(r5)
    4500:	1000051e 	bne	r2,zero,4518 <_fflush_r+0x38>
    4504:	0005883a 	mov	r2,zero
    4508:	dfc00217 	ldw	ra,8(sp)
    450c:	dc000117 	ldw	r16,4(sp)
    4510:	dec00304 	addi	sp,sp,12
    4514:	f800283a 	ret
    4518:	8009883a 	mov	r4,r16
    451c:	dfc00217 	ldw	ra,8(sp)
    4520:	dc000117 	ldw	r16,4(sp)
    4524:	dec00304 	addi	sp,sp,12
    4528:	00042c41 	jmpi	42c4 <__sflush_r>
    452c:	d9400015 	stw	r5,0(sp)
    4530:	00048cc0 	call	48cc <__sinit>
    4534:	d9400017 	ldw	r5,0(sp)
    4538:	003ff006 	br	44fc <_gp+0xffff4ae0>

0000453c <fflush>:
    453c:	20000526 	beq	r4,zero,4554 <fflush+0x18>
    4540:	00800034 	movhi	r2,0
    4544:	109e9104 	addi	r2,r2,31300
    4548:	200b883a 	mov	r5,r4
    454c:	11000017 	ldw	r4,0(r2)
    4550:	00044e01 	jmpi	44e0 <_fflush_r>
    4554:	00800034 	movhi	r2,0
    4558:	109e9004 	addi	r2,r2,31296
    455c:	11000017 	ldw	r4,0(r2)
    4560:	01400034 	movhi	r5,0
    4564:	29513804 	addi	r5,r5,17632
    4568:	0004e141 	jmpi	4e14 <_fwalk_reent>

0000456c <__fp_unlock>:
    456c:	0005883a 	mov	r2,zero
    4570:	f800283a 	ret

00004574 <_cleanup_r>:
    4574:	01400034 	movhi	r5,0
    4578:	2954eb04 	addi	r5,r5,21420
    457c:	0004e141 	jmpi	4e14 <_fwalk_reent>

00004580 <__sinit.part.1>:
    4580:	defff704 	addi	sp,sp,-36
    4584:	00c00034 	movhi	r3,0
    4588:	dfc00815 	stw	ra,32(sp)
    458c:	ddc00715 	stw	r23,28(sp)
    4590:	dd800615 	stw	r22,24(sp)
    4594:	dd400515 	stw	r21,20(sp)
    4598:	dd000415 	stw	r20,16(sp)
    459c:	dcc00315 	stw	r19,12(sp)
    45a0:	dc800215 	stw	r18,8(sp)
    45a4:	dc400115 	stw	r17,4(sp)
    45a8:	dc000015 	stw	r16,0(sp)
    45ac:	18d15d04 	addi	r3,r3,17780
    45b0:	24000117 	ldw	r16,4(r4)
    45b4:	20c00f15 	stw	r3,60(r4)
    45b8:	2080bb04 	addi	r2,r4,748
    45bc:	00c000c4 	movi	r3,3
    45c0:	20c0b915 	stw	r3,740(r4)
    45c4:	2080ba15 	stw	r2,744(r4)
    45c8:	2000b815 	stw	zero,736(r4)
    45cc:	05c00204 	movi	r23,8
    45d0:	00800104 	movi	r2,4
    45d4:	2025883a 	mov	r18,r4
    45d8:	b80d883a 	mov	r6,r23
    45dc:	81001704 	addi	r4,r16,92
    45e0:	000b883a 	mov	r5,zero
    45e4:	80000015 	stw	zero,0(r16)
    45e8:	80000115 	stw	zero,4(r16)
    45ec:	80000215 	stw	zero,8(r16)
    45f0:	8080030d 	sth	r2,12(r16)
    45f4:	80001915 	stw	zero,100(r16)
    45f8:	8000038d 	sth	zero,14(r16)
    45fc:	80000415 	stw	zero,16(r16)
    4600:	80000515 	stw	zero,20(r16)
    4604:	80000615 	stw	zero,24(r16)
    4608:	00050940 	call	5094 <memset>
    460c:	05800034 	movhi	r22,0
    4610:	94400217 	ldw	r17,8(r18)
    4614:	05400034 	movhi	r21,0
    4618:	05000034 	movhi	r20,0
    461c:	04c00034 	movhi	r19,0
    4620:	b5946f04 	addi	r22,r22,20924
    4624:	ad548604 	addi	r21,r21,21016
    4628:	a514a504 	addi	r20,r20,21140
    462c:	9cd4bc04 	addi	r19,r19,21232
    4630:	85800815 	stw	r22,32(r16)
    4634:	85400915 	stw	r21,36(r16)
    4638:	85000a15 	stw	r20,40(r16)
    463c:	84c00b15 	stw	r19,44(r16)
    4640:	84000715 	stw	r16,28(r16)
    4644:	00800284 	movi	r2,10
    4648:	8880030d 	sth	r2,12(r17)
    464c:	00800044 	movi	r2,1
    4650:	b80d883a 	mov	r6,r23
    4654:	89001704 	addi	r4,r17,92
    4658:	000b883a 	mov	r5,zero
    465c:	88000015 	stw	zero,0(r17)
    4660:	88000115 	stw	zero,4(r17)
    4664:	88000215 	stw	zero,8(r17)
    4668:	88001915 	stw	zero,100(r17)
    466c:	8880038d 	sth	r2,14(r17)
    4670:	88000415 	stw	zero,16(r17)
    4674:	88000515 	stw	zero,20(r17)
    4678:	88000615 	stw	zero,24(r17)
    467c:	00050940 	call	5094 <memset>
    4680:	94000317 	ldw	r16,12(r18)
    4684:	00800484 	movi	r2,18
    4688:	8c400715 	stw	r17,28(r17)
    468c:	8d800815 	stw	r22,32(r17)
    4690:	8d400915 	stw	r21,36(r17)
    4694:	8d000a15 	stw	r20,40(r17)
    4698:	8cc00b15 	stw	r19,44(r17)
    469c:	8080030d 	sth	r2,12(r16)
    46a0:	00800084 	movi	r2,2
    46a4:	80000015 	stw	zero,0(r16)
    46a8:	80000115 	stw	zero,4(r16)
    46ac:	80000215 	stw	zero,8(r16)
    46b0:	80001915 	stw	zero,100(r16)
    46b4:	8080038d 	sth	r2,14(r16)
    46b8:	80000415 	stw	zero,16(r16)
    46bc:	80000515 	stw	zero,20(r16)
    46c0:	80000615 	stw	zero,24(r16)
    46c4:	b80d883a 	mov	r6,r23
    46c8:	000b883a 	mov	r5,zero
    46cc:	81001704 	addi	r4,r16,92
    46d0:	00050940 	call	5094 <memset>
    46d4:	00800044 	movi	r2,1
    46d8:	84000715 	stw	r16,28(r16)
    46dc:	85800815 	stw	r22,32(r16)
    46e0:	85400915 	stw	r21,36(r16)
    46e4:	85000a15 	stw	r20,40(r16)
    46e8:	84c00b15 	stw	r19,44(r16)
    46ec:	90800e15 	stw	r2,56(r18)
    46f0:	dfc00817 	ldw	ra,32(sp)
    46f4:	ddc00717 	ldw	r23,28(sp)
    46f8:	dd800617 	ldw	r22,24(sp)
    46fc:	dd400517 	ldw	r21,20(sp)
    4700:	dd000417 	ldw	r20,16(sp)
    4704:	dcc00317 	ldw	r19,12(sp)
    4708:	dc800217 	ldw	r18,8(sp)
    470c:	dc400117 	ldw	r17,4(sp)
    4710:	dc000017 	ldw	r16,0(sp)
    4714:	dec00904 	addi	sp,sp,36
    4718:	f800283a 	ret

0000471c <__fp_lock>:
    471c:	0005883a 	mov	r2,zero
    4720:	f800283a 	ret

00004724 <__sfmoreglue>:
    4724:	defffc04 	addi	sp,sp,-16
    4728:	dc800215 	stw	r18,8(sp)
    472c:	2825883a 	mov	r18,r5
    4730:	dc000015 	stw	r16,0(sp)
    4734:	01401a04 	movi	r5,104
    4738:	2021883a 	mov	r16,r4
    473c:	913fffc4 	addi	r4,r18,-1
    4740:	dfc00315 	stw	ra,12(sp)
    4744:	dc400115 	stw	r17,4(sp)
    4748:	00057d40 	call	57d4 <__mulsi3>
    474c:	8009883a 	mov	r4,r16
    4750:	11401d04 	addi	r5,r2,116
    4754:	1023883a 	mov	r17,r2
    4758:	0002ad00 	call	2ad0 <_malloc_r>
    475c:	1021883a 	mov	r16,r2
    4760:	10000726 	beq	r2,zero,4780 <__sfmoreglue+0x5c>
    4764:	11000304 	addi	r4,r2,12
    4768:	10000015 	stw	zero,0(r2)
    476c:	14800115 	stw	r18,4(r2)
    4770:	11000215 	stw	r4,8(r2)
    4774:	89801a04 	addi	r6,r17,104
    4778:	000b883a 	mov	r5,zero
    477c:	00050940 	call	5094 <memset>
    4780:	8005883a 	mov	r2,r16
    4784:	dfc00317 	ldw	ra,12(sp)
    4788:	dc800217 	ldw	r18,8(sp)
    478c:	dc400117 	ldw	r17,4(sp)
    4790:	dc000017 	ldw	r16,0(sp)
    4794:	dec00404 	addi	sp,sp,16
    4798:	f800283a 	ret

0000479c <__sfp>:
    479c:	defffb04 	addi	sp,sp,-20
    47a0:	dc000015 	stw	r16,0(sp)
    47a4:	04000034 	movhi	r16,0
    47a8:	841e9004 	addi	r16,r16,31296
    47ac:	dcc00315 	stw	r19,12(sp)
    47b0:	2027883a 	mov	r19,r4
    47b4:	81000017 	ldw	r4,0(r16)
    47b8:	dfc00415 	stw	ra,16(sp)
    47bc:	dc800215 	stw	r18,8(sp)
    47c0:	20800e17 	ldw	r2,56(r4)
    47c4:	dc400115 	stw	r17,4(sp)
    47c8:	1000021e 	bne	r2,zero,47d4 <__sfp+0x38>
    47cc:	00045800 	call	4580 <__sinit.part.1>
    47d0:	81000017 	ldw	r4,0(r16)
    47d4:	2480b804 	addi	r18,r4,736
    47d8:	047fffc4 	movi	r17,-1
    47dc:	91000117 	ldw	r4,4(r18)
    47e0:	94000217 	ldw	r16,8(r18)
    47e4:	213fffc4 	addi	r4,r4,-1
    47e8:	20000a16 	blt	r4,zero,4814 <__sfp+0x78>
    47ec:	8080030f 	ldh	r2,12(r16)
    47f0:	10000c26 	beq	r2,zero,4824 <__sfp+0x88>
    47f4:	80c01d04 	addi	r3,r16,116
    47f8:	00000206 	br	4804 <__sfp+0x68>
    47fc:	18bfe60f 	ldh	r2,-104(r3)
    4800:	10000826 	beq	r2,zero,4824 <__sfp+0x88>
    4804:	213fffc4 	addi	r4,r4,-1
    4808:	1c3ffd04 	addi	r16,r3,-12
    480c:	18c01a04 	addi	r3,r3,104
    4810:	247ffa1e 	bne	r4,r17,47fc <_gp+0xffff4de0>
    4814:	90800017 	ldw	r2,0(r18)
    4818:	10001d26 	beq	r2,zero,4890 <__sfp+0xf4>
    481c:	1025883a 	mov	r18,r2
    4820:	003fee06 	br	47dc <_gp+0xffff4dc0>
    4824:	00bfffc4 	movi	r2,-1
    4828:	8080038d 	sth	r2,14(r16)
    482c:	00800044 	movi	r2,1
    4830:	8080030d 	sth	r2,12(r16)
    4834:	80001915 	stw	zero,100(r16)
    4838:	80000015 	stw	zero,0(r16)
    483c:	80000215 	stw	zero,8(r16)
    4840:	80000115 	stw	zero,4(r16)
    4844:	80000415 	stw	zero,16(r16)
    4848:	80000515 	stw	zero,20(r16)
    484c:	80000615 	stw	zero,24(r16)
    4850:	01800204 	movi	r6,8
    4854:	000b883a 	mov	r5,zero
    4858:	81001704 	addi	r4,r16,92
    485c:	00050940 	call	5094 <memset>
    4860:	8005883a 	mov	r2,r16
    4864:	80000c15 	stw	zero,48(r16)
    4868:	80000d15 	stw	zero,52(r16)
    486c:	80001115 	stw	zero,68(r16)
    4870:	80001215 	stw	zero,72(r16)
    4874:	dfc00417 	ldw	ra,16(sp)
    4878:	dcc00317 	ldw	r19,12(sp)
    487c:	dc800217 	ldw	r18,8(sp)
    4880:	dc400117 	ldw	r17,4(sp)
    4884:	dc000017 	ldw	r16,0(sp)
    4888:	dec00504 	addi	sp,sp,20
    488c:	f800283a 	ret
    4890:	01400104 	movi	r5,4
    4894:	9809883a 	mov	r4,r19
    4898:	00047240 	call	4724 <__sfmoreglue>
    489c:	90800015 	stw	r2,0(r18)
    48a0:	103fde1e 	bne	r2,zero,481c <_gp+0xffff4e00>
    48a4:	00800304 	movi	r2,12
    48a8:	98800015 	stw	r2,0(r19)
    48ac:	0005883a 	mov	r2,zero
    48b0:	003ff006 	br	4874 <_gp+0xffff4e58>

000048b4 <_cleanup>:
    48b4:	00800034 	movhi	r2,0
    48b8:	109e9004 	addi	r2,r2,31296
    48bc:	11000017 	ldw	r4,0(r2)
    48c0:	01400034 	movhi	r5,0
    48c4:	2954eb04 	addi	r5,r5,21420
    48c8:	0004e141 	jmpi	4e14 <_fwalk_reent>

000048cc <__sinit>:
    48cc:	20800e17 	ldw	r2,56(r4)
    48d0:	10000126 	beq	r2,zero,48d8 <__sinit+0xc>
    48d4:	f800283a 	ret
    48d8:	00045801 	jmpi	4580 <__sinit.part.1>

000048dc <__sfp_lock_acquire>:
    48dc:	f800283a 	ret

000048e0 <__sfp_lock_release>:
    48e0:	f800283a 	ret

000048e4 <__sinit_lock_acquire>:
    48e4:	f800283a 	ret

000048e8 <__sinit_lock_release>:
    48e8:	f800283a 	ret

000048ec <__fp_lock_all>:
    48ec:	00800034 	movhi	r2,0
    48f0:	109e9104 	addi	r2,r2,31300
    48f4:	11000017 	ldw	r4,0(r2)
    48f8:	01400034 	movhi	r5,0
    48fc:	2951c704 	addi	r5,r5,18204
    4900:	0004d501 	jmpi	4d50 <_fwalk>

00004904 <__fp_unlock_all>:
    4904:	00800034 	movhi	r2,0
    4908:	109e9104 	addi	r2,r2,31300
    490c:	11000017 	ldw	r4,0(r2)
    4910:	01400034 	movhi	r5,0
    4914:	29515b04 	addi	r5,r5,17772
    4918:	0004d501 	jmpi	4d50 <_fwalk>

0000491c <_malloc_trim_r>:
    491c:	defffb04 	addi	sp,sp,-20
    4920:	dcc00315 	stw	r19,12(sp)
    4924:	04c00034 	movhi	r19,0
    4928:	dc800215 	stw	r18,8(sp)
    492c:	dc400115 	stw	r17,4(sp)
    4930:	dc000015 	stw	r16,0(sp)
    4934:	dfc00415 	stw	ra,16(sp)
    4938:	2821883a 	mov	r16,r5
    493c:	9cdd8504 	addi	r19,r19,30228
    4940:	2025883a 	mov	r18,r4
    4944:	0005b600 	call	5b60 <__malloc_lock>
    4948:	98800217 	ldw	r2,8(r19)
    494c:	14400117 	ldw	r17,4(r2)
    4950:	00bfff04 	movi	r2,-4
    4954:	88a2703a 	and	r17,r17,r2
    4958:	8c21c83a 	sub	r16,r17,r16
    495c:	8403fbc4 	addi	r16,r16,4079
    4960:	8020d33a 	srli	r16,r16,12
    4964:	0083ffc4 	movi	r2,4095
    4968:	843fffc4 	addi	r16,r16,-1
    496c:	8020933a 	slli	r16,r16,12
    4970:	1400060e 	bge	r2,r16,498c <_malloc_trim_r+0x70>
    4974:	000b883a 	mov	r5,zero
    4978:	9009883a 	mov	r4,r18
    497c:	0003dac0 	call	3dac <_sbrk_r>
    4980:	98c00217 	ldw	r3,8(r19)
    4984:	1c47883a 	add	r3,r3,r17
    4988:	10c00a26 	beq	r2,r3,49b4 <_malloc_trim_r+0x98>
    498c:	9009883a 	mov	r4,r18
    4990:	0005b840 	call	5b84 <__malloc_unlock>
    4994:	0005883a 	mov	r2,zero
    4998:	dfc00417 	ldw	ra,16(sp)
    499c:	dcc00317 	ldw	r19,12(sp)
    49a0:	dc800217 	ldw	r18,8(sp)
    49a4:	dc400117 	ldw	r17,4(sp)
    49a8:	dc000017 	ldw	r16,0(sp)
    49ac:	dec00504 	addi	sp,sp,20
    49b0:	f800283a 	ret
    49b4:	040bc83a 	sub	r5,zero,r16
    49b8:	9009883a 	mov	r4,r18
    49bc:	0003dac0 	call	3dac <_sbrk_r>
    49c0:	00ffffc4 	movi	r3,-1
    49c4:	10c00d26 	beq	r2,r3,49fc <_malloc_trim_r+0xe0>
    49c8:	00c00074 	movhi	r3,1
    49cc:	18e53a04 	addi	r3,r3,-27416
    49d0:	18800017 	ldw	r2,0(r3)
    49d4:	99000217 	ldw	r4,8(r19)
    49d8:	8c23c83a 	sub	r17,r17,r16
    49dc:	8c400054 	ori	r17,r17,1
    49e0:	1421c83a 	sub	r16,r2,r16
    49e4:	24400115 	stw	r17,4(r4)
    49e8:	9009883a 	mov	r4,r18
    49ec:	1c000015 	stw	r16,0(r3)
    49f0:	0005b840 	call	5b84 <__malloc_unlock>
    49f4:	00800044 	movi	r2,1
    49f8:	003fe706 	br	4998 <_gp+0xffff4f7c>
    49fc:	000b883a 	mov	r5,zero
    4a00:	9009883a 	mov	r4,r18
    4a04:	0003dac0 	call	3dac <_sbrk_r>
    4a08:	99000217 	ldw	r4,8(r19)
    4a0c:	014003c4 	movi	r5,15
    4a10:	1107c83a 	sub	r3,r2,r4
    4a14:	28ffdd0e 	bge	r5,r3,498c <_gp+0xffff4f70>
    4a18:	01400034 	movhi	r5,0
    4a1c:	295e9204 	addi	r5,r5,31304
    4a20:	29400017 	ldw	r5,0(r5)
    4a24:	18c00054 	ori	r3,r3,1
    4a28:	20c00115 	stw	r3,4(r4)
    4a2c:	00c00074 	movhi	r3,1
    4a30:	1145c83a 	sub	r2,r2,r5
    4a34:	18e53a04 	addi	r3,r3,-27416
    4a38:	18800015 	stw	r2,0(r3)
    4a3c:	003fd306 	br	498c <_gp+0xffff4f70>

00004a40 <_free_r>:
    4a40:	28004126 	beq	r5,zero,4b48 <_free_r+0x108>
    4a44:	defffd04 	addi	sp,sp,-12
    4a48:	dc400115 	stw	r17,4(sp)
    4a4c:	dc000015 	stw	r16,0(sp)
    4a50:	2023883a 	mov	r17,r4
    4a54:	2821883a 	mov	r16,r5
    4a58:	dfc00215 	stw	ra,8(sp)
    4a5c:	0005b600 	call	5b60 <__malloc_lock>
    4a60:	81ffff17 	ldw	r7,-4(r16)
    4a64:	00bfff84 	movi	r2,-2
    4a68:	01000034 	movhi	r4,0
    4a6c:	81bffe04 	addi	r6,r16,-8
    4a70:	3884703a 	and	r2,r7,r2
    4a74:	211d8504 	addi	r4,r4,30228
    4a78:	308b883a 	add	r5,r6,r2
    4a7c:	2a400117 	ldw	r9,4(r5)
    4a80:	22000217 	ldw	r8,8(r4)
    4a84:	00ffff04 	movi	r3,-4
    4a88:	48c6703a 	and	r3,r9,r3
    4a8c:	2a005726 	beq	r5,r8,4bec <_free_r+0x1ac>
    4a90:	28c00115 	stw	r3,4(r5)
    4a94:	39c0004c 	andi	r7,r7,1
    4a98:	3800091e 	bne	r7,zero,4ac0 <_free_r+0x80>
    4a9c:	823ffe17 	ldw	r8,-8(r16)
    4aa0:	22400204 	addi	r9,r4,8
    4aa4:	320dc83a 	sub	r6,r6,r8
    4aa8:	31c00217 	ldw	r7,8(r6)
    4aac:	1205883a 	add	r2,r2,r8
    4ab0:	3a406526 	beq	r7,r9,4c48 <_free_r+0x208>
    4ab4:	32000317 	ldw	r8,12(r6)
    4ab8:	3a000315 	stw	r8,12(r7)
    4abc:	41c00215 	stw	r7,8(r8)
    4ac0:	28cf883a 	add	r7,r5,r3
    4ac4:	39c00117 	ldw	r7,4(r7)
    4ac8:	39c0004c 	andi	r7,r7,1
    4acc:	38003a26 	beq	r7,zero,4bb8 <_free_r+0x178>
    4ad0:	10c00054 	ori	r3,r2,1
    4ad4:	30c00115 	stw	r3,4(r6)
    4ad8:	3087883a 	add	r3,r6,r2
    4adc:	18800015 	stw	r2,0(r3)
    4ae0:	00c07fc4 	movi	r3,511
    4ae4:	18801936 	bltu	r3,r2,4b4c <_free_r+0x10c>
    4ae8:	1004d0fa 	srli	r2,r2,3
    4aec:	01c00044 	movi	r7,1
    4af0:	21400117 	ldw	r5,4(r4)
    4af4:	10c00044 	addi	r3,r2,1
    4af8:	18c7883a 	add	r3,r3,r3
    4afc:	1005d0ba 	srai	r2,r2,2
    4b00:	18c7883a 	add	r3,r3,r3
    4b04:	18c7883a 	add	r3,r3,r3
    4b08:	1907883a 	add	r3,r3,r4
    4b0c:	3884983a 	sll	r2,r7,r2
    4b10:	19c00017 	ldw	r7,0(r3)
    4b14:	1a3ffe04 	addi	r8,r3,-8
    4b18:	1144b03a 	or	r2,r2,r5
    4b1c:	32000315 	stw	r8,12(r6)
    4b20:	31c00215 	stw	r7,8(r6)
    4b24:	20800115 	stw	r2,4(r4)
    4b28:	19800015 	stw	r6,0(r3)
    4b2c:	39800315 	stw	r6,12(r7)
    4b30:	8809883a 	mov	r4,r17
    4b34:	dfc00217 	ldw	ra,8(sp)
    4b38:	dc400117 	ldw	r17,4(sp)
    4b3c:	dc000017 	ldw	r16,0(sp)
    4b40:	dec00304 	addi	sp,sp,12
    4b44:	0005b841 	jmpi	5b84 <__malloc_unlock>
    4b48:	f800283a 	ret
    4b4c:	100ad27a 	srli	r5,r2,9
    4b50:	00c00104 	movi	r3,4
    4b54:	19404a36 	bltu	r3,r5,4c80 <_free_r+0x240>
    4b58:	100ad1ba 	srli	r5,r2,6
    4b5c:	28c00e44 	addi	r3,r5,57
    4b60:	18c7883a 	add	r3,r3,r3
    4b64:	29400e04 	addi	r5,r5,56
    4b68:	18c7883a 	add	r3,r3,r3
    4b6c:	18c7883a 	add	r3,r3,r3
    4b70:	1909883a 	add	r4,r3,r4
    4b74:	20c00017 	ldw	r3,0(r4)
    4b78:	01c00034 	movhi	r7,0
    4b7c:	213ffe04 	addi	r4,r4,-8
    4b80:	39dd8504 	addi	r7,r7,30228
    4b84:	20c04426 	beq	r4,r3,4c98 <_free_r+0x258>
    4b88:	01ffff04 	movi	r7,-4
    4b8c:	19400117 	ldw	r5,4(r3)
    4b90:	29ca703a 	and	r5,r5,r7
    4b94:	1140022e 	bgeu	r2,r5,4ba0 <_free_r+0x160>
    4b98:	18c00217 	ldw	r3,8(r3)
    4b9c:	20fffb1e 	bne	r4,r3,4b8c <_gp+0xffff5170>
    4ba0:	19000317 	ldw	r4,12(r3)
    4ba4:	31000315 	stw	r4,12(r6)
    4ba8:	30c00215 	stw	r3,8(r6)
    4bac:	21800215 	stw	r6,8(r4)
    4bb0:	19800315 	stw	r6,12(r3)
    4bb4:	003fde06 	br	4b30 <_gp+0xffff5114>
    4bb8:	29c00217 	ldw	r7,8(r5)
    4bbc:	10c5883a 	add	r2,r2,r3
    4bc0:	00c00034 	movhi	r3,0
    4bc4:	18dd8704 	addi	r3,r3,30236
    4bc8:	38c03b26 	beq	r7,r3,4cb8 <_free_r+0x278>
    4bcc:	2a000317 	ldw	r8,12(r5)
    4bd0:	11400054 	ori	r5,r2,1
    4bd4:	3087883a 	add	r3,r6,r2
    4bd8:	3a000315 	stw	r8,12(r7)
    4bdc:	41c00215 	stw	r7,8(r8)
    4be0:	31400115 	stw	r5,4(r6)
    4be4:	18800015 	stw	r2,0(r3)
    4be8:	003fbd06 	br	4ae0 <_gp+0xffff50c4>
    4bec:	39c0004c 	andi	r7,r7,1
    4bf0:	10c5883a 	add	r2,r2,r3
    4bf4:	3800071e 	bne	r7,zero,4c14 <_free_r+0x1d4>
    4bf8:	81fffe17 	ldw	r7,-8(r16)
    4bfc:	31cdc83a 	sub	r6,r6,r7
    4c00:	30c00317 	ldw	r3,12(r6)
    4c04:	31400217 	ldw	r5,8(r6)
    4c08:	11c5883a 	add	r2,r2,r7
    4c0c:	28c00315 	stw	r3,12(r5)
    4c10:	19400215 	stw	r5,8(r3)
    4c14:	10c00054 	ori	r3,r2,1
    4c18:	30c00115 	stw	r3,4(r6)
    4c1c:	00c00034 	movhi	r3,0
    4c20:	18de9304 	addi	r3,r3,31308
    4c24:	18c00017 	ldw	r3,0(r3)
    4c28:	21800215 	stw	r6,8(r4)
    4c2c:	10ffc036 	bltu	r2,r3,4b30 <_gp+0xffff5114>
    4c30:	00800074 	movhi	r2,1
    4c34:	10a53904 	addi	r2,r2,-27420
    4c38:	11400017 	ldw	r5,0(r2)
    4c3c:	8809883a 	mov	r4,r17
    4c40:	000491c0 	call	491c <_malloc_trim_r>
    4c44:	003fba06 	br	4b30 <_gp+0xffff5114>
    4c48:	28c9883a 	add	r4,r5,r3
    4c4c:	21000117 	ldw	r4,4(r4)
    4c50:	2100004c 	andi	r4,r4,1
    4c54:	2000391e 	bne	r4,zero,4d3c <_free_r+0x2fc>
    4c58:	29c00217 	ldw	r7,8(r5)
    4c5c:	29000317 	ldw	r4,12(r5)
    4c60:	1885883a 	add	r2,r3,r2
    4c64:	10c00054 	ori	r3,r2,1
    4c68:	39000315 	stw	r4,12(r7)
    4c6c:	21c00215 	stw	r7,8(r4)
    4c70:	30c00115 	stw	r3,4(r6)
    4c74:	308d883a 	add	r6,r6,r2
    4c78:	30800015 	stw	r2,0(r6)
    4c7c:	003fac06 	br	4b30 <_gp+0xffff5114>
    4c80:	00c00504 	movi	r3,20
    4c84:	19401536 	bltu	r3,r5,4cdc <_free_r+0x29c>
    4c88:	28c01704 	addi	r3,r5,92
    4c8c:	18c7883a 	add	r3,r3,r3
    4c90:	294016c4 	addi	r5,r5,91
    4c94:	003fb406 	br	4b68 <_gp+0xffff514c>
    4c98:	280bd0ba 	srai	r5,r5,2
    4c9c:	00c00044 	movi	r3,1
    4ca0:	38800117 	ldw	r2,4(r7)
    4ca4:	194a983a 	sll	r5,r3,r5
    4ca8:	2007883a 	mov	r3,r4
    4cac:	2884b03a 	or	r2,r5,r2
    4cb0:	38800115 	stw	r2,4(r7)
    4cb4:	003fbb06 	br	4ba4 <_gp+0xffff5188>
    4cb8:	21800515 	stw	r6,20(r4)
    4cbc:	21800415 	stw	r6,16(r4)
    4cc0:	10c00054 	ori	r3,r2,1
    4cc4:	31c00315 	stw	r7,12(r6)
    4cc8:	31c00215 	stw	r7,8(r6)
    4ccc:	30c00115 	stw	r3,4(r6)
    4cd0:	308d883a 	add	r6,r6,r2
    4cd4:	30800015 	stw	r2,0(r6)
    4cd8:	003f9506 	br	4b30 <_gp+0xffff5114>
    4cdc:	00c01504 	movi	r3,84
    4ce0:	19400536 	bltu	r3,r5,4cf8 <_free_r+0x2b8>
    4ce4:	100ad33a 	srli	r5,r2,12
    4ce8:	28c01bc4 	addi	r3,r5,111
    4cec:	18c7883a 	add	r3,r3,r3
    4cf0:	29401b84 	addi	r5,r5,110
    4cf4:	003f9c06 	br	4b68 <_gp+0xffff514c>
    4cf8:	00c05504 	movi	r3,340
    4cfc:	19400536 	bltu	r3,r5,4d14 <_free_r+0x2d4>
    4d00:	100ad3fa 	srli	r5,r2,15
    4d04:	28c01e04 	addi	r3,r5,120
    4d08:	18c7883a 	add	r3,r3,r3
    4d0c:	29401dc4 	addi	r5,r5,119
    4d10:	003f9506 	br	4b68 <_gp+0xffff514c>
    4d14:	00c15504 	movi	r3,1364
    4d18:	19400536 	bltu	r3,r5,4d30 <_free_r+0x2f0>
    4d1c:	100ad4ba 	srli	r5,r2,18
    4d20:	28c01f44 	addi	r3,r5,125
    4d24:	18c7883a 	add	r3,r3,r3
    4d28:	29401f04 	addi	r5,r5,124
    4d2c:	003f8e06 	br	4b68 <_gp+0xffff514c>
    4d30:	00c03f84 	movi	r3,254
    4d34:	01401f84 	movi	r5,126
    4d38:	003f8b06 	br	4b68 <_gp+0xffff514c>
    4d3c:	10c00054 	ori	r3,r2,1
    4d40:	30c00115 	stw	r3,4(r6)
    4d44:	308d883a 	add	r6,r6,r2
    4d48:	30800015 	stw	r2,0(r6)
    4d4c:	003f7806 	br	4b30 <_gp+0xffff5114>

00004d50 <_fwalk>:
    4d50:	defff704 	addi	sp,sp,-36
    4d54:	dd000415 	stw	r20,16(sp)
    4d58:	dfc00815 	stw	ra,32(sp)
    4d5c:	ddc00715 	stw	r23,28(sp)
    4d60:	dd800615 	stw	r22,24(sp)
    4d64:	dd400515 	stw	r21,20(sp)
    4d68:	dcc00315 	stw	r19,12(sp)
    4d6c:	dc800215 	stw	r18,8(sp)
    4d70:	dc400115 	stw	r17,4(sp)
    4d74:	dc000015 	stw	r16,0(sp)
    4d78:	2500b804 	addi	r20,r4,736
    4d7c:	a0002326 	beq	r20,zero,4e0c <_fwalk+0xbc>
    4d80:	282b883a 	mov	r21,r5
    4d84:	002f883a 	mov	r23,zero
    4d88:	05800044 	movi	r22,1
    4d8c:	04ffffc4 	movi	r19,-1
    4d90:	a4400117 	ldw	r17,4(r20)
    4d94:	a4800217 	ldw	r18,8(r20)
    4d98:	8c7fffc4 	addi	r17,r17,-1
    4d9c:	88000d16 	blt	r17,zero,4dd4 <_fwalk+0x84>
    4da0:	94000304 	addi	r16,r18,12
    4da4:	94800384 	addi	r18,r18,14
    4da8:	8080000b 	ldhu	r2,0(r16)
    4dac:	8c7fffc4 	addi	r17,r17,-1
    4db0:	813ffd04 	addi	r4,r16,-12
    4db4:	b080042e 	bgeu	r22,r2,4dc8 <_fwalk+0x78>
    4db8:	9080000f 	ldh	r2,0(r18)
    4dbc:	14c00226 	beq	r2,r19,4dc8 <_fwalk+0x78>
    4dc0:	a83ee83a 	callr	r21
    4dc4:	b8aeb03a 	or	r23,r23,r2
    4dc8:	84001a04 	addi	r16,r16,104
    4dcc:	94801a04 	addi	r18,r18,104
    4dd0:	8cfff51e 	bne	r17,r19,4da8 <_gp+0xffff538c>
    4dd4:	a5000017 	ldw	r20,0(r20)
    4dd8:	a03fed1e 	bne	r20,zero,4d90 <_gp+0xffff5374>
    4ddc:	b805883a 	mov	r2,r23
    4de0:	dfc00817 	ldw	ra,32(sp)
    4de4:	ddc00717 	ldw	r23,28(sp)
    4de8:	dd800617 	ldw	r22,24(sp)
    4dec:	dd400517 	ldw	r21,20(sp)
    4df0:	dd000417 	ldw	r20,16(sp)
    4df4:	dcc00317 	ldw	r19,12(sp)
    4df8:	dc800217 	ldw	r18,8(sp)
    4dfc:	dc400117 	ldw	r17,4(sp)
    4e00:	dc000017 	ldw	r16,0(sp)
    4e04:	dec00904 	addi	sp,sp,36
    4e08:	f800283a 	ret
    4e0c:	002f883a 	mov	r23,zero
    4e10:	003ff206 	br	4ddc <_gp+0xffff53c0>

00004e14 <_fwalk_reent>:
    4e14:	defff704 	addi	sp,sp,-36
    4e18:	dd000415 	stw	r20,16(sp)
    4e1c:	dfc00815 	stw	ra,32(sp)
    4e20:	ddc00715 	stw	r23,28(sp)
    4e24:	dd800615 	stw	r22,24(sp)
    4e28:	dd400515 	stw	r21,20(sp)
    4e2c:	dcc00315 	stw	r19,12(sp)
    4e30:	dc800215 	stw	r18,8(sp)
    4e34:	dc400115 	stw	r17,4(sp)
    4e38:	dc000015 	stw	r16,0(sp)
    4e3c:	2500b804 	addi	r20,r4,736
    4e40:	a0002326 	beq	r20,zero,4ed0 <_fwalk_reent+0xbc>
    4e44:	282b883a 	mov	r21,r5
    4e48:	2027883a 	mov	r19,r4
    4e4c:	002f883a 	mov	r23,zero
    4e50:	05800044 	movi	r22,1
    4e54:	04bfffc4 	movi	r18,-1
    4e58:	a4400117 	ldw	r17,4(r20)
    4e5c:	a4000217 	ldw	r16,8(r20)
    4e60:	8c7fffc4 	addi	r17,r17,-1
    4e64:	88000c16 	blt	r17,zero,4e98 <_fwalk_reent+0x84>
    4e68:	84000304 	addi	r16,r16,12
    4e6c:	8080000b 	ldhu	r2,0(r16)
    4e70:	8c7fffc4 	addi	r17,r17,-1
    4e74:	817ffd04 	addi	r5,r16,-12
    4e78:	b080052e 	bgeu	r22,r2,4e90 <_fwalk_reent+0x7c>
    4e7c:	8080008f 	ldh	r2,2(r16)
    4e80:	9809883a 	mov	r4,r19
    4e84:	14800226 	beq	r2,r18,4e90 <_fwalk_reent+0x7c>
    4e88:	a83ee83a 	callr	r21
    4e8c:	b8aeb03a 	or	r23,r23,r2
    4e90:	84001a04 	addi	r16,r16,104
    4e94:	8cbff51e 	bne	r17,r18,4e6c <_gp+0xffff5450>
    4e98:	a5000017 	ldw	r20,0(r20)
    4e9c:	a03fee1e 	bne	r20,zero,4e58 <_gp+0xffff543c>
    4ea0:	b805883a 	mov	r2,r23
    4ea4:	dfc00817 	ldw	ra,32(sp)
    4ea8:	ddc00717 	ldw	r23,28(sp)
    4eac:	dd800617 	ldw	r22,24(sp)
    4eb0:	dd400517 	ldw	r21,20(sp)
    4eb4:	dd000417 	ldw	r20,16(sp)
    4eb8:	dcc00317 	ldw	r19,12(sp)
    4ebc:	dc800217 	ldw	r18,8(sp)
    4ec0:	dc400117 	ldw	r17,4(sp)
    4ec4:	dc000017 	ldw	r16,0(sp)
    4ec8:	dec00904 	addi	sp,sp,36
    4ecc:	f800283a 	ret
    4ed0:	002f883a 	mov	r23,zero
    4ed4:	003ff206 	br	4ea0 <_gp+0xffff5484>

00004ed8 <__smakebuf_r>:
    4ed8:	2880030b 	ldhu	r2,12(r5)
    4edc:	10c0008c 	andi	r3,r2,2
    4ee0:	1800411e 	bne	r3,zero,4fe8 <__smakebuf_r+0x110>
    4ee4:	deffec04 	addi	sp,sp,-80
    4ee8:	dc000f15 	stw	r16,60(sp)
    4eec:	2821883a 	mov	r16,r5
    4ef0:	2940038f 	ldh	r5,14(r5)
    4ef4:	dc401015 	stw	r17,64(sp)
    4ef8:	dfc01315 	stw	ra,76(sp)
    4efc:	dcc01215 	stw	r19,72(sp)
    4f00:	dc801115 	stw	r18,68(sp)
    4f04:	2023883a 	mov	r17,r4
    4f08:	28001c16 	blt	r5,zero,4f7c <__smakebuf_r+0xa4>
    4f0c:	d80d883a 	mov	r6,sp
    4f10:	00054b00 	call	54b0 <_fstat_r>
    4f14:	10001816 	blt	r2,zero,4f78 <__smakebuf_r+0xa0>
    4f18:	d8800117 	ldw	r2,4(sp)
    4f1c:	00e00014 	movui	r3,32768
    4f20:	10bc000c 	andi	r2,r2,61440
    4f24:	14c80020 	cmpeqi	r19,r2,8192
    4f28:	10c03726 	beq	r2,r3,5008 <__smakebuf_r+0x130>
    4f2c:	80c0030b 	ldhu	r3,12(r16)
    4f30:	18c20014 	ori	r3,r3,2048
    4f34:	80c0030d 	sth	r3,12(r16)
    4f38:	00c80004 	movi	r3,8192
    4f3c:	10c0521e 	bne	r2,r3,5088 <__smakebuf_r+0x1b0>
    4f40:	8140038f 	ldh	r5,14(r16)
    4f44:	8809883a 	mov	r4,r17
    4f48:	000550c0 	call	550c <_isatty_r>
    4f4c:	10004c26 	beq	r2,zero,5080 <__smakebuf_r+0x1a8>
    4f50:	8080030b 	ldhu	r2,12(r16)
    4f54:	80c010c4 	addi	r3,r16,67
    4f58:	80c00015 	stw	r3,0(r16)
    4f5c:	10800054 	ori	r2,r2,1
    4f60:	8080030d 	sth	r2,12(r16)
    4f64:	00800044 	movi	r2,1
    4f68:	80c00415 	stw	r3,16(r16)
    4f6c:	80800515 	stw	r2,20(r16)
    4f70:	04810004 	movi	r18,1024
    4f74:	00000706 	br	4f94 <__smakebuf_r+0xbc>
    4f78:	8080030b 	ldhu	r2,12(r16)
    4f7c:	10c0200c 	andi	r3,r2,128
    4f80:	18001f1e 	bne	r3,zero,5000 <__smakebuf_r+0x128>
    4f84:	04810004 	movi	r18,1024
    4f88:	10820014 	ori	r2,r2,2048
    4f8c:	8080030d 	sth	r2,12(r16)
    4f90:	0027883a 	mov	r19,zero
    4f94:	900b883a 	mov	r5,r18
    4f98:	8809883a 	mov	r4,r17
    4f9c:	0002ad00 	call	2ad0 <_malloc_r>
    4fa0:	10002c26 	beq	r2,zero,5054 <__smakebuf_r+0x17c>
    4fa4:	80c0030b 	ldhu	r3,12(r16)
    4fa8:	01000034 	movhi	r4,0
    4fac:	21115d04 	addi	r4,r4,17780
    4fb0:	89000f15 	stw	r4,60(r17)
    4fb4:	18c02014 	ori	r3,r3,128
    4fb8:	80c0030d 	sth	r3,12(r16)
    4fbc:	80800015 	stw	r2,0(r16)
    4fc0:	80800415 	stw	r2,16(r16)
    4fc4:	84800515 	stw	r18,20(r16)
    4fc8:	98001a1e 	bne	r19,zero,5034 <__smakebuf_r+0x15c>
    4fcc:	dfc01317 	ldw	ra,76(sp)
    4fd0:	dcc01217 	ldw	r19,72(sp)
    4fd4:	dc801117 	ldw	r18,68(sp)
    4fd8:	dc401017 	ldw	r17,64(sp)
    4fdc:	dc000f17 	ldw	r16,60(sp)
    4fe0:	dec01404 	addi	sp,sp,80
    4fe4:	f800283a 	ret
    4fe8:	288010c4 	addi	r2,r5,67
    4fec:	28800015 	stw	r2,0(r5)
    4ff0:	28800415 	stw	r2,16(r5)
    4ff4:	00800044 	movi	r2,1
    4ff8:	28800515 	stw	r2,20(r5)
    4ffc:	f800283a 	ret
    5000:	04801004 	movi	r18,64
    5004:	003fe006 	br	4f88 <_gp+0xffff556c>
    5008:	81000a17 	ldw	r4,40(r16)
    500c:	00c00034 	movhi	r3,0
    5010:	18d4a504 	addi	r3,r3,21140
    5014:	20ffc51e 	bne	r4,r3,4f2c <_gp+0xffff5510>
    5018:	8080030b 	ldhu	r2,12(r16)
    501c:	04810004 	movi	r18,1024
    5020:	84801315 	stw	r18,76(r16)
    5024:	1484b03a 	or	r2,r2,r18
    5028:	8080030d 	sth	r2,12(r16)
    502c:	0027883a 	mov	r19,zero
    5030:	003fd806 	br	4f94 <_gp+0xffff5578>
    5034:	8140038f 	ldh	r5,14(r16)
    5038:	8809883a 	mov	r4,r17
    503c:	000550c0 	call	550c <_isatty_r>
    5040:	103fe226 	beq	r2,zero,4fcc <_gp+0xffff55b0>
    5044:	8080030b 	ldhu	r2,12(r16)
    5048:	10800054 	ori	r2,r2,1
    504c:	8080030d 	sth	r2,12(r16)
    5050:	003fde06 	br	4fcc <_gp+0xffff55b0>
    5054:	8080030b 	ldhu	r2,12(r16)
    5058:	10c0800c 	andi	r3,r2,512
    505c:	183fdb1e 	bne	r3,zero,4fcc <_gp+0xffff55b0>
    5060:	10800094 	ori	r2,r2,2
    5064:	80c010c4 	addi	r3,r16,67
    5068:	8080030d 	sth	r2,12(r16)
    506c:	00800044 	movi	r2,1
    5070:	80c00015 	stw	r3,0(r16)
    5074:	80c00415 	stw	r3,16(r16)
    5078:	80800515 	stw	r2,20(r16)
    507c:	003fd306 	br	4fcc <_gp+0xffff55b0>
    5080:	04810004 	movi	r18,1024
    5084:	003fc306 	br	4f94 <_gp+0xffff5578>
    5088:	0027883a 	mov	r19,zero
    508c:	04810004 	movi	r18,1024
    5090:	003fc006 	br	4f94 <_gp+0xffff5578>

00005094 <memset>:
    5094:	20c000cc 	andi	r3,r4,3
    5098:	2005883a 	mov	r2,r4
    509c:	18004426 	beq	r3,zero,51b0 <memset+0x11c>
    50a0:	31ffffc4 	addi	r7,r6,-1
    50a4:	30004026 	beq	r6,zero,51a8 <memset+0x114>
    50a8:	2813883a 	mov	r9,r5
    50ac:	200d883a 	mov	r6,r4
    50b0:	2007883a 	mov	r3,r4
    50b4:	00000406 	br	50c8 <memset+0x34>
    50b8:	3a3fffc4 	addi	r8,r7,-1
    50bc:	31800044 	addi	r6,r6,1
    50c0:	38003926 	beq	r7,zero,51a8 <memset+0x114>
    50c4:	400f883a 	mov	r7,r8
    50c8:	18c00044 	addi	r3,r3,1
    50cc:	32400005 	stb	r9,0(r6)
    50d0:	1a0000cc 	andi	r8,r3,3
    50d4:	403ff81e 	bne	r8,zero,50b8 <_gp+0xffff569c>
    50d8:	010000c4 	movi	r4,3
    50dc:	21c02d2e 	bgeu	r4,r7,5194 <memset+0x100>
    50e0:	29003fcc 	andi	r4,r5,255
    50e4:	200c923a 	slli	r6,r4,8
    50e8:	3108b03a 	or	r4,r6,r4
    50ec:	200c943a 	slli	r6,r4,16
    50f0:	218cb03a 	or	r6,r4,r6
    50f4:	010003c4 	movi	r4,15
    50f8:	21c0182e 	bgeu	r4,r7,515c <memset+0xc8>
    50fc:	3b3ffc04 	addi	r12,r7,-16
    5100:	6018d13a 	srli	r12,r12,4
    5104:	1a000104 	addi	r8,r3,4
    5108:	1ac00204 	addi	r11,r3,8
    510c:	6008913a 	slli	r4,r12,4
    5110:	1a800304 	addi	r10,r3,12
    5114:	1813883a 	mov	r9,r3
    5118:	21000504 	addi	r4,r4,20
    511c:	1909883a 	add	r4,r3,r4
    5120:	49800015 	stw	r6,0(r9)
    5124:	41800015 	stw	r6,0(r8)
    5128:	59800015 	stw	r6,0(r11)
    512c:	51800015 	stw	r6,0(r10)
    5130:	42000404 	addi	r8,r8,16
    5134:	4a400404 	addi	r9,r9,16
    5138:	5ac00404 	addi	r11,r11,16
    513c:	52800404 	addi	r10,r10,16
    5140:	413ff71e 	bne	r8,r4,5120 <_gp+0xffff5704>
    5144:	63000044 	addi	r12,r12,1
    5148:	6018913a 	slli	r12,r12,4
    514c:	39c003cc 	andi	r7,r7,15
    5150:	010000c4 	movi	r4,3
    5154:	1b07883a 	add	r3,r3,r12
    5158:	21c00e2e 	bgeu	r4,r7,5194 <memset+0x100>
    515c:	1813883a 	mov	r9,r3
    5160:	3811883a 	mov	r8,r7
    5164:	010000c4 	movi	r4,3
    5168:	49800015 	stw	r6,0(r9)
    516c:	423fff04 	addi	r8,r8,-4
    5170:	4a400104 	addi	r9,r9,4
    5174:	223ffc36 	bltu	r4,r8,5168 <_gp+0xffff574c>
    5178:	393fff04 	addi	r4,r7,-4
    517c:	2008d0ba 	srli	r4,r4,2
    5180:	39c000cc 	andi	r7,r7,3
    5184:	21000044 	addi	r4,r4,1
    5188:	2109883a 	add	r4,r4,r4
    518c:	2109883a 	add	r4,r4,r4
    5190:	1907883a 	add	r3,r3,r4
    5194:	38000526 	beq	r7,zero,51ac <memset+0x118>
    5198:	19cf883a 	add	r7,r3,r7
    519c:	19400005 	stb	r5,0(r3)
    51a0:	18c00044 	addi	r3,r3,1
    51a4:	38fffd1e 	bne	r7,r3,519c <_gp+0xffff5780>
    51a8:	f800283a 	ret
    51ac:	f800283a 	ret
    51b0:	2007883a 	mov	r3,r4
    51b4:	300f883a 	mov	r7,r6
    51b8:	003fc706 	br	50d8 <_gp+0xffff56bc>

000051bc <__sread>:
    51bc:	defffe04 	addi	sp,sp,-8
    51c0:	dc000015 	stw	r16,0(sp)
    51c4:	2821883a 	mov	r16,r5
    51c8:	2940038f 	ldh	r5,14(r5)
    51cc:	dfc00115 	stw	ra,4(sp)
    51d0:	00055c00 	call	55c0 <_read_r>
    51d4:	10000716 	blt	r2,zero,51f4 <__sread+0x38>
    51d8:	80c01417 	ldw	r3,80(r16)
    51dc:	1887883a 	add	r3,r3,r2
    51e0:	80c01415 	stw	r3,80(r16)
    51e4:	dfc00117 	ldw	ra,4(sp)
    51e8:	dc000017 	ldw	r16,0(sp)
    51ec:	dec00204 	addi	sp,sp,8
    51f0:	f800283a 	ret
    51f4:	80c0030b 	ldhu	r3,12(r16)
    51f8:	18fbffcc 	andi	r3,r3,61439
    51fc:	80c0030d 	sth	r3,12(r16)
    5200:	dfc00117 	ldw	ra,4(sp)
    5204:	dc000017 	ldw	r16,0(sp)
    5208:	dec00204 	addi	sp,sp,8
    520c:	f800283a 	ret

00005210 <__seofread>:
    5210:	0005883a 	mov	r2,zero
    5214:	f800283a 	ret

00005218 <__swrite>:
    5218:	2880030b 	ldhu	r2,12(r5)
    521c:	defffb04 	addi	sp,sp,-20
    5220:	dcc00315 	stw	r19,12(sp)
    5224:	dc800215 	stw	r18,8(sp)
    5228:	dc400115 	stw	r17,4(sp)
    522c:	dc000015 	stw	r16,0(sp)
    5230:	dfc00415 	stw	ra,16(sp)
    5234:	10c0400c 	andi	r3,r2,256
    5238:	2821883a 	mov	r16,r5
    523c:	2023883a 	mov	r17,r4
    5240:	3025883a 	mov	r18,r6
    5244:	3827883a 	mov	r19,r7
    5248:	18000526 	beq	r3,zero,5260 <__swrite+0x48>
    524c:	2940038f 	ldh	r5,14(r5)
    5250:	01c00084 	movi	r7,2
    5254:	000d883a 	mov	r6,zero
    5258:	00055600 	call	5560 <_lseek_r>
    525c:	8080030b 	ldhu	r2,12(r16)
    5260:	8140038f 	ldh	r5,14(r16)
    5264:	10bbffcc 	andi	r2,r2,61439
    5268:	980f883a 	mov	r7,r19
    526c:	900d883a 	mov	r6,r18
    5270:	8809883a 	mov	r4,r17
    5274:	8080030d 	sth	r2,12(r16)
    5278:	dfc00417 	ldw	ra,16(sp)
    527c:	dcc00317 	ldw	r19,12(sp)
    5280:	dc800217 	ldw	r18,8(sp)
    5284:	dc400117 	ldw	r17,4(sp)
    5288:	dc000017 	ldw	r16,0(sp)
    528c:	dec00504 	addi	sp,sp,20
    5290:	00052f81 	jmpi	52f8 <_write_r>

00005294 <__sseek>:
    5294:	defffe04 	addi	sp,sp,-8
    5298:	dc000015 	stw	r16,0(sp)
    529c:	2821883a 	mov	r16,r5
    52a0:	2940038f 	ldh	r5,14(r5)
    52a4:	dfc00115 	stw	ra,4(sp)
    52a8:	00055600 	call	5560 <_lseek_r>
    52ac:	00ffffc4 	movi	r3,-1
    52b0:	10c00826 	beq	r2,r3,52d4 <__sseek+0x40>
    52b4:	80c0030b 	ldhu	r3,12(r16)
    52b8:	80801415 	stw	r2,80(r16)
    52bc:	18c40014 	ori	r3,r3,4096
    52c0:	80c0030d 	sth	r3,12(r16)
    52c4:	dfc00117 	ldw	ra,4(sp)
    52c8:	dc000017 	ldw	r16,0(sp)
    52cc:	dec00204 	addi	sp,sp,8
    52d0:	f800283a 	ret
    52d4:	80c0030b 	ldhu	r3,12(r16)
    52d8:	18fbffcc 	andi	r3,r3,61439
    52dc:	80c0030d 	sth	r3,12(r16)
    52e0:	dfc00117 	ldw	ra,4(sp)
    52e4:	dc000017 	ldw	r16,0(sp)
    52e8:	dec00204 	addi	sp,sp,8
    52ec:	f800283a 	ret

000052f0 <__sclose>:
    52f0:	2940038f 	ldh	r5,14(r5)
    52f4:	00053581 	jmpi	5358 <_close_r>

000052f8 <_write_r>:
    52f8:	defffd04 	addi	sp,sp,-12
    52fc:	2805883a 	mov	r2,r5
    5300:	dc000015 	stw	r16,0(sp)
    5304:	04000074 	movhi	r16,1
    5308:	dc400115 	stw	r17,4(sp)
    530c:	300b883a 	mov	r5,r6
    5310:	84253604 	addi	r16,r16,-27432
    5314:	2023883a 	mov	r17,r4
    5318:	380d883a 	mov	r6,r7
    531c:	1009883a 	mov	r4,r2
    5320:	dfc00215 	stw	ra,8(sp)
    5324:	80000015 	stw	zero,0(r16)
    5328:	0005dfc0 	call	5dfc <write>
    532c:	00ffffc4 	movi	r3,-1
    5330:	10c00526 	beq	r2,r3,5348 <_write_r+0x50>
    5334:	dfc00217 	ldw	ra,8(sp)
    5338:	dc400117 	ldw	r17,4(sp)
    533c:	dc000017 	ldw	r16,0(sp)
    5340:	dec00304 	addi	sp,sp,12
    5344:	f800283a 	ret
    5348:	80c00017 	ldw	r3,0(r16)
    534c:	183ff926 	beq	r3,zero,5334 <_gp+0xffff5918>
    5350:	88c00015 	stw	r3,0(r17)
    5354:	003ff706 	br	5334 <_gp+0xffff5918>

00005358 <_close_r>:
    5358:	defffd04 	addi	sp,sp,-12
    535c:	dc000015 	stw	r16,0(sp)
    5360:	04000074 	movhi	r16,1
    5364:	dc400115 	stw	r17,4(sp)
    5368:	84253604 	addi	r16,r16,-27432
    536c:	2023883a 	mov	r17,r4
    5370:	2809883a 	mov	r4,r5
    5374:	dfc00215 	stw	ra,8(sp)
    5378:	80000015 	stw	zero,0(r16)
    537c:	000174c0 	call	174c <close>
    5380:	00ffffc4 	movi	r3,-1
    5384:	10c00526 	beq	r2,r3,539c <_close_r+0x44>
    5388:	dfc00217 	ldw	ra,8(sp)
    538c:	dc400117 	ldw	r17,4(sp)
    5390:	dc000017 	ldw	r16,0(sp)
    5394:	dec00304 	addi	sp,sp,12
    5398:	f800283a 	ret
    539c:	80c00017 	ldw	r3,0(r16)
    53a0:	183ff926 	beq	r3,zero,5388 <_gp+0xffff596c>
    53a4:	88c00015 	stw	r3,0(r17)
    53a8:	003ff706 	br	5388 <_gp+0xffff596c>

000053ac <_fclose_r>:
    53ac:	28003926 	beq	r5,zero,5494 <_fclose_r+0xe8>
    53b0:	defffc04 	addi	sp,sp,-16
    53b4:	dc400115 	stw	r17,4(sp)
    53b8:	dc000015 	stw	r16,0(sp)
    53bc:	dfc00315 	stw	ra,12(sp)
    53c0:	dc800215 	stw	r18,8(sp)
    53c4:	2023883a 	mov	r17,r4
    53c8:	2821883a 	mov	r16,r5
    53cc:	20000226 	beq	r4,zero,53d8 <_fclose_r+0x2c>
    53d0:	20800e17 	ldw	r2,56(r4)
    53d4:	10002726 	beq	r2,zero,5474 <_fclose_r+0xc8>
    53d8:	8080030f 	ldh	r2,12(r16)
    53dc:	1000071e 	bne	r2,zero,53fc <_fclose_r+0x50>
    53e0:	0005883a 	mov	r2,zero
    53e4:	dfc00317 	ldw	ra,12(sp)
    53e8:	dc800217 	ldw	r18,8(sp)
    53ec:	dc400117 	ldw	r17,4(sp)
    53f0:	dc000017 	ldw	r16,0(sp)
    53f4:	dec00404 	addi	sp,sp,16
    53f8:	f800283a 	ret
    53fc:	800b883a 	mov	r5,r16
    5400:	8809883a 	mov	r4,r17
    5404:	00042c40 	call	42c4 <__sflush_r>
    5408:	1025883a 	mov	r18,r2
    540c:	80800b17 	ldw	r2,44(r16)
    5410:	10000426 	beq	r2,zero,5424 <_fclose_r+0x78>
    5414:	81400717 	ldw	r5,28(r16)
    5418:	8809883a 	mov	r4,r17
    541c:	103ee83a 	callr	r2
    5420:	10001616 	blt	r2,zero,547c <_fclose_r+0xd0>
    5424:	8080030b 	ldhu	r2,12(r16)
    5428:	1080200c 	andi	r2,r2,128
    542c:	1000151e 	bne	r2,zero,5484 <_fclose_r+0xd8>
    5430:	81400c17 	ldw	r5,48(r16)
    5434:	28000526 	beq	r5,zero,544c <_fclose_r+0xa0>
    5438:	80801004 	addi	r2,r16,64
    543c:	28800226 	beq	r5,r2,5448 <_fclose_r+0x9c>
    5440:	8809883a 	mov	r4,r17
    5444:	0004a400 	call	4a40 <_free_r>
    5448:	80000c15 	stw	zero,48(r16)
    544c:	81401117 	ldw	r5,68(r16)
    5450:	28000326 	beq	r5,zero,5460 <_fclose_r+0xb4>
    5454:	8809883a 	mov	r4,r17
    5458:	0004a400 	call	4a40 <_free_r>
    545c:	80001115 	stw	zero,68(r16)
    5460:	00048dc0 	call	48dc <__sfp_lock_acquire>
    5464:	8000030d 	sth	zero,12(r16)
    5468:	00048e00 	call	48e0 <__sfp_lock_release>
    546c:	9005883a 	mov	r2,r18
    5470:	003fdc06 	br	53e4 <_gp+0xffff59c8>
    5474:	00048cc0 	call	48cc <__sinit>
    5478:	003fd706 	br	53d8 <_gp+0xffff59bc>
    547c:	04bfffc4 	movi	r18,-1
    5480:	003fe806 	br	5424 <_gp+0xffff5a08>
    5484:	81400417 	ldw	r5,16(r16)
    5488:	8809883a 	mov	r4,r17
    548c:	0004a400 	call	4a40 <_free_r>
    5490:	003fe706 	br	5430 <_gp+0xffff5a14>
    5494:	0005883a 	mov	r2,zero
    5498:	f800283a 	ret

0000549c <fclose>:
    549c:	00800034 	movhi	r2,0
    54a0:	109e9104 	addi	r2,r2,31300
    54a4:	200b883a 	mov	r5,r4
    54a8:	11000017 	ldw	r4,0(r2)
    54ac:	00053ac1 	jmpi	53ac <_fclose_r>

000054b0 <_fstat_r>:
    54b0:	defffd04 	addi	sp,sp,-12
    54b4:	2805883a 	mov	r2,r5
    54b8:	dc000015 	stw	r16,0(sp)
    54bc:	04000074 	movhi	r16,1
    54c0:	dc400115 	stw	r17,4(sp)
    54c4:	84253604 	addi	r16,r16,-27432
    54c8:	2023883a 	mov	r17,r4
    54cc:	300b883a 	mov	r5,r6
    54d0:	1009883a 	mov	r4,r2
    54d4:	dfc00215 	stw	ra,8(sp)
    54d8:	80000015 	stw	zero,0(r16)
    54dc:	00058800 	call	5880 <fstat>
    54e0:	00ffffc4 	movi	r3,-1
    54e4:	10c00526 	beq	r2,r3,54fc <_fstat_r+0x4c>
    54e8:	dfc00217 	ldw	ra,8(sp)
    54ec:	dc400117 	ldw	r17,4(sp)
    54f0:	dc000017 	ldw	r16,0(sp)
    54f4:	dec00304 	addi	sp,sp,12
    54f8:	f800283a 	ret
    54fc:	80c00017 	ldw	r3,0(r16)
    5500:	183ff926 	beq	r3,zero,54e8 <_gp+0xffff5acc>
    5504:	88c00015 	stw	r3,0(r17)
    5508:	003ff706 	br	54e8 <_gp+0xffff5acc>

0000550c <_isatty_r>:
    550c:	defffd04 	addi	sp,sp,-12
    5510:	dc000015 	stw	r16,0(sp)
    5514:	04000074 	movhi	r16,1
    5518:	dc400115 	stw	r17,4(sp)
    551c:	84253604 	addi	r16,r16,-27432
    5520:	2023883a 	mov	r17,r4
    5524:	2809883a 	mov	r4,r5
    5528:	dfc00215 	stw	ra,8(sp)
    552c:	80000015 	stw	zero,0(r16)
    5530:	00059880 	call	5988 <isatty>
    5534:	00ffffc4 	movi	r3,-1
    5538:	10c00526 	beq	r2,r3,5550 <_isatty_r+0x44>
    553c:	dfc00217 	ldw	ra,8(sp)
    5540:	dc400117 	ldw	r17,4(sp)
    5544:	dc000017 	ldw	r16,0(sp)
    5548:	dec00304 	addi	sp,sp,12
    554c:	f800283a 	ret
    5550:	80c00017 	ldw	r3,0(r16)
    5554:	183ff926 	beq	r3,zero,553c <_gp+0xffff5b20>
    5558:	88c00015 	stw	r3,0(r17)
    555c:	003ff706 	br	553c <_gp+0xffff5b20>

00005560 <_lseek_r>:
    5560:	defffd04 	addi	sp,sp,-12
    5564:	2805883a 	mov	r2,r5
    5568:	dc000015 	stw	r16,0(sp)
    556c:	04000074 	movhi	r16,1
    5570:	dc400115 	stw	r17,4(sp)
    5574:	300b883a 	mov	r5,r6
    5578:	84253604 	addi	r16,r16,-27432
    557c:	2023883a 	mov	r17,r4
    5580:	380d883a 	mov	r6,r7
    5584:	1009883a 	mov	r4,r2
    5588:	dfc00215 	stw	ra,8(sp)
    558c:	80000015 	stw	zero,0(r16)
    5590:	0005a840 	call	5a84 <lseek>
    5594:	00ffffc4 	movi	r3,-1
    5598:	10c00526 	beq	r2,r3,55b0 <_lseek_r+0x50>
    559c:	dfc00217 	ldw	ra,8(sp)
    55a0:	dc400117 	ldw	r17,4(sp)
    55a4:	dc000017 	ldw	r16,0(sp)
    55a8:	dec00304 	addi	sp,sp,12
    55ac:	f800283a 	ret
    55b0:	80c00017 	ldw	r3,0(r16)
    55b4:	183ff926 	beq	r3,zero,559c <_gp+0xffff5b80>
    55b8:	88c00015 	stw	r3,0(r17)
    55bc:	003ff706 	br	559c <_gp+0xffff5b80>

000055c0 <_read_r>:
    55c0:	defffd04 	addi	sp,sp,-12
    55c4:	2805883a 	mov	r2,r5
    55c8:	dc000015 	stw	r16,0(sp)
    55cc:	04000074 	movhi	r16,1
    55d0:	dc400115 	stw	r17,4(sp)
    55d4:	300b883a 	mov	r5,r6
    55d8:	84253604 	addi	r16,r16,-27432
    55dc:	2023883a 	mov	r17,r4
    55e0:	380d883a 	mov	r6,r7
    55e4:	1009883a 	mov	r4,r2
    55e8:	dfc00215 	stw	ra,8(sp)
    55ec:	80000015 	stw	zero,0(r16)
    55f0:	0005bf80 	call	5bf8 <read>
    55f4:	00ffffc4 	movi	r3,-1
    55f8:	10c00526 	beq	r2,r3,5610 <_read_r+0x50>
    55fc:	dfc00217 	ldw	ra,8(sp)
    5600:	dc400117 	ldw	r17,4(sp)
    5604:	dc000017 	ldw	r16,0(sp)
    5608:	dec00304 	addi	sp,sp,12
    560c:	f800283a 	ret
    5610:	80c00017 	ldw	r3,0(r16)
    5614:	183ff926 	beq	r3,zero,55fc <_gp+0xffff5be0>
    5618:	88c00015 	stw	r3,0(r17)
    561c:	003ff706 	br	55fc <_gp+0xffff5be0>

00005620 <__divsi3>:
    5620:	20001b16 	blt	r4,zero,5690 <__divsi3+0x70>
    5624:	000f883a 	mov	r7,zero
    5628:	28001616 	blt	r5,zero,5684 <__divsi3+0x64>
    562c:	200d883a 	mov	r6,r4
    5630:	29001a2e 	bgeu	r5,r4,569c <__divsi3+0x7c>
    5634:	00800804 	movi	r2,32
    5638:	00c00044 	movi	r3,1
    563c:	00000106 	br	5644 <__divsi3+0x24>
    5640:	10000d26 	beq	r2,zero,5678 <__divsi3+0x58>
    5644:	294b883a 	add	r5,r5,r5
    5648:	10bfffc4 	addi	r2,r2,-1
    564c:	18c7883a 	add	r3,r3,r3
    5650:	293ffb36 	bltu	r5,r4,5640 <_gp+0xffff5c24>
    5654:	0005883a 	mov	r2,zero
    5658:	18000726 	beq	r3,zero,5678 <__divsi3+0x58>
    565c:	0005883a 	mov	r2,zero
    5660:	31400236 	bltu	r6,r5,566c <__divsi3+0x4c>
    5664:	314dc83a 	sub	r6,r6,r5
    5668:	10c4b03a 	or	r2,r2,r3
    566c:	1806d07a 	srli	r3,r3,1
    5670:	280ad07a 	srli	r5,r5,1
    5674:	183ffa1e 	bne	r3,zero,5660 <_gp+0xffff5c44>
    5678:	38000126 	beq	r7,zero,5680 <__divsi3+0x60>
    567c:	0085c83a 	sub	r2,zero,r2
    5680:	f800283a 	ret
    5684:	014bc83a 	sub	r5,zero,r5
    5688:	39c0005c 	xori	r7,r7,1
    568c:	003fe706 	br	562c <_gp+0xffff5c10>
    5690:	0109c83a 	sub	r4,zero,r4
    5694:	01c00044 	movi	r7,1
    5698:	003fe306 	br	5628 <_gp+0xffff5c0c>
    569c:	00c00044 	movi	r3,1
    56a0:	003fee06 	br	565c <_gp+0xffff5c40>

000056a4 <__modsi3>:
    56a4:	20001716 	blt	r4,zero,5704 <__modsi3+0x60>
    56a8:	000f883a 	mov	r7,zero
    56ac:	2005883a 	mov	r2,r4
    56b0:	28001216 	blt	r5,zero,56fc <__modsi3+0x58>
    56b4:	2900162e 	bgeu	r5,r4,5710 <__modsi3+0x6c>
    56b8:	01800804 	movi	r6,32
    56bc:	00c00044 	movi	r3,1
    56c0:	00000106 	br	56c8 <__modsi3+0x24>
    56c4:	30000a26 	beq	r6,zero,56f0 <__modsi3+0x4c>
    56c8:	294b883a 	add	r5,r5,r5
    56cc:	31bfffc4 	addi	r6,r6,-1
    56d0:	18c7883a 	add	r3,r3,r3
    56d4:	293ffb36 	bltu	r5,r4,56c4 <_gp+0xffff5ca8>
    56d8:	18000526 	beq	r3,zero,56f0 <__modsi3+0x4c>
    56dc:	1806d07a 	srli	r3,r3,1
    56e0:	11400136 	bltu	r2,r5,56e8 <__modsi3+0x44>
    56e4:	1145c83a 	sub	r2,r2,r5
    56e8:	280ad07a 	srli	r5,r5,1
    56ec:	183ffb1e 	bne	r3,zero,56dc <_gp+0xffff5cc0>
    56f0:	38000126 	beq	r7,zero,56f8 <__modsi3+0x54>
    56f4:	0085c83a 	sub	r2,zero,r2
    56f8:	f800283a 	ret
    56fc:	014bc83a 	sub	r5,zero,r5
    5700:	003fec06 	br	56b4 <_gp+0xffff5c98>
    5704:	0109c83a 	sub	r4,zero,r4
    5708:	01c00044 	movi	r7,1
    570c:	003fe706 	br	56ac <_gp+0xffff5c90>
    5710:	00c00044 	movi	r3,1
    5714:	003ff106 	br	56dc <_gp+0xffff5cc0>

00005718 <__udivsi3>:
    5718:	200d883a 	mov	r6,r4
    571c:	2900152e 	bgeu	r5,r4,5774 <__udivsi3+0x5c>
    5720:	28001416 	blt	r5,zero,5774 <__udivsi3+0x5c>
    5724:	00800804 	movi	r2,32
    5728:	00c00044 	movi	r3,1
    572c:	00000206 	br	5738 <__udivsi3+0x20>
    5730:	10000e26 	beq	r2,zero,576c <__udivsi3+0x54>
    5734:	28000516 	blt	r5,zero,574c <__udivsi3+0x34>
    5738:	294b883a 	add	r5,r5,r5
    573c:	10bfffc4 	addi	r2,r2,-1
    5740:	18c7883a 	add	r3,r3,r3
    5744:	293ffa36 	bltu	r5,r4,5730 <_gp+0xffff5d14>
    5748:	18000826 	beq	r3,zero,576c <__udivsi3+0x54>
    574c:	0005883a 	mov	r2,zero
    5750:	31400236 	bltu	r6,r5,575c <__udivsi3+0x44>
    5754:	314dc83a 	sub	r6,r6,r5
    5758:	10c4b03a 	or	r2,r2,r3
    575c:	1806d07a 	srli	r3,r3,1
    5760:	280ad07a 	srli	r5,r5,1
    5764:	183ffa1e 	bne	r3,zero,5750 <_gp+0xffff5d34>
    5768:	f800283a 	ret
    576c:	0005883a 	mov	r2,zero
    5770:	f800283a 	ret
    5774:	00c00044 	movi	r3,1
    5778:	003ff406 	br	574c <_gp+0xffff5d30>

0000577c <__umodsi3>:
    577c:	2005883a 	mov	r2,r4
    5780:	2900122e 	bgeu	r5,r4,57cc <__umodsi3+0x50>
    5784:	28001116 	blt	r5,zero,57cc <__umodsi3+0x50>
    5788:	01800804 	movi	r6,32
    578c:	00c00044 	movi	r3,1
    5790:	00000206 	br	579c <__umodsi3+0x20>
    5794:	30000c26 	beq	r6,zero,57c8 <__umodsi3+0x4c>
    5798:	28000516 	blt	r5,zero,57b0 <__umodsi3+0x34>
    579c:	294b883a 	add	r5,r5,r5
    57a0:	31bfffc4 	addi	r6,r6,-1
    57a4:	18c7883a 	add	r3,r3,r3
    57a8:	293ffa36 	bltu	r5,r4,5794 <_gp+0xffff5d78>
    57ac:	18000626 	beq	r3,zero,57c8 <__umodsi3+0x4c>
    57b0:	1806d07a 	srli	r3,r3,1
    57b4:	11400136 	bltu	r2,r5,57bc <__umodsi3+0x40>
    57b8:	1145c83a 	sub	r2,r2,r5
    57bc:	280ad07a 	srli	r5,r5,1
    57c0:	183ffb1e 	bne	r3,zero,57b0 <_gp+0xffff5d94>
    57c4:	f800283a 	ret
    57c8:	f800283a 	ret
    57cc:	00c00044 	movi	r3,1
    57d0:	003ff706 	br	57b0 <_gp+0xffff5d94>

000057d4 <__mulsi3>:
    57d4:	0005883a 	mov	r2,zero
    57d8:	20000726 	beq	r4,zero,57f8 <__mulsi3+0x24>
    57dc:	20c0004c 	andi	r3,r4,1
    57e0:	2008d07a 	srli	r4,r4,1
    57e4:	18000126 	beq	r3,zero,57ec <__mulsi3+0x18>
    57e8:	1145883a 	add	r2,r2,r5
    57ec:	294b883a 	add	r5,r5,r5
    57f0:	203ffa1e 	bne	r4,zero,57dc <_gp+0xffff5dc0>
    57f4:	f800283a 	ret
    57f8:	f800283a 	ret

000057fc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    57fc:	defffd04 	addi	sp,sp,-12
    5800:	df000215 	stw	fp,8(sp)
    5804:	df000204 	addi	fp,sp,8
    5808:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    580c:	0001883a 	nop
    5810:	e0bfff17 	ldw	r2,-4(fp)
    5814:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    5818:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    581c:	10000226 	beq	r2,zero,5828 <_exit+0x2c>
    ALT_SIM_FAIL();
    5820:	002af070 	cmpltui	zero,zero,43969
    5824:	00000106 	br	582c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    5828:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    582c:	003fff06 	br	582c <_gp+0xffff5e10>

00005830 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5830:	defffe04 	addi	sp,sp,-8
    5834:	dfc00115 	stw	ra,4(sp)
    5838:	df000015 	stw	fp,0(sp)
    583c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5840:	00800034 	movhi	r2,0
    5844:	109e8c04 	addi	r2,r2,31280
    5848:	10800017 	ldw	r2,0(r2)
    584c:	10000526 	beq	r2,zero,5864 <alt_get_errno+0x34>
    5850:	00800034 	movhi	r2,0
    5854:	109e8c04 	addi	r2,r2,31280
    5858:	10800017 	ldw	r2,0(r2)
    585c:	103ee83a 	callr	r2
    5860:	00000206 	br	586c <alt_get_errno+0x3c>
    5864:	00800074 	movhi	r2,1
    5868:	10a53604 	addi	r2,r2,-27432
}
    586c:	e037883a 	mov	sp,fp
    5870:	dfc00117 	ldw	ra,4(sp)
    5874:	df000017 	ldw	fp,0(sp)
    5878:	dec00204 	addi	sp,sp,8
    587c:	f800283a 	ret

00005880 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    5880:	defffb04 	addi	sp,sp,-20
    5884:	dfc00415 	stw	ra,16(sp)
    5888:	df000315 	stw	fp,12(sp)
    588c:	df000304 	addi	fp,sp,12
    5890:	e13ffe15 	stw	r4,-8(fp)
    5894:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5898:	e0bffe17 	ldw	r2,-8(fp)
    589c:	10000816 	blt	r2,zero,58c0 <fstat+0x40>
    58a0:	01400304 	movi	r5,12
    58a4:	e13ffe17 	ldw	r4,-8(fp)
    58a8:	00057d40 	call	57d4 <__mulsi3>
    58ac:	1007883a 	mov	r3,r2
    58b0:	00800034 	movhi	r2,0
    58b4:	109c1c04 	addi	r2,r2,28784
    58b8:	1885883a 	add	r2,r3,r2
    58bc:	00000106 	br	58c4 <fstat+0x44>
    58c0:	0005883a 	mov	r2,zero
    58c4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    58c8:	e0bffd17 	ldw	r2,-12(fp)
    58cc:	10001026 	beq	r2,zero,5910 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    58d0:	e0bffd17 	ldw	r2,-12(fp)
    58d4:	10800017 	ldw	r2,0(r2)
    58d8:	10800817 	ldw	r2,32(r2)
    58dc:	10000726 	beq	r2,zero,58fc <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    58e0:	e0bffd17 	ldw	r2,-12(fp)
    58e4:	10800017 	ldw	r2,0(r2)
    58e8:	10800817 	ldw	r2,32(r2)
    58ec:	e17fff17 	ldw	r5,-4(fp)
    58f0:	e13ffd17 	ldw	r4,-12(fp)
    58f4:	103ee83a 	callr	r2
    58f8:	00000a06 	br	5924 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    58fc:	e0bfff17 	ldw	r2,-4(fp)
    5900:	00c80004 	movi	r3,8192
    5904:	10c00115 	stw	r3,4(r2)
      return 0;
    5908:	0005883a 	mov	r2,zero
    590c:	00000506 	br	5924 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    5910:	00058300 	call	5830 <alt_get_errno>
    5914:	1007883a 	mov	r3,r2
    5918:	00801444 	movi	r2,81
    591c:	18800015 	stw	r2,0(r3)
    return -1;
    5920:	00bfffc4 	movi	r2,-1
  }
}
    5924:	e037883a 	mov	sp,fp
    5928:	dfc00117 	ldw	ra,4(sp)
    592c:	df000017 	ldw	fp,0(sp)
    5930:	dec00204 	addi	sp,sp,8
    5934:	f800283a 	ret

00005938 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5938:	defffe04 	addi	sp,sp,-8
    593c:	dfc00115 	stw	ra,4(sp)
    5940:	df000015 	stw	fp,0(sp)
    5944:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5948:	00800034 	movhi	r2,0
    594c:	109e8c04 	addi	r2,r2,31280
    5950:	10800017 	ldw	r2,0(r2)
    5954:	10000526 	beq	r2,zero,596c <alt_get_errno+0x34>
    5958:	00800034 	movhi	r2,0
    595c:	109e8c04 	addi	r2,r2,31280
    5960:	10800017 	ldw	r2,0(r2)
    5964:	103ee83a 	callr	r2
    5968:	00000206 	br	5974 <alt_get_errno+0x3c>
    596c:	00800074 	movhi	r2,1
    5970:	10a53604 	addi	r2,r2,-27432
}
    5974:	e037883a 	mov	sp,fp
    5978:	dfc00117 	ldw	ra,4(sp)
    597c:	df000017 	ldw	fp,0(sp)
    5980:	dec00204 	addi	sp,sp,8
    5984:	f800283a 	ret

00005988 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    5988:	deffed04 	addi	sp,sp,-76
    598c:	dfc01215 	stw	ra,72(sp)
    5990:	df001115 	stw	fp,68(sp)
    5994:	df001104 	addi	fp,sp,68
    5998:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    599c:	e0bfff17 	ldw	r2,-4(fp)
    59a0:	10000816 	blt	r2,zero,59c4 <isatty+0x3c>
    59a4:	01400304 	movi	r5,12
    59a8:	e13fff17 	ldw	r4,-4(fp)
    59ac:	00057d40 	call	57d4 <__mulsi3>
    59b0:	1007883a 	mov	r3,r2
    59b4:	00800034 	movhi	r2,0
    59b8:	109c1c04 	addi	r2,r2,28784
    59bc:	1885883a 	add	r2,r3,r2
    59c0:	00000106 	br	59c8 <isatty+0x40>
    59c4:	0005883a 	mov	r2,zero
    59c8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    59cc:	e0bfef17 	ldw	r2,-68(fp)
    59d0:	10000e26 	beq	r2,zero,5a0c <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    59d4:	e0bfef17 	ldw	r2,-68(fp)
    59d8:	10800017 	ldw	r2,0(r2)
    59dc:	10800817 	ldw	r2,32(r2)
    59e0:	1000021e 	bne	r2,zero,59ec <isatty+0x64>
    {
      return 1;
    59e4:	00800044 	movi	r2,1
    59e8:	00000d06 	br	5a20 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    59ec:	e0bff004 	addi	r2,fp,-64
    59f0:	100b883a 	mov	r5,r2
    59f4:	e13fff17 	ldw	r4,-4(fp)
    59f8:	00058800 	call	5880 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    59fc:	e0bff117 	ldw	r2,-60(fp)
    5a00:	10880020 	cmpeqi	r2,r2,8192
    5a04:	10803fcc 	andi	r2,r2,255
    5a08:	00000506 	br	5a20 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    5a0c:	00059380 	call	5938 <alt_get_errno>
    5a10:	1007883a 	mov	r3,r2
    5a14:	00801444 	movi	r2,81
    5a18:	18800015 	stw	r2,0(r3)
    return 0;
    5a1c:	0005883a 	mov	r2,zero
  }
}
    5a20:	e037883a 	mov	sp,fp
    5a24:	dfc00117 	ldw	ra,4(sp)
    5a28:	df000017 	ldw	fp,0(sp)
    5a2c:	dec00204 	addi	sp,sp,8
    5a30:	f800283a 	ret

00005a34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5a34:	defffe04 	addi	sp,sp,-8
    5a38:	dfc00115 	stw	ra,4(sp)
    5a3c:	df000015 	stw	fp,0(sp)
    5a40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5a44:	00800034 	movhi	r2,0
    5a48:	109e8c04 	addi	r2,r2,31280
    5a4c:	10800017 	ldw	r2,0(r2)
    5a50:	10000526 	beq	r2,zero,5a68 <alt_get_errno+0x34>
    5a54:	00800034 	movhi	r2,0
    5a58:	109e8c04 	addi	r2,r2,31280
    5a5c:	10800017 	ldw	r2,0(r2)
    5a60:	103ee83a 	callr	r2
    5a64:	00000206 	br	5a70 <alt_get_errno+0x3c>
    5a68:	00800074 	movhi	r2,1
    5a6c:	10a53604 	addi	r2,r2,-27432
}
    5a70:	e037883a 	mov	sp,fp
    5a74:	dfc00117 	ldw	ra,4(sp)
    5a78:	df000017 	ldw	fp,0(sp)
    5a7c:	dec00204 	addi	sp,sp,8
    5a80:	f800283a 	ret

00005a84 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    5a84:	defff904 	addi	sp,sp,-28
    5a88:	dfc00615 	stw	ra,24(sp)
    5a8c:	df000515 	stw	fp,20(sp)
    5a90:	df000504 	addi	fp,sp,20
    5a94:	e13ffd15 	stw	r4,-12(fp)
    5a98:	e17ffe15 	stw	r5,-8(fp)
    5a9c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    5aa0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5aa4:	e0bffd17 	ldw	r2,-12(fp)
    5aa8:	10000816 	blt	r2,zero,5acc <lseek+0x48>
    5aac:	01400304 	movi	r5,12
    5ab0:	e13ffd17 	ldw	r4,-12(fp)
    5ab4:	00057d40 	call	57d4 <__mulsi3>
    5ab8:	1007883a 	mov	r3,r2
    5abc:	00800034 	movhi	r2,0
    5ac0:	109c1c04 	addi	r2,r2,28784
    5ac4:	1885883a 	add	r2,r3,r2
    5ac8:	00000106 	br	5ad0 <lseek+0x4c>
    5acc:	0005883a 	mov	r2,zero
    5ad0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    5ad4:	e0bffc17 	ldw	r2,-16(fp)
    5ad8:	10001026 	beq	r2,zero,5b1c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    5adc:	e0bffc17 	ldw	r2,-16(fp)
    5ae0:	10800017 	ldw	r2,0(r2)
    5ae4:	10800717 	ldw	r2,28(r2)
    5ae8:	10000926 	beq	r2,zero,5b10 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    5aec:	e0bffc17 	ldw	r2,-16(fp)
    5af0:	10800017 	ldw	r2,0(r2)
    5af4:	10800717 	ldw	r2,28(r2)
    5af8:	e1bfff17 	ldw	r6,-4(fp)
    5afc:	e17ffe17 	ldw	r5,-8(fp)
    5b00:	e13ffc17 	ldw	r4,-16(fp)
    5b04:	103ee83a 	callr	r2
    5b08:	e0bffb15 	stw	r2,-20(fp)
    5b0c:	00000506 	br	5b24 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    5b10:	00bfde84 	movi	r2,-134
    5b14:	e0bffb15 	stw	r2,-20(fp)
    5b18:	00000206 	br	5b24 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    5b1c:	00bfebc4 	movi	r2,-81
    5b20:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    5b24:	e0bffb17 	ldw	r2,-20(fp)
    5b28:	1000070e 	bge	r2,zero,5b48 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    5b2c:	0005a340 	call	5a34 <alt_get_errno>
    5b30:	1007883a 	mov	r3,r2
    5b34:	e0bffb17 	ldw	r2,-20(fp)
    5b38:	0085c83a 	sub	r2,zero,r2
    5b3c:	18800015 	stw	r2,0(r3)
    rc = -1;
    5b40:	00bfffc4 	movi	r2,-1
    5b44:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    5b48:	e0bffb17 	ldw	r2,-20(fp)
}
    5b4c:	e037883a 	mov	sp,fp
    5b50:	dfc00117 	ldw	ra,4(sp)
    5b54:	df000017 	ldw	fp,0(sp)
    5b58:	dec00204 	addi	sp,sp,8
    5b5c:	f800283a 	ret

00005b60 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    5b60:	defffe04 	addi	sp,sp,-8
    5b64:	df000115 	stw	fp,4(sp)
    5b68:	df000104 	addi	fp,sp,4
    5b6c:	e13fff15 	stw	r4,-4(fp)
}
    5b70:	0001883a 	nop
    5b74:	e037883a 	mov	sp,fp
    5b78:	df000017 	ldw	fp,0(sp)
    5b7c:	dec00104 	addi	sp,sp,4
    5b80:	f800283a 	ret

00005b84 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    5b84:	defffe04 	addi	sp,sp,-8
    5b88:	df000115 	stw	fp,4(sp)
    5b8c:	df000104 	addi	fp,sp,4
    5b90:	e13fff15 	stw	r4,-4(fp)
}
    5b94:	0001883a 	nop
    5b98:	e037883a 	mov	sp,fp
    5b9c:	df000017 	ldw	fp,0(sp)
    5ba0:	dec00104 	addi	sp,sp,4
    5ba4:	f800283a 	ret

00005ba8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5ba8:	defffe04 	addi	sp,sp,-8
    5bac:	dfc00115 	stw	ra,4(sp)
    5bb0:	df000015 	stw	fp,0(sp)
    5bb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5bb8:	00800034 	movhi	r2,0
    5bbc:	109e8c04 	addi	r2,r2,31280
    5bc0:	10800017 	ldw	r2,0(r2)
    5bc4:	10000526 	beq	r2,zero,5bdc <alt_get_errno+0x34>
    5bc8:	00800034 	movhi	r2,0
    5bcc:	109e8c04 	addi	r2,r2,31280
    5bd0:	10800017 	ldw	r2,0(r2)
    5bd4:	103ee83a 	callr	r2
    5bd8:	00000206 	br	5be4 <alt_get_errno+0x3c>
    5bdc:	00800074 	movhi	r2,1
    5be0:	10a53604 	addi	r2,r2,-27432
}
    5be4:	e037883a 	mov	sp,fp
    5be8:	dfc00117 	ldw	ra,4(sp)
    5bec:	df000017 	ldw	fp,0(sp)
    5bf0:	dec00204 	addi	sp,sp,8
    5bf4:	f800283a 	ret

00005bf8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    5bf8:	defff904 	addi	sp,sp,-28
    5bfc:	dfc00615 	stw	ra,24(sp)
    5c00:	df000515 	stw	fp,20(sp)
    5c04:	df000504 	addi	fp,sp,20
    5c08:	e13ffd15 	stw	r4,-12(fp)
    5c0c:	e17ffe15 	stw	r5,-8(fp)
    5c10:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5c14:	e0bffd17 	ldw	r2,-12(fp)
    5c18:	10000816 	blt	r2,zero,5c3c <read+0x44>
    5c1c:	01400304 	movi	r5,12
    5c20:	e13ffd17 	ldw	r4,-12(fp)
    5c24:	00057d40 	call	57d4 <__mulsi3>
    5c28:	1007883a 	mov	r3,r2
    5c2c:	00800034 	movhi	r2,0
    5c30:	109c1c04 	addi	r2,r2,28784
    5c34:	1885883a 	add	r2,r3,r2
    5c38:	00000106 	br	5c40 <read+0x48>
    5c3c:	0005883a 	mov	r2,zero
    5c40:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    5c44:	e0bffb17 	ldw	r2,-20(fp)
    5c48:	10002226 	beq	r2,zero,5cd4 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    5c4c:	e0bffb17 	ldw	r2,-20(fp)
    5c50:	10800217 	ldw	r2,8(r2)
    5c54:	108000cc 	andi	r2,r2,3
    5c58:	10800060 	cmpeqi	r2,r2,1
    5c5c:	1000181e 	bne	r2,zero,5cc0 <read+0xc8>
        (fd->dev->read))
    5c60:	e0bffb17 	ldw	r2,-20(fp)
    5c64:	10800017 	ldw	r2,0(r2)
    5c68:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    5c6c:	10001426 	beq	r2,zero,5cc0 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    5c70:	e0bffb17 	ldw	r2,-20(fp)
    5c74:	10800017 	ldw	r2,0(r2)
    5c78:	10800517 	ldw	r2,20(r2)
    5c7c:	e0ffff17 	ldw	r3,-4(fp)
    5c80:	180d883a 	mov	r6,r3
    5c84:	e17ffe17 	ldw	r5,-8(fp)
    5c88:	e13ffb17 	ldw	r4,-20(fp)
    5c8c:	103ee83a 	callr	r2
    5c90:	e0bffc15 	stw	r2,-16(fp)
    5c94:	e0bffc17 	ldw	r2,-16(fp)
    5c98:	1000070e 	bge	r2,zero,5cb8 <read+0xc0>
        {
          ALT_ERRNO = -rval;
    5c9c:	0005ba80 	call	5ba8 <alt_get_errno>
    5ca0:	1007883a 	mov	r3,r2
    5ca4:	e0bffc17 	ldw	r2,-16(fp)
    5ca8:	0085c83a 	sub	r2,zero,r2
    5cac:	18800015 	stw	r2,0(r3)
          return -1;
    5cb0:	00bfffc4 	movi	r2,-1
    5cb4:	00000c06 	br	5ce8 <read+0xf0>
        }
        return rval;
    5cb8:	e0bffc17 	ldw	r2,-16(fp)
    5cbc:	00000a06 	br	5ce8 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    5cc0:	0005ba80 	call	5ba8 <alt_get_errno>
    5cc4:	1007883a 	mov	r3,r2
    5cc8:	00800344 	movi	r2,13
    5ccc:	18800015 	stw	r2,0(r3)
    5cd0:	00000406 	br	5ce4 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    5cd4:	0005ba80 	call	5ba8 <alt_get_errno>
    5cd8:	1007883a 	mov	r3,r2
    5cdc:	00801444 	movi	r2,81
    5ce0:	18800015 	stw	r2,0(r3)
  }
  return -1;
    5ce4:	00bfffc4 	movi	r2,-1
}
    5ce8:	e037883a 	mov	sp,fp
    5cec:	dfc00117 	ldw	ra,4(sp)
    5cf0:	df000017 	ldw	fp,0(sp)
    5cf4:	dec00204 	addi	sp,sp,8
    5cf8:	f800283a 	ret

00005cfc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    5cfc:	defff904 	addi	sp,sp,-28
    5d00:	df000615 	stw	fp,24(sp)
    5d04:	df000604 	addi	fp,sp,24
    5d08:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5d0c:	0005303a 	rdctl	r2,status
    5d10:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5d14:	e0fffe17 	ldw	r3,-8(fp)
    5d18:	00bfff84 	movi	r2,-2
    5d1c:	1884703a 	and	r2,r3,r2
    5d20:	1001703a 	wrctl	status,r2
  
  return context;
    5d24:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    5d28:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    5d2c:	d0a00d17 	ldw	r2,-32716(gp)
    5d30:	10c000c4 	addi	r3,r2,3
    5d34:	00bfff04 	movi	r2,-4
    5d38:	1884703a 	and	r2,r3,r2
    5d3c:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    5d40:	d0e00d17 	ldw	r3,-32716(gp)
    5d44:	e0bfff17 	ldw	r2,-4(fp)
    5d48:	1887883a 	add	r3,r3,r2
    5d4c:	00800074 	movhi	r2,1
    5d50:	10a80004 	addi	r2,r2,-24576
    5d54:	10c0062e 	bgeu	r2,r3,5d70 <sbrk+0x74>
    5d58:	e0bffb17 	ldw	r2,-20(fp)
    5d5c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5d60:	e0bffa17 	ldw	r2,-24(fp)
    5d64:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    5d68:	00bfffc4 	movi	r2,-1
    5d6c:	00000b06 	br	5d9c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    5d70:	d0a00d17 	ldw	r2,-32716(gp)
    5d74:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    5d78:	d0e00d17 	ldw	r3,-32716(gp)
    5d7c:	e0bfff17 	ldw	r2,-4(fp)
    5d80:	1885883a 	add	r2,r3,r2
    5d84:	d0a00d15 	stw	r2,-32716(gp)
    5d88:	e0bffb17 	ldw	r2,-20(fp)
    5d8c:	e0bffc15 	stw	r2,-16(fp)
    5d90:	e0bffc17 	ldw	r2,-16(fp)
    5d94:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    5d98:	e0bffd17 	ldw	r2,-12(fp)
} 
    5d9c:	e037883a 	mov	sp,fp
    5da0:	df000017 	ldw	fp,0(sp)
    5da4:	dec00104 	addi	sp,sp,4
    5da8:	f800283a 	ret

00005dac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5dac:	defffe04 	addi	sp,sp,-8
    5db0:	dfc00115 	stw	ra,4(sp)
    5db4:	df000015 	stw	fp,0(sp)
    5db8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5dbc:	00800034 	movhi	r2,0
    5dc0:	109e8c04 	addi	r2,r2,31280
    5dc4:	10800017 	ldw	r2,0(r2)
    5dc8:	10000526 	beq	r2,zero,5de0 <alt_get_errno+0x34>
    5dcc:	00800034 	movhi	r2,0
    5dd0:	109e8c04 	addi	r2,r2,31280
    5dd4:	10800017 	ldw	r2,0(r2)
    5dd8:	103ee83a 	callr	r2
    5ddc:	00000206 	br	5de8 <alt_get_errno+0x3c>
    5de0:	00800074 	movhi	r2,1
    5de4:	10a53604 	addi	r2,r2,-27432
}
    5de8:	e037883a 	mov	sp,fp
    5dec:	dfc00117 	ldw	ra,4(sp)
    5df0:	df000017 	ldw	fp,0(sp)
    5df4:	dec00204 	addi	sp,sp,8
    5df8:	f800283a 	ret

00005dfc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    5dfc:	defff904 	addi	sp,sp,-28
    5e00:	dfc00615 	stw	ra,24(sp)
    5e04:	df000515 	stw	fp,20(sp)
    5e08:	df000504 	addi	fp,sp,20
    5e0c:	e13ffd15 	stw	r4,-12(fp)
    5e10:	e17ffe15 	stw	r5,-8(fp)
    5e14:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5e18:	e0bffd17 	ldw	r2,-12(fp)
    5e1c:	10000816 	blt	r2,zero,5e40 <write+0x44>
    5e20:	01400304 	movi	r5,12
    5e24:	e13ffd17 	ldw	r4,-12(fp)
    5e28:	00057d40 	call	57d4 <__mulsi3>
    5e2c:	1007883a 	mov	r3,r2
    5e30:	00800034 	movhi	r2,0
    5e34:	109c1c04 	addi	r2,r2,28784
    5e38:	1885883a 	add	r2,r3,r2
    5e3c:	00000106 	br	5e44 <write+0x48>
    5e40:	0005883a 	mov	r2,zero
    5e44:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    5e48:	e0bffb17 	ldw	r2,-20(fp)
    5e4c:	10002126 	beq	r2,zero,5ed4 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    5e50:	e0bffb17 	ldw	r2,-20(fp)
    5e54:	10800217 	ldw	r2,8(r2)
    5e58:	108000cc 	andi	r2,r2,3
    5e5c:	10001826 	beq	r2,zero,5ec0 <write+0xc4>
    5e60:	e0bffb17 	ldw	r2,-20(fp)
    5e64:	10800017 	ldw	r2,0(r2)
    5e68:	10800617 	ldw	r2,24(r2)
    5e6c:	10001426 	beq	r2,zero,5ec0 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    5e70:	e0bffb17 	ldw	r2,-20(fp)
    5e74:	10800017 	ldw	r2,0(r2)
    5e78:	10800617 	ldw	r2,24(r2)
    5e7c:	e0ffff17 	ldw	r3,-4(fp)
    5e80:	180d883a 	mov	r6,r3
    5e84:	e17ffe17 	ldw	r5,-8(fp)
    5e88:	e13ffb17 	ldw	r4,-20(fp)
    5e8c:	103ee83a 	callr	r2
    5e90:	e0bffc15 	stw	r2,-16(fp)
    5e94:	e0bffc17 	ldw	r2,-16(fp)
    5e98:	1000070e 	bge	r2,zero,5eb8 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    5e9c:	0005dac0 	call	5dac <alt_get_errno>
    5ea0:	1007883a 	mov	r3,r2
    5ea4:	e0bffc17 	ldw	r2,-16(fp)
    5ea8:	0085c83a 	sub	r2,zero,r2
    5eac:	18800015 	stw	r2,0(r3)
        return -1;
    5eb0:	00bfffc4 	movi	r2,-1
    5eb4:	00000c06 	br	5ee8 <write+0xec>
      }
      return rval;
    5eb8:	e0bffc17 	ldw	r2,-16(fp)
    5ebc:	00000a06 	br	5ee8 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    5ec0:	0005dac0 	call	5dac <alt_get_errno>
    5ec4:	1007883a 	mov	r3,r2
    5ec8:	00800344 	movi	r2,13
    5ecc:	18800015 	stw	r2,0(r3)
    5ed0:	00000406 	br	5ee4 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    5ed4:	0005dac0 	call	5dac <alt_get_errno>
    5ed8:	1007883a 	mov	r3,r2
    5edc:	00801444 	movi	r2,81
    5ee0:	18800015 	stw	r2,0(r3)
  }
  return -1;
    5ee4:	00bfffc4 	movi	r2,-1
}
    5ee8:	e037883a 	mov	sp,fp
    5eec:	dfc00117 	ldw	ra,4(sp)
    5ef0:	df000017 	ldw	fp,0(sp)
    5ef4:	dec00204 	addi	sp,sp,8
    5ef8:	f800283a 	ret
