--altaccumulate CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48 CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone IV E" EXTRA_LATENCY=4 LPM_REPRESENTATION="SIGNED" WIDTH_IN=32 WIDTH_OUT=32 aclr clken clock data result
--VERSION_BEGIN 15.0 cbx_altaccumulate 2015:04:22:18:04:07:SJ cbx_cycloneii 2015:04:22:18:04:07:SJ cbx_lpm_add_sub 2015:04:22:18:04:07:SJ cbx_mgl 2015:04:22:18:06:50:SJ cbx_stratix 2015:04:22:18:04:08:SJ cbx_stratixii 2015:04:22:18:04:08:SJ  VERSION_END


-- Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, the Altera Quartus II License Agreement,
--  the Altera MegaCore Function License Agreement, or other 
--  applicable license agreement, including, without limitation, 
--  that your use is for the sole purpose of programming logic 
--  devices manufactured by Altera and sold by Altera or its 
--  authorized distributors.  Please refer to the applicable 
--  agreement for further details.


FUNCTION cycloneive_lcell_comb (cin, dataa, datab, datac, datad)
WITH ( DONT_TOUCH, LUT_MASK, SUM_LUTC_INPUT)
RETURNS ( combout, cout);

--synthesis_resources = lut 32 reg 164 
SUBDESIGN accum_vgk
( 
	aclr	:	input;
	clken	:	input;
	clock	:	input;
	data[31..0]	:	input;
	result[31..0]	:	output;
) 
VARIABLE 
	acc_cella[31..0] : cycloneive_lcell_comb
		WITH (
			LUT_MASK = "96E8",
			SUM_LUTC_INPUT = "cin"
		);
	acc_ff0a[31..0] : dffe;
	acc_ff1a[31..0] : dffe;
	acc_ff2a[31..0] : dffe;
	acc_ff3a[31..0] : dffe;
	acc_ff4a[31..0] : dffe;
	carryout_reg7a[3..0] : dffe;

BEGIN 
	acc_cella[].cin = ( acc_cella[30..24].cout, carryout_reg7a[3..3].q, acc_cella[22..18].cout, carryout_reg7a[2..2].q, acc_cella[16..12].cout, carryout_reg7a[1..1].q, acc_cella[10..6].cout, carryout_reg7a[0..0].q, acc_cella[4..0].cout, B"0");
	acc_cella[].dataa = ( acc_ff4a[31..24].q, acc_ff3a[23..18].q, acc_ff2a[17..12].q, acc_ff1a[11..6].q, acc_ff0a[5..0].q);
	acc_cella[].datab = ( acc_ff3a[31..24].q, acc_ff2a[23..18].q, acc_ff1a[17..12].q, acc_ff0a[11..6].q, data[5..0]);
	acc_cella[].datad = B"11111111111111111111111111111111";
	acc_ff0a[].clk = clock;
	acc_ff0a[].clrn = (! aclr);
	acc_ff0a[].d = ( data[31..6], acc_cella[5..0].combout);
	acc_ff0a[].ena = clken;
	acc_ff1a[].clk = clock;
	acc_ff1a[].clrn = (! aclr);
	acc_ff1a[].d = ( acc_ff0a[31..12].q, acc_cella[11..6].combout, acc_ff0a[5..0].q);
	acc_ff1a[].ena = clken;
	acc_ff2a[].clk = clock;
	acc_ff2a[].clrn = (! aclr);
	acc_ff2a[].d = ( acc_ff1a[31..18].q, acc_cella[17..12].combout, acc_ff1a[11..0].q);
	acc_ff2a[].ena = clken;
	acc_ff3a[].clk = clock;
	acc_ff3a[].clrn = (! aclr);
	acc_ff3a[].d = ( acc_ff2a[31..24].q, acc_cella[23..18].combout, acc_ff2a[17..0].q);
	acc_ff3a[].ena = clken;
	acc_ff4a[].clk = clock;
	acc_ff4a[].clrn = (! aclr);
	acc_ff4a[].d = ( acc_cella[31..24].combout, acc_ff3a[23..0].q);
	acc_ff4a[].ena = clken;
	carryout_reg7a[].clk = clock;
	carryout_reg7a[].clrn = (! aclr);
	carryout_reg7a[].d = ( acc_cella[23].cout, acc_cella[17].cout, acc_cella[11].cout, acc_cella[5].cout);
	carryout_reg7a[].ena = clken;
	result[] = acc_ff4a[].q;
END;
--VALID FILE
