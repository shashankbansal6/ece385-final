--alt_ded_mult_y CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" dedicated_multiplier_circuitry="AUTO" device_family="Cyclone IV E" dsp_block_balancing="auto" input_aclr_a="ACLR0" input_aclr_b="ACLR0" input_reg_a="CLOCK1" input_reg_b="CLOCK1" level=0 output_aclr="ACLR0" output_reg="CLOCK0" pipeline=0 representation_a="UNSIGNED" representation_b="UNSIGNED" sub_dedicated_multiplier_circuitry="NO" width_a=16 width_b=16 aclr clock dataa datab ena result
--VERSION_BEGIN 15.0 cbx_alt_ded_mult_y 2015:04:22:18:04:07:SJ cbx_cycloneii 2015:04:22:18:04:07:SJ cbx_lpm_add_sub 2015:04:22:18:04:07:SJ cbx_mgl 2015:04:22:18:06:50:SJ cbx_padd 2015:04:22:18:04:08:SJ cbx_parallel_add 2015:04:22:18:04:08:SJ cbx_stratix 2015:04:22:18:04:08:SJ cbx_stratixii 2015:04:22:18:04:08:SJ cbx_util_mgl 2015:04:22:18:04:08:SJ  VERSION_END


-- Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, the Altera Quartus II License Agreement,
--  the Altera MegaCore Function License Agreement, or other 
--  applicable license agreement, including, without limitation, 
--  that your use is for the sole purpose of programming logic 
--  devices manufactured by Altera and sold by Altera or its 
--  authorized distributors.  Please refer to the applicable 
--  agreement for further details.


FUNCTION mac_mult_8s31 (aclr[3..0], clk[3..0], dataa[15..0], datab[15..0], ena[3..0], signa, signb)
RETURNS ( dataout[31..0]);
FUNCTION mac_out_ig21 (aclr[3..0], clk[3..0], dataa[31..0], ena[3..0], signa, signb)
RETURNS ( dataout[31..0]);
FUNCTION dffpipe_93c (d[31..0])
RETURNS ( q[31..0]);

--synthesis_resources = lut 357 reg 64 
SUBDESIGN ded_mult_ck81
( 
	aclr[3..0]	:	input;
	clock[3..0]	:	input;
	dataa[15..0]	:	input;
	datab[15..0]	:	input;
	ena[3..0]	:	input;
	result[31..0]	:	output;
) 
VARIABLE 
	mac_mult3 : mac_mult_8s31;
	mac_out4 : mac_out_ig21;
	pre_result : dffpipe_93c;
	x_dataa[15..0]	: WIRE;
	x_datab[15..0]	: WIRE;
	x_signa[0..0]	: WIRE;
	x_signb[0..0]	: WIRE;

BEGIN 
	mac_mult3.aclr[] = ( B"000", aclr[0..0]);
	mac_mult3.clk[] = ( B"0", B"0", clock[1..0]);
	mac_mult3.dataa[] = ( x_dataa[]);
	mac_mult3.datab[] = ( x_datab[]);
	mac_mult3.ena[] = ( B"11", ena[1..0]);
	mac_mult3.signa = x_signa[];
	mac_mult3.signb = x_signb[];
	mac_out4.aclr[] = ( B"000", aclr[0..0]);
	mac_out4.clk[] = ( B"0", B"0", B"0", clock[0..0]);
	mac_out4.dataa[] = mac_mult3.dataout[];
	mac_out4.ena[] = ( B"111", ena[0..0]);
	mac_out4.signa = x_signa[];
	mac_out4.signb = x_signb[];
	pre_result.d[31..0] = mac_out4.dataout[31..0];
	result[] = pre_result.q[];
	x_dataa[] = dataa[];
	x_datab[] = datab[];
	x_signa[] = B"0";
	x_signb[] = B"0";
END;
--VALID FILE
