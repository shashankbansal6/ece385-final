--alt_mac_mult CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DATAA_CLEAR="A_0" DATAA_CLOCK="A_1" DATAA_WIDTH=16 DATAB_CLEAR="A_0" DATAB_CLOCK="A_1" DATAB_WIDTH=16 MULT_REPRESENTATION_A="UNSIGNED" MULT_REPRESENTATION_B="UNSIGNED" OUTPUT_CLEAR="NONE" OUTPUT_CLOCK="NONE" OUTPUT_WIDTH=32 SIGNA_CLEAR="NONE" SIGNA_CLOCK="NONE" SIGNB_CLEAR="NONE" SIGNB_CLOCK="NONE" aclr clk dataa datab dataout ena signa signb
--VERSION_BEGIN 15.0 cbx_alt_mac_mult 2015:04:22:18:04:07:SJ cbx_mgl 2015:04:22:18:06:50:SJ  VERSION_END


-- Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, the Altera Quartus II License Agreement,
--  the Altera MegaCore Function License Agreement, or other 
--  applicable license agreement, including, without limitation, 
--  that your use is for the sole purpose of programming logic 
--  devices manufactured by Altera and sold by Altera or its 
--  authorized distributors.  Please refer to the applicable 
--  agreement for further details.


FUNCTION mult_pum (dataa[15..0], datab[15..0])
RETURNS ( result[31..0]);

--synthesis_resources = lut 357 reg 32 
SUBDESIGN mac_mult_8s31
( 
	aclr[3..0]	:	input;
	clk[3..0]	:	input;
	dataa[15..0]	:	input;
	datab[15..0]	:	input;
	dataout[31..0]	:	output;
	ena[3..0]	:	input;
	signa	:	input;
	signb	:	input;
) 
VARIABLE 
	dataa_reg[15..0] : dffe;
	datab_reg[15..0] : dffe;
	mult5 : mult_pum;
	tmp_dataout[31..0]	: WIRE;
	x_dataa[15..0]	: WIRE;
	x_datab[15..0]	: WIRE;
	x_output[31..0]	: WIRE;

BEGIN 
	dataa_reg[].clk = clk[1..1];
	dataa_reg[].clrn = (! aclr[0..0]);
	dataa_reg[].d = dataa[];
	dataa_reg[].ena = ena[1..1];
	datab_reg[].clk = clk[1..1];
	datab_reg[].clrn = (! aclr[0..0]);
	datab_reg[].d = datab[];
	datab_reg[].ena = ena[1..1];
	mult5.dataa[] = x_dataa[];
	mult5.datab[] = x_datab[];
	dataout[] = tmp_dataout[];
	tmp_dataout[] = (x_output[] & (((signa # (! signa)) # signb) # (! signb)));
	x_dataa[] = ( dataa_reg[].q);
	x_datab[] = ( datab_reg[].q);
	x_output[31..0] = mult5.result[31..0];
END;
--VALID FILE
