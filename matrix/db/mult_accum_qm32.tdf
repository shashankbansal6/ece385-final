--altmult_accum ACCUM_DIRECTION="ADD" ADDNSUB_PIPELINE_REG="CLOCK0" ADDNSUB_REG="CLOCK1" CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEDICATED_MULTIPLIER_CIRCUITRY="AUTO" DEVICE_FAMILY="Cyclone IV E" DSP_BLOCK_BALANCING="Auto" INPUT_REG_A="CLOCK1" INPUT_REG_B="CLOCK1" INPUT_SOURCE_A="DATAA" INPUT_SOURCE_B="DATAB" MULTIPLIER_REG="CLOCK0" OUTPUT_REG="CLOCK1" PORT_ADDNSUB="PORT_UNUSED" PORT_SIGNA="PORT_UNUSED" PORT_SIGNB="PORT_UNUSED" REPRESENTATION_A="UNSIGNED" REPRESENTATION_B="UNSIGNED" SIGN_PIPELINE_REG_A="CLOCK0" SIGN_PIPELINE_REG_B="CLOCK0" SIGN_REG_A="CLOCK1" SIGN_REG_B="CLOCK1" WIDTH_A=16 WIDTH_B=16 WIDTH_RESULT=33 clock0 clock1 coefsel0 coefsel1 coefsel2 coefsel3 dataa datab datac result CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 15.0 cbx_alt_ded_mult_y 2015:04:22:18:04:07:SJ cbx_alt_zaccum 2015:04:22:18:04:07:SJ cbx_altaccumulate 2015:04:22:18:04:07:SJ cbx_altera_mult_add 2015:04:22:18:04:07:SJ cbx_altera_mult_add_rtl 2015:04:22:18:04:07:SJ cbx_altmult_accum 2015:04:22:18:04:07:SJ cbx_altmult_add 2015:04:22:18:04:07:SJ cbx_cycloneii 2015:04:22:18:04:07:SJ cbx_lpm_add_sub 2015:04:22:18:04:07:SJ cbx_lpm_mult 2015:04:22:18:04:08:SJ cbx_mgl 2015:04:22:18:06:50:SJ cbx_padd 2015:04:22:18:04:08:SJ cbx_parallel_add 2015:04:22:18:04:08:SJ cbx_stratix 2015:04:22:18:04:08:SJ cbx_stratixii 2015:04:22:18:04:08:SJ cbx_util_mgl 2015:04:22:18:04:08:SJ  VERSION_END


-- Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, the Altera Quartus II License Agreement,
--  the Altera MegaCore Function License Agreement, or other 
--  applicable license agreement, including, without limitation, 
--  that your use is for the sole purpose of programming logic 
--  devices manufactured by Altera and sold by Altera or its 
--  authorized distributors.  Please refer to the applicable 
--  agreement for further details.


FUNCTION ded_mult_ck81 (aclr[3..0], clock[3..0], dataa[15..0], datab[15..0], ena[3..0])
RETURNS ( result[31..0]);
FUNCTION zaccum_efi (aclr, clken, clock, data[31..0], sign_data)
RETURNS ( result[32..0]);

--synthesis_resources = lut 390 reg 97 
SUBDESIGN mult_accum_qm32
( 
	clock0	:	input;
	clock1	:	input;
	coefsel0[2..0]	:	input;
	coefsel1[2..0]	:	input;
	coefsel2[2..0]	:	input;
	coefsel3[2..0]	:	input;
	dataa[15..0]	:	input;
	datab[15..0]	:	input;
	datac[21..0]	:	input;
	result[32..0]	:	output;
) 
VARIABLE 
	ded_mult1 : ded_mult_ck81;
	zaccum2 : zaccum_efi;
	aclr0	: NODE;
	aclr1	: NODE;
	aclr2	: NODE;
	aclr3	: NODE;
	aclr_wire[3..0]	: WIRE;
	clock2	: NODE;
	clock3	: NODE;
	clock_wire[3..0]	: WIRE;
	ena0	: NODE;
	ena1	: NODE;
	ena2	: NODE;
	ena3	: NODE;
	ena_wire[3..0]	: WIRE;
	signa_pipe_reg_wire	: WIRE;
	signb_pipe_reg_wire	: WIRE;

BEGIN 
	ded_mult1.aclr[] = ( B"000", aclr0);
	ded_mult1.clock[] = ( B"1", B"1", clock1, clock0);
	ded_mult1.dataa[] = dataa[];
	ded_mult1.datab[] = datab[];
	ded_mult1.ena[] = ( B"11", ena1, ena0);
	zaccum2.aclr = aclr_wire[0..0];
	zaccum2.clken = ena_wire[1..1];
	zaccum2.clock = clock_wire[1..1];
	zaccum2.data[] = ded_mult1.result[];
	zaccum2.sign_data = (signa_pipe_reg_wire # signb_pipe_reg_wire);
	aclr0 = GND;
	aclr1 = GND;
	aclr2 = GND;
	aclr3 = GND;
	aclr_wire[] = ( aclr3, aclr2, aclr1, aclr0);
	clock2 = VCC;
	clock3 = VCC;
	clock_wire[] = ( clock3, clock2, clock1, clock0);
	ena0 = VCC;
	ena1 = VCC;
	ena2 = VCC;
	ena3 = VCC;
	ena_wire[] = ( ena3, ena2, ena1, ena0);
	result[] = zaccum2.result[];
	signa_pipe_reg_wire = B"0";
	signb_pipe_reg_wire = B"0";
	ASSERT (0) 
	REPORT "The current configuration of altmult_accum cannot be implemented in dsp blocks. Using Logic Elements instead."
	SEVERITY WARNING;
END;
--VALID FILE
